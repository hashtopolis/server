{
  "openapi": "3.0.1",
  "info": {
    "title": "Hashtopolis API",
    "version": "v2"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "paths": {
    "/api/v2/ui/accessgroups": {
      "get": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessGroupResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: userMembers,agentMembers"
          }
        ]
      },
      "post": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroupPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroupCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/accessgroups/count": {
      "get": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessGroupResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: userMembers,agentMembers"
          }
        ]
      }
    },
    "/api/v2/ui/accessgroups/{id:[0-9]+}/{relation:userMembers}": {
      "get": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroupRelationUserMembersGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/accessgroups/{id:[0-9]+}/relationships/{relation:userMembers}": {
      "get": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroupRelationUserMembers"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroupRelationUserMembers"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/accessgroups/{id:[0-9]+}/{relation:agentMembers}": {
      "get": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroupRelationAgentMembersGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/accessgroups/{id:[0-9]+}/relationships/{relation:agentMembers}": {
      "get": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroupRelationAgentMembers"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroupRelationAgentMembers"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/accessgroups/{id:[0-9]+}": {
      "get": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroupPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroupPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "AccessGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAccessGroupDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agentassignments": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: agent,task"
          }
        ]
      },
      "post": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/agentassignments/count": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: agent,task"
          }
        ]
      }
    },
    "/api/v2/ui/agentassignments/{id:[0-9]+}/{relation:agent}": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentRelationAgentGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/agentassignments/{id:[0-9]+}/relationships/{relation:agent}": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentRelationAgent"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agentassignments/{id:[0-9]+}/{relation:task}": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentRelationTaskGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/agentassignments/{id:[0-9]+}/relationships/{relation:task}": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentRelationTask"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agentassignments/{id:[0-9]+}": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Assignments"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentAssignmentDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agentbinaries": {
      "get": {
        "tags": [
          "AgentBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentBinaryResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentBinaryRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      },
      "post": {
        "tags": [
          "AgentBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentBinaryPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentBinaryCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentBinaryCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "AgentBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentBinaryUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "AgentBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentBinaryDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/agentbinaries/count": {
      "get": {
        "tags": [
          "AgentBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentBinaryResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentBinaryRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      }
    },
    "/api/v2/ui/agentbinaries/{id:[0-9]+}": {
      "get": {
        "tags": [
          "AgentBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentBinaryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentBinaryRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "AgentBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentBinaryPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentBinaryUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentBinaryPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "AgentBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentBinaryDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agenterrors": {
      "get": {
        "tags": [
          "AgentErrors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentErrorResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentErrorRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: task"
          }
        ]
      },
      "delete": {
        "tags": [
          "AgentErrors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentErrorDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/agenterrors/count": {
      "get": {
        "tags": [
          "AgentErrors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentErrorResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentErrorRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: task"
          }
        ]
      }
    },
    "/api/v2/ui/agenterrors/{id:[0-9]+}/{relation:task}": {
      "get": {
        "tags": [
          "AgentErrors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentErrorRelationTaskGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentErrorRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/agenterrors/{id:[0-9]+}/relationships/{relation:task}": {
      "get": {
        "tags": [
          "AgentErrors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentErrorRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "AgentErrors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentErrorUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentErrorRelationTask"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agenterrors/{id:[0-9]+}": {
      "get": {
        "tags": [
          "AgentErrors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentErrorRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "delete": {
        "tags": [
          "AgentErrors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentErrorDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agents": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: accessGroups,agentStats,agentErrors,chunks,tasks,assignments"
          }
        ]
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/agents/count": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: accessGroups,agentStats,agentErrors,chunks,tasks,assignments"
          }
        ]
      }
    },
    "/api/v2/ui/agents/{id:[0-9]+}/{relation:accessGroups}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentRelationAccessGroupsGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/agents/{id:[0-9]+}/relationships/{relation:accessGroups}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRelationAccessGroups"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRelationAccessGroups"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agents/{id:[0-9]+}/{relation:agentStats}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentRelationAgentStatsGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/agents/{id:[0-9]+}/relationships/{relation:agentStats}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRelationAgentStats"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRelationAgentStats"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agents/{id:[0-9]+}/{relation:agentErrors}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentRelationAgentErrorsGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/agents/{id:[0-9]+}/relationships/{relation:agentErrors}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRelationAgentErrors"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRelationAgentErrors"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agents/{id:[0-9]+}/{relation:chunks}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentRelationChunksGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/agents/{id:[0-9]+}/relationships/{relation:chunks}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRelationChunks"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRelationChunks"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agents/{id:[0-9]+}/{relation:tasks}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentRelationTasksGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/agents/{id:[0-9]+}/relationships/{relation:tasks}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRelationTasks"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRelationTasks"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agents/{id:[0-9]+}/{relation:assignments}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentRelationAssignmentsGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/agents/{id:[0-9]+}/relationships/{relation:assignments}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRelationAssignments"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentRelationAssignments"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agents/{id:[0-9]+}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/agentstats": {
      "get": {
        "tags": [
          "AgentStats"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentStatResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentStatRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      },
      "delete": {
        "tags": [
          "AgentStats"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentStatDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/agentstats/count": {
      "get": {
        "tags": [
          "AgentStats"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentStatResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentStatRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      }
    },
    "/api/v2/ui/agentstats/{id:[0-9]+}": {
      "get": {
        "tags": [
          "AgentStats"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentStatResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentStatRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "delete": {
        "tags": [
          "AgentStats"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permAgentStatDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/chunks": {
      "get": {
        "tags": [
          "Chunks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChunkResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permChunkRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: agent,task"
          }
        ]
      }
    },
    "/api/v2/ui/chunks/count": {
      "get": {
        "tags": [
          "Chunks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChunkResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permChunkRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: agent,task"
          }
        ]
      }
    },
    "/api/v2/ui/chunks/{id:[0-9]+}/{relation:agent}": {
      "get": {
        "tags": [
          "Chunks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChunkRelationAgentGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permChunkRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/chunks/{id:[0-9]+}/relationships/{relation:agent}": {
      "get": {
        "tags": [
          "Chunks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChunkResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permChunkRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Chunks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permChunkUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChunkRelationAgent"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/chunks/{id:[0-9]+}/{relation:task}": {
      "get": {
        "tags": [
          "Chunks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChunkRelationTaskGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permChunkRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/chunks/{id:[0-9]+}/relationships/{relation:task}": {
      "get": {
        "tags": [
          "Chunks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChunkResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permChunkRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Chunks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permChunkUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChunkRelationTask"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/chunks/{id:[0-9]+}": {
      "get": {
        "tags": [
          "Chunks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChunkResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permChunkRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      }
    },
    "/api/v2/ui/configs": {
      "get": {
        "tags": [
          "Configs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permConfigRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: configSection"
          }
        ]
      },
      "patch": {
        "tags": [
          "Configs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permConfigUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      }
    },
    "/api/v2/ui/configs/count": {
      "get": {
        "tags": [
          "Configs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permConfigRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: configSection"
          }
        ]
      }
    },
    "/api/v2/ui/configs/{id:[0-9]+}/{relation:configSection}": {
      "get": {
        "tags": [
          "Configs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigRelationConfigSectionGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permConfigRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/configs/{id:[0-9]+}/relationships/{relation:configSection}": {
      "get": {
        "tags": [
          "Configs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permConfigRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Configs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permConfigUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigRelationConfigSection"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/configs/{id:[0-9]+}": {
      "get": {
        "tags": [
          "Configs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permConfigRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "Configs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permConfigUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigPatch"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/configsections": {
      "get": {
        "tags": [
          "ConfigSections"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigSectionResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permConfigSectionRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      }
    },
    "/api/v2/ui/configsections/count": {
      "get": {
        "tags": [
          "ConfigSections"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigSectionResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permConfigSectionRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      }
    },
    "/api/v2/ui/configsections/{id:[0-9]+}": {
      "get": {
        "tags": [
          "ConfigSections"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigSectionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permConfigSectionRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      }
    },
    "/api/v2/ui/crackers": {
      "get": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CrackerBinaryResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: crackerBinaryType,tasks"
          }
        ]
      },
      "post": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrackerBinaryCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/crackers/count": {
      "get": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CrackerBinaryResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: crackerBinaryType,tasks"
          }
        ]
      }
    },
    "/api/v2/ui/crackers/{id:[0-9]+}/{relation:crackerBinaryType}": {
      "get": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryRelationCrackerBinaryTypeGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/crackers/{id:[0-9]+}/relationships/{relation:crackerBinaryType}": {
      "get": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrackerBinaryRelationCrackerBinaryType"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/crackers/{id:[0-9]+}/{relation:tasks}": {
      "get": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryRelationTasksGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/crackers/{id:[0-9]+}/relationships/{relation:tasks}": {
      "get": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrackerBinaryRelationTasks"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrackerBinaryRelationTasks"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/crackers/{id:[0-9]+}": {
      "get": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrackerBinaryPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "CrackerBinarys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/crackertypes": {
      "get": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: crackerVersions,tasks"
          }
        ]
      },
      "post": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryTypePostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrackerBinaryTypeCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/crackertypes/count": {
      "get": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: crackerVersions,tasks"
          }
        ]
      }
    },
    "/api/v2/ui/crackertypes/{id:[0-9]+}/{relation:crackerVersions}": {
      "get": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryTypeRelationCrackerVersionsGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/crackertypes/{id:[0-9]+}/relationships/{relation:crackerVersions}": {
      "get": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrackerBinaryTypeRelationCrackerVersions"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrackerBinaryTypeRelationCrackerVersions"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/crackertypes/{id:[0-9]+}/{relation:tasks}": {
      "get": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryTypeRelationTasksGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/crackertypes/{id:[0-9]+}/relationships/{relation:tasks}": {
      "get": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrackerBinaryTypeRelationTasks"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrackerBinaryTypeRelationTasks"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/crackertypes/{id:[0-9]+}": {
      "get": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrackerBinaryTypePostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrackerBinaryTypePatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "CrackerBinaryTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permCrackerBinaryTypeDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permFileRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: accessGroup"
          }
        ]
      },
      "post": {
        "tags": [
          "Files"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilePostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permFileCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "Files"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permFileUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permFileDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/files/count": {
      "get": {
        "tags": [
          "Files"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permFileRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: accessGroup"
          }
        ]
      }
    },
    "/api/v2/ui/files/{id:[0-9]+}/{relation:accessGroup}": {
      "get": {
        "tags": [
          "Files"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileRelationAccessGroupGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permFileRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/files/{id:[0-9]+}/relationships/{relation:accessGroup}": {
      "get": {
        "tags": [
          "Files"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permFileRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Files"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permFileUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileRelationAccessGroup"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/files/{id:[0-9]+}": {
      "get": {
        "tags": [
          "Files"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permFileRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "Files"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilePostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permFileUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilePatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permFileDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/globalpermissiongroups": {
      "get": {
        "tags": [
          "RightGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RightGroupResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRightGroupRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: userMembers"
          }
        ]
      },
      "post": {
        "tags": [
          "RightGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RightGroupPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRightGroupCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RightGroupCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "RightGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRightGroupUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "RightGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRightGroupDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/globalpermissiongroups/count": {
      "get": {
        "tags": [
          "RightGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RightGroupResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRightGroupRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: userMembers"
          }
        ]
      }
    },
    "/api/v2/ui/globalpermissiongroups/{id:[0-9]+}/{relation:userMembers}": {
      "get": {
        "tags": [
          "RightGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RightGroupRelationUserMembersGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRightGroupRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/globalpermissiongroups/{id:[0-9]+}/relationships/{relation:userMembers}": {
      "get": {
        "tags": [
          "RightGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RightGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRightGroupRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "RightGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRightGroupUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RightGroupRelationUserMembers"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "RightGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRightGroupCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "RightGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRightGroupDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RightGroupRelationUserMembers"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/globalpermissiongroups/{id:[0-9]+}": {
      "get": {
        "tags": [
          "RightGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RightGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRightGroupRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "RightGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RightGroupPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRightGroupUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RightGroupPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "RightGroups"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRightGroupDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/hashes": {
      "get": {
        "tags": [
          "Hashs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HashResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: chunk,hashlist"
          }
        ]
      }
    },
    "/api/v2/ui/hashes/count": {
      "get": {
        "tags": [
          "Hashs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HashResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: chunk,hashlist"
          }
        ]
      }
    },
    "/api/v2/ui/hashes/{id:[0-9]+}/{relation:chunk}": {
      "get": {
        "tags": [
          "Hashs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashRelationChunkGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/hashes/{id:[0-9]+}/relationships/{relation:chunk}": {
      "get": {
        "tags": [
          "Hashs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Hashs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashRelationChunk"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/hashes/{id:[0-9]+}/{relation:hashlist}": {
      "get": {
        "tags": [
          "Hashs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashRelationHashlistGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/hashes/{id:[0-9]+}/relationships/{relation:hashlist}": {
      "get": {
        "tags": [
          "Hashs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Hashs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashRelationHashlist"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/hashes/{id:[0-9]+}": {
      "get": {
        "tags": [
          "Hashs"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      }
    },
    "/api/v2/ui/hashlists": {
      "get": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HashlistResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: accessGroup,hashType,hashes,hashlists,tasks"
          }
        ]
      },
      "post": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashlistCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/hashlists/count": {
      "get": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HashlistResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: accessGroup,hashType,hashes,hashlists,tasks"
          }
        ]
      }
    },
    "/api/v2/ui/hashlists/{id:[0-9]+}/{relation:accessGroup}": {
      "get": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistRelationAccessGroupGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/hashlists/{id:[0-9]+}/relationships/{relation:accessGroup}": {
      "get": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashlistRelationAccessGroup"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/hashlists/{id:[0-9]+}/{relation:hashType}": {
      "get": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistRelationHashTypeGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/hashlists/{id:[0-9]+}/relationships/{relation:hashType}": {
      "get": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashlistRelationHashType"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/hashlists/{id:[0-9]+}/{relation:hashes}": {
      "get": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistRelationHashesGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/hashlists/{id:[0-9]+}/relationships/{relation:hashes}": {
      "get": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashlistRelationHashes"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashlistRelationHashes"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/hashlists/{id:[0-9]+}/{relation:hashlists}": {
      "get": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistRelationHashlistsGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/hashlists/{id:[0-9]+}/relationships/{relation:hashlists}": {
      "get": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashlistRelationHashlists"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashlistRelationHashlists"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/hashlists/{id:[0-9]+}/{relation:tasks}": {
      "get": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistRelationTasksGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/hashlists/{id:[0-9]+}/relationships/{relation:tasks}": {
      "get": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashlistRelationTasks"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashlistRelationTasks"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/hashlists/{id:[0-9]+}": {
      "get": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashlistPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Hashlists"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashlistDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/hashtypes": {
      "get": {
        "tags": [
          "HashTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HashTypeResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashTypeRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      },
      "post": {
        "tags": [
          "HashTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashTypePostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashTypeCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashTypeCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "HashTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashTypeUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "HashTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashTypeDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/hashtypes/count": {
      "get": {
        "tags": [
          "HashTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HashTypeResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashTypeRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      }
    },
    "/api/v2/ui/hashtypes/{id:[0-9]+}": {
      "get": {
        "tags": [
          "HashTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashTypeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashTypeRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "HashTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashTypePostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashTypeUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashTypePatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "HashTypes"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHashTypeDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/healthcheckagents": {
      "get": {
        "tags": [
          "HealthCheckAgents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthCheckAgentResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckAgentRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: agent,healthCheck"
          }
        ]
      }
    },
    "/api/v2/ui/healthcheckagents/count": {
      "get": {
        "tags": [
          "HealthCheckAgents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthCheckAgentResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckAgentRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: agent,healthCheck"
          }
        ]
      }
    },
    "/api/v2/ui/healthcheckagents/{id:[0-9]+}/{relation:agent}": {
      "get": {
        "tags": [
          "HealthCheckAgents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckAgentRelationAgentGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/healthcheckagents/{id:[0-9]+}/relationships/{relation:agent}": {
      "get": {
        "tags": [
          "HealthCheckAgents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckAgentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "HealthCheckAgents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckAgentUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthCheckAgentRelationAgent"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/healthcheckagents/{id:[0-9]+}/{relation:healthCheck}": {
      "get": {
        "tags": [
          "HealthCheckAgents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckAgentRelationHealthCheckGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/healthcheckagents/{id:[0-9]+}/relationships/{relation:healthCheck}": {
      "get": {
        "tags": [
          "HealthCheckAgents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckAgentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "HealthCheckAgents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckAgentUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthCheckAgentRelationHealthCheck"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/healthcheckagents/{id:[0-9]+}": {
      "get": {
        "tags": [
          "HealthCheckAgents"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckAgentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckAgentRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      }
    },
    "/api/v2/ui/healthchecks": {
      "get": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthCheckResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: crackerBinary,hashType,healthCheckAgents"
          }
        ]
      },
      "post": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthCheckCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/healthchecks/count": {
      "get": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthCheckResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: crackerBinary,hashType,healthCheckAgents"
          }
        ]
      }
    },
    "/api/v2/ui/healthchecks/{id:[0-9]+}/{relation:crackerBinary}": {
      "get": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckRelationCrackerBinaryGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/healthchecks/{id:[0-9]+}/relationships/{relation:crackerBinary}": {
      "get": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthCheckRelationCrackerBinary"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/healthchecks/{id:[0-9]+}/{relation:hashType}": {
      "get": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckRelationHashTypeGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/healthchecks/{id:[0-9]+}/relationships/{relation:hashType}": {
      "get": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthCheckRelationHashType"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/healthchecks/{id:[0-9]+}/{relation:healthCheckAgents}": {
      "get": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckRelationHealthCheckAgentsGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/healthchecks/{id:[0-9]+}/relationships/{relation:healthCheckAgents}": {
      "get": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthCheckRelationHealthCheckAgents"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthCheckRelationHealthCheckAgents"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/healthchecks/{id:[0-9]+}": {
      "get": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthCheckPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "HealthChecks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permHealthCheckDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/logentries": {
      "get": {
        "tags": [
          "LogEntrys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogEntryResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permLogEntryRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      },
      "post": {
        "tags": [
          "LogEntrys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permLogEntryCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogEntryCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "LogEntrys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permLogEntryUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "LogEntrys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permLogEntryDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/logentries/count": {
      "get": {
        "tags": [
          "LogEntrys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogEntryResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permLogEntryRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      }
    },
    "/api/v2/ui/logentries/{id:[0-9]+}": {
      "get": {
        "tags": [
          "LogEntrys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permLogEntryRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "LogEntrys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permLogEntryUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogEntryPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "LogEntrys"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permLogEntryDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/notifications": {
      "get": {
        "tags": [
          "NotificationSettings"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationSettingResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permNotificationSettingRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: user"
          }
        ]
      },
      "post": {
        "tags": [
          "NotificationSettings"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permNotificationSettingCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSettingCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "NotificationSettings"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permNotificationSettingUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "NotificationSettings"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permNotificationSettingDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/notifications/count": {
      "get": {
        "tags": [
          "NotificationSettings"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationSettingResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permNotificationSettingRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: user"
          }
        ]
      }
    },
    "/api/v2/ui/notifications/{id:[0-9]+}/{relation:user}": {
      "get": {
        "tags": [
          "NotificationSettings"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingRelationUserGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permNotificationSettingRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/notifications/{id:[0-9]+}/relationships/{relation:user}": {
      "get": {
        "tags": [
          "NotificationSettings"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permNotificationSettingRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "NotificationSettings"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permNotificationSettingUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSettingRelationUser"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/notifications/{id:[0-9]+}": {
      "get": {
        "tags": [
          "NotificationSettings"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permNotificationSettingRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "NotificationSettings"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permNotificationSettingUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSettingPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "NotificationSettings"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permNotificationSettingDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/preprocessors": {
      "get": {
        "tags": [
          "Preprocessors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PreprocessorResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPreprocessorRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      },
      "post": {
        "tags": [
          "Preprocessors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreprocessorPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPreprocessorCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreprocessorCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "Preprocessors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPreprocessorUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "Preprocessors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPreprocessorDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/preprocessors/count": {
      "get": {
        "tags": [
          "Preprocessors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PreprocessorResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPreprocessorRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      }
    },
    "/api/v2/ui/preprocessors/{id:[0-9]+}": {
      "get": {
        "tags": [
          "Preprocessors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreprocessorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPreprocessorRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "Preprocessors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreprocessorPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPreprocessorUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreprocessorPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Preprocessors"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPreprocessorDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/pretasks": {
      "get": {
        "tags": [
          "Pretasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PretaskResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPretaskRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: pretaskFiles"
          }
        ]
      },
      "post": {
        "tags": [
          "Pretasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PretaskPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPretaskCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PretaskCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "Pretasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPretaskUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "Pretasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPretaskDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/pretasks/count": {
      "get": {
        "tags": [
          "Pretasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PretaskResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPretaskRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: pretaskFiles"
          }
        ]
      }
    },
    "/api/v2/ui/pretasks/{id:[0-9]+}/{relation:pretaskFiles}": {
      "get": {
        "tags": [
          "Pretasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PretaskRelationPretaskFilesGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPretaskRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/pretasks/{id:[0-9]+}/relationships/{relation:pretaskFiles}": {
      "get": {
        "tags": [
          "Pretasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PretaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPretaskRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Pretasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPretaskUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PretaskRelationPretaskFiles"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Pretasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPretaskCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Pretasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPretaskDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PretaskRelationPretaskFiles"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/pretasks/{id:[0-9]+}": {
      "get": {
        "tags": [
          "Pretasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PretaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPretaskRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "Pretasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PretaskPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPretaskUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PretaskPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Pretasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permPretaskDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/speeds": {
      "get": {
        "tags": [
          "Speeds"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpeedResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSpeedRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: agent,task"
          }
        ]
      }
    },
    "/api/v2/ui/speeds/count": {
      "get": {
        "tags": [
          "Speeds"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpeedResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSpeedRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: agent,task"
          }
        ]
      }
    },
    "/api/v2/ui/speeds/{id:[0-9]+}/{relation:agent}": {
      "get": {
        "tags": [
          "Speeds"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpeedRelationAgentGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSpeedRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/speeds/{id:[0-9]+}/relationships/{relation:agent}": {
      "get": {
        "tags": [
          "Speeds"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpeedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSpeedRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Speeds"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSpeedUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpeedRelationAgent"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/speeds/{id:[0-9]+}/{relation:task}": {
      "get": {
        "tags": [
          "Speeds"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpeedRelationTaskGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSpeedRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/speeds/{id:[0-9]+}/relationships/{relation:task}": {
      "get": {
        "tags": [
          "Speeds"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpeedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSpeedRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Speeds"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSpeedUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpeedRelationTask"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/speeds/{id:[0-9]+}": {
      "get": {
        "tags": [
          "Speeds"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpeedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSpeedRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      }
    },
    "/api/v2/ui/supertasks": {
      "get": {
        "tags": [
          "Supertasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupertaskResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSupertaskRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: pretasks"
          }
        ]
      },
      "post": {
        "tags": [
          "Supertasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupertaskPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSupertaskCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupertaskCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "Supertasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSupertaskUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "Supertasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSupertaskDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/supertasks/count": {
      "get": {
        "tags": [
          "Supertasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupertaskResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSupertaskRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: pretasks"
          }
        ]
      }
    },
    "/api/v2/ui/supertasks/{id:[0-9]+}/{relation:pretasks}": {
      "get": {
        "tags": [
          "Supertasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupertaskRelationPretasksGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSupertaskRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/supertasks/{id:[0-9]+}/relationships/{relation:pretasks}": {
      "get": {
        "tags": [
          "Supertasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupertaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSupertaskRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Supertasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSupertaskUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupertaskRelationPretasks"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Supertasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSupertaskCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Supertasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSupertaskDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupertaskRelationPretasks"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/supertasks/{id:[0-9]+}": {
      "get": {
        "tags": [
          "Supertasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupertaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSupertaskRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "Supertasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupertaskPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSupertaskUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupertaskPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Supertasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permSupertaskDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: crackerBinary,crackerBinaryType,hashlist,assignedAgents,files,speeds"
          }
        ]
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/tasks/count": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: crackerBinary,crackerBinaryType,hashlist,assignedAgents,files,speeds"
          }
        ]
      }
    },
    "/api/v2/ui/tasks/{id:[0-9]+}/{relation:crackerBinary}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRelationCrackerBinaryGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/tasks/{id:[0-9]+}/relationships/{relation:crackerBinary}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRelationCrackerBinary"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/tasks/{id:[0-9]+}/{relation:crackerBinaryType}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRelationCrackerBinaryTypeGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/tasks/{id:[0-9]+}/relationships/{relation:crackerBinaryType}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRelationCrackerBinaryType"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/tasks/{id:[0-9]+}/{relation:hashlist}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRelationHashlistGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/tasks/{id:[0-9]+}/relationships/{relation:hashlist}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRelationHashlist"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/tasks/{id:[0-9]+}/{relation:assignedAgents}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRelationAssignedAgentsGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/tasks/{id:[0-9]+}/relationships/{relation:assignedAgents}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRelationAssignedAgents"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRelationAssignedAgents"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/tasks/{id:[0-9]+}/{relation:files}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRelationFilesGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/tasks/{id:[0-9]+}/relationships/{relation:files}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRelationFiles"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRelationFiles"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/tasks/{id:[0-9]+}/{relation:speeds}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRelationSpeedsGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/tasks/{id:[0-9]+}/relationships/{relation:speeds}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRelationSpeeds"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRelationSpeeds"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/tasks/{id:[0-9]+}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/taskwrappers": {
      "get": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskWrapperResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: accessGroup,hashlist,hashType,tasks"
          }
        ]
      },
      "patch": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/taskwrappers/count": {
      "get": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskWrapperResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: accessGroup,hashlist,hashType,tasks"
          }
        ]
      }
    },
    "/api/v2/ui/taskwrappers/{id:[0-9]+}/{relation:accessGroup}": {
      "get": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperRelationAccessGroupGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/taskwrappers/{id:[0-9]+}/relationships/{relation:accessGroup}": {
      "get": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskWrapperRelationAccessGroup"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/taskwrappers/{id:[0-9]+}/{relation:hashlist}": {
      "get": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperRelationHashlistGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/taskwrappers/{id:[0-9]+}/relationships/{relation:hashlist}": {
      "get": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskWrapperRelationHashlist"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/taskwrappers/{id:[0-9]+}/{relation:hashType}": {
      "get": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperRelationHashTypeGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/taskwrappers/{id:[0-9]+}/relationships/{relation:hashType}": {
      "get": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskWrapperRelationHashType"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/taskwrappers/{id:[0-9]+}/{relation:tasks}": {
      "get": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperRelationTasksGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/taskwrappers/{id:[0-9]+}/relationships/{relation:tasks}": {
      "get": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskWrapperRelationTasks"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskWrapperRelationTasks"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/taskwrappers/{id:[0-9]+}": {
      "get": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskWrapperPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "TaskWrappers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permTaskWrapperDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: globalPermissionGroup,accessGroups"
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/users/count": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: globalPermissionGroup,accessGroups"
          }
        ]
      }
    },
    "/api/v2/ui/users/{id:[0-9]+}/{relation:globalPermissionGroup}": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRelationGlobalPermissionGroupGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/users/{id:[0-9]+}/relationships/{relation:globalPermissionGroup}": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRelationGlobalPermissionGroup"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/users/{id:[0-9]+}/{relation:accessGroups}": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRelationAccessGroupsGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      }
    },
    "/api/v2/ui/users/{id:[0-9]+}/relationships/{relation:accessGroups}": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserRead"
              ]
            ]
          }
        ],
        "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Succesfull operation"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserUpdate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRelationAccessGroups"
              }
            }
          }
        },
        "parameters": []
      },
      "post": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully created"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserCreate"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRelationAccessGroups"
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/users/{id:[0-9]+}": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permUserDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/ui/vouchers": {
      "get": {
        "tags": [
          "RegVouchers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegVoucherResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRegVoucherRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      },
      "post": {
        "tags": [
          "RegVouchers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegVoucherPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRegVoucherCreate"
              ]
            ]
          }
        ],
        "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegVoucherCreate"
              }
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "RegVouchers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRegVoucherUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "parameters": []
      },
      "delete": {
        "tags": [
          "RegVouchers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRegVoucherDelete"
              ]
            ]
          }
        ],
        "description": "",
        "parameters": []
      }
    },
    "/api/v2/ui/vouchers/count": {
      "get": {
        "tags": [
          "RegVouchers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegVoucherResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRegVoucherRead"
              ]
            ]
          }
        ],
        "description": "GET many request to retrieve multiple objects.",
        "parameters": [
          {
            "name": "page[after]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data after the value provided"
          },
          {
            "name": "page[before]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0,
            "description": "Pointer to paginate to retrieve the data before the value provided"
          },
          {
            "name": "page[size]",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 100,
            "description": "Amout of data to retrieve inside a single page"
          },
          {
            "name": "filter",
            "in": "path",
            "style": "deepobject",
            "explode": true,
            "schema": {
              "type": "object"
            },
            "description": "Filters results using a query",
            "example": "\"filter[hashlistId__gt]\": 200"
          },
          {
            "name": "include",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "Items to include, comma seperated. Possible options: "
          }
        ]
      }
    },
    "/api/v2/ui/vouchers/{id:[0-9]+}": {
      "get": {
        "tags": [
          "RegVouchers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegVoucherResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRegVoucherRead"
              ]
            ]
          }
        ],
        "description": "GET request to retrieve a single object.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          {
            "name": "include",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Items to include. Comma seperated"
          }
        ]
      },
      "patch": {
        "tags": [
          "RegVouchers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegVoucherPostPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRegVoucherUpdate"
              ]
            ]
          }
        ],
        "description": "PATCH request to update attributes of a single object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegVoucherPatch"
              }
            }
          }
        },
        "parameters": []
      },
      "delete": {
        "tags": [
          "RegVouchers"
        ],
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "204": {
            "description": "successfully deleted"
          }
        },
        "security": [
          {
            "bearerAuth": [
              [
                "permRegVoucherDelete"
              ]
            ]
          }
        ],
        "description": "",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": []
          }
        },
        "parameters": []
      }
    },
    "/api/v2/helper/abortChunk": {
      "post": {
        "description": "Endpoint to stop a running chunk.<br />   ",
        "requestBody": {
          "description": "ChunkID is the ID of the chunk that needs to be aborted.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbortChunkHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbortChunkHelperAPIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/assignAgent": {
      "post": {
        "description": "This endpoint is responsible for assigning a task to a specific agent.<br />   ",
        "requestBody": {
          "description": "The agentId is the Id of the agent that has to be assigned to the task.<br />The taskId is the Id of the task that will be assigned to the agent. If this is set to 0,<br />the agent will be unassigned from its current assigned task.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignAgentHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignAgentHelperAPIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/changeOwnPassword": {
      "post": {
        "description": "Endpoint to set a password of an user.<br />   ",
        "requestBody": {
          "description": "oldPassword is the current password of the user.<br />newPassword is the new password that you want to set.<br />confirmPassword is the new password again to confirm it.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOwnPasswordHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeOwnPasswordHelperAPIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/createSupertask": {
      "post": {
        "description": "Endpoint to create a supertask from a supertask template<br />   ",
        "requestBody": {
          "description": "supertaskTemplateId is the the Id of the supertakstemplate of which you want to create a supertask of.<br />hashlistId is the Id of the hashlist that has to be used for the supertask.<br />crackerVersionId is the Id of the crackerversion that is used for the created supertask.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSupertaskHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperSingleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/createSuperHashlist": {
      "post": {
        "description": "Endpoint to create a super hashlist from multiple hashlists<br />   ",
        "requestBody": {
          "description": "Hashlistids is an array of hashlist ids of the hashlists that have to be combined into a superhashlist.<br />Name is the name of the newly created superhashlist.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSuperHashlistHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashlistSingleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/exportCrackedHashes": {
      "post": {
        "description": "Endpoint to export cracked hashes.<br />   ",
        "requestBody": {
          "description": "hashlistId is the Id of the hashlist where you want to export the hashes of.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportCrackedHashesHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSingleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/exportLeftHashes": {
      "post": {
        "description": "Endpoint to export uncracked hashes of a hashlist.<br />   ",
        "requestBody": {
          "description": "hashlistId is the id of the hashlist where you want to export the uncracked hashes of.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportLeftHashesHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSingleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/exportWordlist": {
      "post": {
        "description": "Endpoint to export a wordlist of the cracked hashes inside a hashlist.<br />   ",
        "requestBody": {
          "description": "hashlistId is the Id of the hashlist where you want to export the wordlist of.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportWordlistHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSingleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/getAccessGroups": {
      "get": {
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v2/helper/getFile": {
      "get": {
        "description": "Endpoint to download files<br />   ",
        "parameters": [
          {
            "in": "query",
            "name": "file",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": true,
            "example": 1,
            "description": "The ID of the file to download."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v2/helper/getUserPermission": {
      "get": {
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v2/helper/importCrackedHashes": {
      "post": {
        "description": "Endpoint to import cracked hashes into a hashlist.<br />   ",
        "requestBody": {
          "description": "HashlistId is the Id of the hashlist where you want to import the cracked hashes into.<br />SourceData is the cracked hashes you want to import.<br />Seperator is the seperator that has been used for the salt in the hashes.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportCrackedHashesHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportCrackedHashesHelperAPIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/importFile": {
      "post": {
        "description": "  File import API<br />   Based on TUS protocol: https://tus.io/protocols/resumable-upload.html<br /><br /> 1) Client 'Announce' file at ./api/v2/helper/importFile'<br />     - Ensure Upload-Metadata: filename= base64-encoded-filename is set<br /> 2) Server checks filename does not exists yet:<br />    - Checked not part of ongoing transfer (<uuid>.part / <uuid>.metatadata in import directory)<br />    - Checked not uploaded yet (import/<filename>)<br />    If all conditions are met, upload is created and user informed about UUID to push to.<br /> 3) Client pushes parts to ./api/v2/ui/files/<uuid><br />    - Checked if upload timeout is not expired<br /> 4) Server check if upload is completed<br />    - Checked if not present yet (import/<filename>)<br />    - Marks file and stores as import/<filename><br />  ",
        "requestBody": {
          "description": "Import file has no POST parameters<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportFileHelperAPI"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Upload-Metadata",
            "in": "header",
            "required": "true",
            "schema": {
              "type": "string",
              "pattern": "^([a-zA-Z0-9]+ [A-Za-z0-9+/=]+)(,[a-zA-Z0-9]+ [A-Za-z0-9+/=]+)*$"
            },
            "example": "filename ZXhhbXBsZS50eHQ=",
            "description": " The Upload-Metadata header contains one or more comma-separated key-value pairs.\n            Each pair is formatted as `<key> <base64(value)>`, where:\n              - `key` is a string without spaces.\n              - `value` is base64-encoded"
          },
          {
            "name": "Upload-Length",
            "in": "header",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "example": 10000,
            "description": "The total size of the upload in bytes. Must be a positive integer.\n          Required if `Upload-Defer-Length` is not set."
          },
          {
            "name": "Upload-Defer-Length",
            "in": "header",
            "schema": {
              "type": "integer"
            },
            "example": 1,
            "description": "Indicates that the upload length is not known at creation time.\n          Value must be `1`. If present, `Upload-Length` must be omitted."
          }
        ],
        "responses": {
          "201": {
            "description": "succesful operation",
            "headers": {
              "Tus-Resumable": {
                "description": "Indicates the TUS version the server supports.\n        Must always be set to `1.0.0` in compliant servers.",
                "schema": {
                  "type": "string",
                  "enum": "enum: ['1.0.0']"
                }
              },
              "Location": {
                "description": "Location of the file where the user can push to.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/pdf": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/importFile/{id:[0-9]{14}-[0-9a-f]{32}}": {
      "head": {
        "description": "A HEAD request is used in the TUS protocol to determine the offset at which the upload should be continued.<br />And to retrieve the upload status.<br />   ",
        "responses": {
          "200": {
            "description": "sucessful request",
            "headers": {
              "Tus-Resumable": {
                "description": "Indicates the TUS version the server supports.\n        Must always be set to `1.0.0` in compliant servers.",
                "schema": {
                  "type": "string",
                  "enum": "enum: ['1.0.0']"
                }
              },
              "Upload-Offset": {
                "description": "Number of bytes already received",
                "schema": {
                  "type": "integer"
                }
              },
              "Upload-Length": {
                "description": "Total upload length (if known)",
                "schema": {
                  "type": "integer"
                }
              },
              "Upload-Defer-Length": {
                "description": "Indicates deferred upload length (if applicable)",
                "schema": {
                  "type": "string"
                }
              },
              "Upload-Metadata": {
                "description": "Original metadata sent during creation",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Given the offset in the 'Upload Offset' header, the user can use this PATCH endpoint in order to resume the upload.<br />   ",
        "parameters": [
          {
            "name": "Upload-Offset",
            "in": "header",
            "required": "true",
            "schema": {
              "type": "integer"
            },
            "example": "512",
            "description": " The Upload-Offset header\u2019s value MUST be equal to the current offset of the resource"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": "true",
            "schema": {
              "type": "string",
              "enum": [
                "application/offset+octet-stream"
              ]
            }
          }
        ],
        "requestBody": [
          {
            "required": "true",
            "description": "The binary data to push to the file",
            "content": {
              "application/offset+octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Chunk accepted",
            "headers": {
              "Tus-Resumable": {
                "description": "Indicates the TUS version the server supports.\n        Must always be set to `1.0.0` in compliant servers.",
                "schema": {
                  "type": "string",
                  "enum": "enum: ['1.0.0']"
                }
              },
              "Upload-Offset": {
                "description": "The new offset after the chunk is accepted. Indicates how many bytes were received so far.",
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Endpoint to delete the file<br />   "
      }
    },
    "/api/v2/helper/purgeTask": {
      "post": {
        "description": "Endpoint to purge a task. Meaning all chunks of a task will be deleted and keyspace and progress will be set to 0.<br />   ",
        "requestBody": {
          "description": "taskId is the id of the task that should be purged.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurgeTaskHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeTaskHelperAPIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/recountFileLines": {
      "post": {
        "description": "Endpoint to recount files for when there is size mismatch<br />   ",
        "requestBody": {
          "description": "FileId is the id of the file that needs to be recounted.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecountFileLinesHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSingleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/resetChunk": {
      "post": {
        "description": "Endpoint to reset a chunk.<br />   ",
        "requestBody": {
          "description": "chunkId is the id of the chunk which you want to reset.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetChunkHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetChunkHelperAPIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/resetUserPassword": {
      "post": {
        "description": "",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetUserPasswordHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetUserPasswordHelperAPIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/setUserPassword": {
      "post": {
        "description": "Endpoint to set a password of an user.<br />   ",
        "requestBody": {
          "description": "userId is the id of the user of which you want to change the password.<br />password is the new password that you want to set.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserPasswordHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetUserPasswordHelperAPIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/helper/unassignAgent": {
      "post": {
        "description": "Endpoint to unassign an agent.<br />   ",
        "requestBody": {
          "description": "agentId is the id of the agent which you want to unassign.<br />   ",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnassignAgentHelperAPI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnassignAgentHelperAPIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/auth/token": {
      "post": {
        "tags": [
          "Login"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ListResponse": {
        "type": "object",
        "properties": {
          "expand": {
            "type": "string",
            "example": "hashlist"
          },
          "page[after]": {
            "type": "integer",
            "example": 0
          },
          "page[before]": {
            "type": "integer",
            "example": 0
          },
          "page[size]": {
            "type": "integer",
            "example": 100
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "about=>blank"
          },
          "type": {
            "type": "string",
            "example": "Error details here"
          },
          "status": {
            "type": "integer",
            "example": 400
          }
        }
      },
      "NotFoundResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "404 Not Found"
          },
          "exception": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "Slim\\Exception\\HttpNotFoundException"
              },
              "code": {
                "type": "integer",
                "example": 404
              },
              "message": {
                "type": "string",
                "example": "Not Found"
              },
              "file": {
                "type": "string",
                "example": "../hashtopolis/server/vendor/slim/slim/Slim/Middleware/RoutingMiddleware.php"
              },
              "line": {
                "type": "integer",
                "example": 91
              }
            }
          }
        }
      },
      "AccessGroupCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AccessGroup"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "groupName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "AccessGroupPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AccessGroup"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "groupName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "AccessGroupResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/accessgroups?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/accessgroups?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/accessgroups?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/accessgroups?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/accessgroups?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "AccessGroup"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "groupName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "agentMembers": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/accessgroups/relationships/agentMembers"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/accessgroups/agentMembers"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "userMembers": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/accessgroups/relationships/userMembers"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/accessgroups/userMembers"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "userMembers"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "passwordHash": {
                          "type": "string"
                        },
                        "passwordSalt": {
                          "type": "string"
                        },
                        "isValid": {
                          "type": "boolean"
                        },
                        "isComputedPassword": {
                          "type": "boolean"
                        },
                        "lastLoginDate": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "registeredSince": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "sessionLifetime": {
                          "type": "integer"
                        },
                        "globalPermissionGroupId": {
                          "type": "integer"
                        },
                        "yubikey": {
                          "type": "string"
                        },
                        "otp1": {
                          "type": "string"
                        },
                        "otp2": {
                          "type": "string"
                        },
                        "otp3": {
                          "type": "string"
                        },
                        "otp4": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agentMembers"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentId": {
                          "type": "integer"
                        },
                        "agentName": {
                          "type": "string"
                        },
                        "uid": {
                          "type": "string"
                        },
                        "os": {
                          "type": "integer"
                        },
                        "devices": {
                          "type": "string"
                        },
                        "cmdPars": {
                          "type": "string"
                        },
                        "ignoreErrors": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2
                          ]
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isTrusted": {
                          "type": "boolean"
                        },
                        "token": {
                          "type": "string"
                        },
                        "lastAct": {
                          "type": "string"
                        },
                        "lastTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lastIp": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "integer"
                        },
                        "cpuOnly": {
                          "type": "boolean"
                        },
                        "clientSignature": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "AccessGroupRelation": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": null
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "AccessGroupRelationGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": null
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "AccessGroupSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "AccessGroup"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "groupName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "agentMembers": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/accessgroups/relationships/agentMembers"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/accessgroups/agentMembers"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "userMembers": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/accessgroups/relationships/userMembers"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/accessgroups/userMembers"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "userMembers"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "passwordHash": {
                          "type": "string"
                        },
                        "passwordSalt": {
                          "type": "string"
                        },
                        "isValid": {
                          "type": "boolean"
                        },
                        "isComputedPassword": {
                          "type": "boolean"
                        },
                        "lastLoginDate": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "registeredSince": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "sessionLifetime": {
                          "type": "integer"
                        },
                        "globalPermissionGroupId": {
                          "type": "integer"
                        },
                        "yubikey": {
                          "type": "string"
                        },
                        "otp1": {
                          "type": "string"
                        },
                        "otp2": {
                          "type": "string"
                        },
                        "otp3": {
                          "type": "string"
                        },
                        "otp4": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agentMembers"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentId": {
                          "type": "integer"
                        },
                        "agentName": {
                          "type": "string"
                        },
                        "uid": {
                          "type": "string"
                        },
                        "os": {
                          "type": "integer"
                        },
                        "devices": {
                          "type": "string"
                        },
                        "cmdPars": {
                          "type": "string"
                        },
                        "ignoreErrors": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2
                          ]
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isTrusted": {
                          "type": "boolean"
                        },
                        "token": {
                          "type": "string"
                        },
                        "lastAct": {
                          "type": "string"
                        },
                        "lastTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lastIp": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "integer"
                        },
                        "cpuOnly": {
                          "type": "boolean"
                        },
                        "clientSignature": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "AccessGroupPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "AccessGroup"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "groupName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AccessGroupListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessGroupResponse"
                }
              }
            }
          }
        ]
      },
      "AccessGroupRelationUserMembers": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "userMembers"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AccessGroupRelationUserMembersGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "userMembers"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AccessGroupRelationAgentMembers": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "agentMembers"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AccessGroupRelationAgentMembersGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "agentMembers"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AssignmentCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Assignment"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "taskId": {
                    "type": "integer"
                  },
                  "agentId": {
                    "type": "integer"
                  },
                  "benchmark": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "AssignmentPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Assignment"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "agentId": {
                    "type": "integer"
                  },
                  "benchmark": {
                    "type": "string"
                  },
                  "taskId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "AssignmentResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/agentassignments?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/agentassignments?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/agentassignments?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/agentassignments?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/agentassignments?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Assignment"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "taskId": {
                      "type": "integer"
                    },
                    "agentId": {
                      "type": "integer"
                    },
                    "benchmark": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "agent": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agentassignments/relationships/agent"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agentassignments/agent"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "task": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agentassignments/relationships/task"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agentassignments/task"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agent"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentId": {
                          "type": "integer"
                        },
                        "agentName": {
                          "type": "string"
                        },
                        "uid": {
                          "type": "string"
                        },
                        "os": {
                          "type": "integer"
                        },
                        "devices": {
                          "type": "string"
                        },
                        "cmdPars": {
                          "type": "string"
                        },
                        "ignoreErrors": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2
                          ]
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isTrusted": {
                          "type": "boolean"
                        },
                        "token": {
                          "type": "string"
                        },
                        "lastAct": {
                          "type": "string"
                        },
                        "lastTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lastIp": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "integer"
                        },
                        "cpuOnly": {
                          "type": "boolean"
                        },
                        "clientSignature": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "task"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "AssignmentRelationAgentMembers": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "agentMembers"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AssignmentRelationAgentMembersGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "agentMembers"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AssignmentSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Assignment"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "taskId": {
                      "type": "integer"
                    },
                    "agentId": {
                      "type": "integer"
                    },
                    "benchmark": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "agent": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agentassignments/relationships/agent"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agentassignments/agent"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "task": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agentassignments/relationships/task"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agentassignments/task"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agent"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentId": {
                          "type": "integer"
                        },
                        "agentName": {
                          "type": "string"
                        },
                        "uid": {
                          "type": "string"
                        },
                        "os": {
                          "type": "integer"
                        },
                        "devices": {
                          "type": "string"
                        },
                        "cmdPars": {
                          "type": "string"
                        },
                        "ignoreErrors": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2
                          ]
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isTrusted": {
                          "type": "boolean"
                        },
                        "token": {
                          "type": "string"
                        },
                        "lastAct": {
                          "type": "string"
                        },
                        "lastTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lastIp": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "integer"
                        },
                        "cpuOnly": {
                          "type": "boolean"
                        },
                        "clientSignature": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "task"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "AssignmentPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Assignment"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "taskId": {
                      "type": "integer"
                    },
                    "agentId": {
                      "type": "integer"
                    },
                    "benchmark": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AssignmentListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssignmentResponse"
                }
              }
            }
          }
        ]
      },
      "AssignmentRelationAgent": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "agent"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "AssignmentRelationAgentGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "agent"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "AssignmentRelationTask": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "AssignmentRelationTaskGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "AgentBinaryCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AgentBinary"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  },
                  "operatingSystems": {
                    "type": "string"
                  },
                  "filename": {
                    "type": "string"
                  },
                  "updateTrack": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "AgentBinaryPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AgentBinary"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string"
                  },
                  "operatingSystems": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "updateTrack": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "AgentBinaryResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/agentbinaries?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/agentbinaries?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/agentbinaries?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/agentbinaries?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/agentbinaries?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "AgentBinary"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    },
                    "operatingSystems": {
                      "type": "string"
                    },
                    "filename": {
                      "type": "string"
                    },
                    "updateTrack": {
                      "type": "string"
                    },
                    "updateAvailable": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "AgentBinaryRelationTask": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "AgentBinaryRelationTaskGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "AgentBinarySingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "AgentBinary"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    },
                    "operatingSystems": {
                      "type": "string"
                    },
                    "filename": {
                      "type": "string"
                    },
                    "updateTrack": {
                      "type": "string"
                    },
                    "updateAvailable": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "AgentBinaryPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "AgentBinary"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    },
                    "operatingSystems": {
                      "type": "string"
                    },
                    "filename": {
                      "type": "string"
                    },
                    "updateTrack": {
                      "type": "string"
                    },
                    "updateAvailable": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AgentBinaryListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgentBinaryResponse"
                }
              }
            }
          }
        ]
      },
      "AgentErrorCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AgentError"
              },
              "attributes": {
                "type": "object",
                "properties": []
              }
            }
          }
        }
      },
      "AgentErrorPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AgentError"
              },
              "attributes": {
                "type": "object",
                "properties": []
              }
            }
          }
        }
      },
      "AgentErrorResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/agenterrors?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/agenterrors?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/agenterrors?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/agenterrors?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/agenterrors?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "AgentError"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "agentId": {
                      "type": "integer"
                    },
                    "taskId": {
                      "type": "integer"
                    },
                    "chunkId": {
                      "type": "integer"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "task": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agenterrors/relationships/task"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agenterrors/task"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "task"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "AgentErrorRelationTask": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "AgentErrorRelationTaskGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "AgentErrorSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "AgentError"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "agentId": {
                      "type": "integer"
                    },
                    "taskId": {
                      "type": "integer"
                    },
                    "chunkId": {
                      "type": "integer"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "task": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agenterrors/relationships/task"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agenterrors/task"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "task"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "AgentErrorPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "AgentError"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "agentId": {
                      "type": "integer"
                    },
                    "taskId": {
                      "type": "integer"
                    },
                    "chunkId": {
                      "type": "integer"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AgentErrorListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgentErrorResponse"
                }
              }
            }
          }
        ]
      },
      "AgentCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Agent"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "agentName": {
                    "type": "string"
                  },
                  "uid": {
                    "type": "string"
                  },
                  "os": {
                    "type": "integer"
                  },
                  "devices": {
                    "type": "string"
                  },
                  "cmdPars": {
                    "type": "string"
                  },
                  "ignoreErrors": {
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2
                    ]
                  },
                  "isActive": {
                    "type": "boolean"
                  },
                  "isTrusted": {
                    "type": "boolean"
                  },
                  "token": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "integer"
                  },
                  "cpuOnly": {
                    "type": "boolean"
                  },
                  "clientSignature": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "AgentPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Agent"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "agentName": {
                    "type": "string"
                  },
                  "clientSignature": {
                    "type": "string"
                  },
                  "cmdPars": {
                    "type": "string"
                  },
                  "cpuOnly": {
                    "type": "boolean"
                  },
                  "devices": {
                    "type": "string"
                  },
                  "ignoreErrors": {
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2
                    ]
                  },
                  "isActive": {
                    "type": "boolean"
                  },
                  "isTrusted": {
                    "type": "boolean"
                  },
                  "os": {
                    "type": "integer"
                  },
                  "token": {
                    "type": "string"
                  },
                  "uid": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "AgentResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/agents?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/agents?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/agents?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/agents?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/agents?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Agent"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "agentName": {
                      "type": "string"
                    },
                    "uid": {
                      "type": "string"
                    },
                    "os": {
                      "type": "integer"
                    },
                    "devices": {
                      "type": "string"
                    },
                    "cmdPars": {
                      "type": "string"
                    },
                    "ignoreErrors": {
                      "type": "integer",
                      "enum": [
                        0,
                        1,
                        2
                      ]
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "isTrusted": {
                      "type": "boolean"
                    },
                    "token": {
                      "type": "string"
                    },
                    "lastAct": {
                      "type": "string"
                    },
                    "lastTime": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "lastIp": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "integer"
                    },
                    "cpuOnly": {
                      "type": "boolean"
                    },
                    "clientSignature": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "accessGroups": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/relationships/accessGroups"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/accessGroups"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "agentErrors": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/relationships/agentErrors"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/agentErrors"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "agentStats": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/relationships/agentStats"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/agentStats"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "assignments": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/relationships/assignments"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/assignments"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "chunks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/relationships/chunks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/chunks"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "tasks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/relationships/tasks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/tasks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "accessGroups"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "groupName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agentStats"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentStatId": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "statType": {
                          "type": "integer"
                        },
                        "time": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "value": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agentErrors"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentErrorId": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "chunkId": {
                          "type": "integer"
                        },
                        "time": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "error": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "chunks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "chunkId": {
                          "type": "integer"
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "skip": {
                          "type": "integer"
                        },
                        "length": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "dispatchTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "solveTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "checkpoint": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "progress": {
                          "type": "integer"
                        },
                        "state": {
                          "type": "integer"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "speed": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "tasks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "assignments"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "assignmentId": {
                          "type": "integer"
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "benchmark": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "AgentRelationTask": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "AgentRelationTaskGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "AgentSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Agent"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "agentName": {
                      "type": "string"
                    },
                    "uid": {
                      "type": "string"
                    },
                    "os": {
                      "type": "integer"
                    },
                    "devices": {
                      "type": "string"
                    },
                    "cmdPars": {
                      "type": "string"
                    },
                    "ignoreErrors": {
                      "type": "integer",
                      "enum": [
                        0,
                        1,
                        2
                      ]
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "isTrusted": {
                      "type": "boolean"
                    },
                    "token": {
                      "type": "string"
                    },
                    "lastAct": {
                      "type": "string"
                    },
                    "lastTime": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "lastIp": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "integer"
                    },
                    "cpuOnly": {
                      "type": "boolean"
                    },
                    "clientSignature": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "accessGroups": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/relationships/accessGroups"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/accessGroups"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "agentErrors": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/relationships/agentErrors"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/agentErrors"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "agentStats": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/relationships/agentStats"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/agentStats"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "assignments": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/relationships/assignments"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/assignments"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "chunks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/relationships/chunks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/chunks"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "tasks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/relationships/tasks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/agents/tasks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "accessGroups"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "groupName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agentStats"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentStatId": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "statType": {
                          "type": "integer"
                        },
                        "time": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "value": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agentErrors"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentErrorId": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "chunkId": {
                          "type": "integer"
                        },
                        "time": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "error": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "chunks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "chunkId": {
                          "type": "integer"
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "skip": {
                          "type": "integer"
                        },
                        "length": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "dispatchTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "solveTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "checkpoint": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "progress": {
                          "type": "integer"
                        },
                        "state": {
                          "type": "integer"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "speed": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "tasks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "assignments"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "assignmentId": {
                          "type": "integer"
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "benchmark": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "AgentPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Agent"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "agentName": {
                      "type": "string"
                    },
                    "uid": {
                      "type": "string"
                    },
                    "os": {
                      "type": "integer"
                    },
                    "devices": {
                      "type": "string"
                    },
                    "cmdPars": {
                      "type": "string"
                    },
                    "ignoreErrors": {
                      "type": "integer",
                      "enum": [
                        0,
                        1,
                        2
                      ]
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "isTrusted": {
                      "type": "boolean"
                    },
                    "token": {
                      "type": "string"
                    },
                    "lastAct": {
                      "type": "string"
                    },
                    "lastTime": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "lastIp": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "integer"
                    },
                    "cpuOnly": {
                      "type": "boolean"
                    },
                    "clientSignature": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AgentListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          }
        ]
      },
      "AgentRelationAccessGroups": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "accessGroups"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentRelationAccessGroupsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "accessGroups"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentRelationAgentStats": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "agentStats"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentRelationAgentStatsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "agentStats"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentRelationAgentErrors": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "agentErrors"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentRelationAgentErrorsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "agentErrors"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentRelationChunks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "chunks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentRelationChunksGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "chunks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentRelationTasks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentRelationTasksGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentRelationAssignments": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "assignments"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentRelationAssignmentsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "assignments"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentStatCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AgentStat"
              },
              "attributes": {
                "type": "object",
                "properties": []
              }
            }
          }
        }
      },
      "AgentStatPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "AgentStat"
              },
              "attributes": {
                "type": "object",
                "properties": []
              }
            }
          }
        }
      },
      "AgentStatResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/agentstats?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/agentstats?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/agentstats?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/agentstats?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/agentstats?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "AgentStat"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "agentId": {
                      "type": "integer"
                    },
                    "statType": {
                      "type": "integer"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "value": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "AgentStatRelationAssignments": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "assignments"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentStatRelationAssignmentsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "assignments"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "AgentStatSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "AgentStat"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "agentId": {
                      "type": "integer"
                    },
                    "statType": {
                      "type": "integer"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "value": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "AgentStatPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "AgentStat"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "agentId": {
                      "type": "integer"
                    },
                    "statType": {
                      "type": "integer"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "value": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AgentStatListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AgentStatResponse"
                }
              }
            }
          }
        ]
      },
      "ChunkCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Chunk"
              },
              "attributes": {
                "type": "object",
                "properties": []
              }
            }
          }
        }
      },
      "ChunkPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Chunk"
              },
              "attributes": {
                "type": "object",
                "properties": []
              }
            }
          }
        }
      },
      "ChunkResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/chunks?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/chunks?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/chunks?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/chunks?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/chunks?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Chunk"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "taskId": {
                      "type": "integer"
                    },
                    "skip": {
                      "type": "integer"
                    },
                    "length": {
                      "type": "integer"
                    },
                    "agentId": {
                      "type": "integer"
                    },
                    "dispatchTime": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "solveTime": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "checkpoint": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "progress": {
                      "type": "integer"
                    },
                    "state": {
                      "type": "integer"
                    },
                    "cracked": {
                      "type": "integer"
                    },
                    "speed": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "agent": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/chunks/relationships/agent"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/chunks/agent"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "task": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/chunks/relationships/task"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/chunks/task"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agent"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentId": {
                          "type": "integer"
                        },
                        "agentName": {
                          "type": "string"
                        },
                        "uid": {
                          "type": "string"
                        },
                        "os": {
                          "type": "integer"
                        },
                        "devices": {
                          "type": "string"
                        },
                        "cmdPars": {
                          "type": "string"
                        },
                        "ignoreErrors": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2
                          ]
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isTrusted": {
                          "type": "boolean"
                        },
                        "token": {
                          "type": "string"
                        },
                        "lastAct": {
                          "type": "string"
                        },
                        "lastTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lastIp": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "integer"
                        },
                        "cpuOnly": {
                          "type": "boolean"
                        },
                        "clientSignature": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "task"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "ChunkRelationAssignments": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "assignments"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "ChunkRelationAssignmentsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "assignments"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "ChunkSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Chunk"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "taskId": {
                      "type": "integer"
                    },
                    "skip": {
                      "type": "integer"
                    },
                    "length": {
                      "type": "integer"
                    },
                    "agentId": {
                      "type": "integer"
                    },
                    "dispatchTime": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "solveTime": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "checkpoint": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "progress": {
                      "type": "integer"
                    },
                    "state": {
                      "type": "integer"
                    },
                    "cracked": {
                      "type": "integer"
                    },
                    "speed": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "agent": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/chunks/relationships/agent"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/chunks/agent"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "task": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/chunks/relationships/task"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/chunks/task"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agent"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentId": {
                          "type": "integer"
                        },
                        "agentName": {
                          "type": "string"
                        },
                        "uid": {
                          "type": "string"
                        },
                        "os": {
                          "type": "integer"
                        },
                        "devices": {
                          "type": "string"
                        },
                        "cmdPars": {
                          "type": "string"
                        },
                        "ignoreErrors": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2
                          ]
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isTrusted": {
                          "type": "boolean"
                        },
                        "token": {
                          "type": "string"
                        },
                        "lastAct": {
                          "type": "string"
                        },
                        "lastTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lastIp": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "integer"
                        },
                        "cpuOnly": {
                          "type": "boolean"
                        },
                        "clientSignature": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "task"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "ChunkPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Chunk"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "taskId": {
                      "type": "integer"
                    },
                    "skip": {
                      "type": "integer"
                    },
                    "length": {
                      "type": "integer"
                    },
                    "agentId": {
                      "type": "integer"
                    },
                    "dispatchTime": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "solveTime": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "checkpoint": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "progress": {
                      "type": "integer"
                    },
                    "state": {
                      "type": "integer"
                    },
                    "cracked": {
                      "type": "integer"
                    },
                    "speed": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ChunkListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChunkResponse"
                }
              }
            }
          }
        ]
      },
      "ChunkRelationAgent": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "agent"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "ChunkRelationAgentGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "agent"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "ChunkRelationTask": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "ChunkRelationTaskGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "ConfigCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Config"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "configSectionId": {
                    "type": "integer"
                  },
                  "item": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "ConfigPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Config"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "configSectionId": {
                    "type": "integer"
                  },
                  "item": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "ConfigResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/configs?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/configs?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/configs?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/configs?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/configs?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Config"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "configSectionId": {
                      "type": "integer"
                    },
                    "item": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "configSection": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/configs/relationships/configSection"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/configs/configSection"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "configSection"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "configSectionId": {
                          "type": "integer"
                        },
                        "sectionName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "ConfigRelationTask": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "ConfigRelationTaskGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "ConfigSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Config"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "configSectionId": {
                      "type": "integer"
                    },
                    "item": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "configSection": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/configs/relationships/configSection"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/configs/configSection"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "configSection"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "configSectionId": {
                          "type": "integer"
                        },
                        "sectionName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "ConfigPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Config"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "configSectionId": {
                      "type": "integer"
                    },
                    "item": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ConfigListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConfigResponse"
                }
              }
            }
          }
        ]
      },
      "ConfigRelationConfigSection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "configSection"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "ConfigRelationConfigSectionGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "configSection"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "ConfigSectionCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "ConfigSection"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "sectionName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "ConfigSectionPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "ConfigSection"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "sectionName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "ConfigSectionResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/configsections?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/configsections?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/configsections?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/configsections?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/configsections?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "ConfigSection"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "sectionName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "ConfigSectionRelationConfigSection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "configSection"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "ConfigSectionRelationConfigSectionGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "configSection"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "ConfigSectionSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "ConfigSection"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "sectionName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "ConfigSectionPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "ConfigSection"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "sectionName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ConfigSectionListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConfigSectionResponse"
                }
              }
            }
          }
        ]
      },
      "CrackerBinaryCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "CrackerBinary"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "crackerBinaryTypeId": {
                    "type": "integer"
                  },
                  "version": {
                    "type": "string"
                  },
                  "downloadUrl": {
                    "type": "string"
                  },
                  "binaryName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "CrackerBinaryPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "CrackerBinary"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "binaryName": {
                    "type": "string"
                  },
                  "crackerBinaryTypeId": {
                    "type": "integer"
                  },
                  "downloadUrl": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "CrackerBinaryResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/crackers?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/crackers?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/crackers?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/crackers?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/crackers?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "CrackerBinary"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "crackerBinaryTypeId": {
                      "type": "integer"
                    },
                    "version": {
                      "type": "string"
                    },
                    "downloadUrl": {
                      "type": "string"
                    },
                    "binaryName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "crackerBinaryType": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/crackers/relationships/crackerBinaryType"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/crackers/crackerBinaryType"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "tasks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/crackers/relationships/tasks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/crackers/tasks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "crackerBinaryType"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "typeName": {
                          "type": "string"
                        },
                        "isChunkingAvailable": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "tasks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CrackerBinaryRelationConfigSection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "configSection"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "CrackerBinaryRelationConfigSectionGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "configSection"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "CrackerBinarySingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "CrackerBinary"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "crackerBinaryTypeId": {
                      "type": "integer"
                    },
                    "version": {
                      "type": "string"
                    },
                    "downloadUrl": {
                      "type": "string"
                    },
                    "binaryName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "crackerBinaryType": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/crackers/relationships/crackerBinaryType"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/crackers/crackerBinaryType"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "tasks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/crackers/relationships/tasks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/crackers/tasks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "crackerBinaryType"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "typeName": {
                          "type": "string"
                        },
                        "isChunkingAvailable": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "tasks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CrackerBinaryPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "CrackerBinary"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "crackerBinaryTypeId": {
                      "type": "integer"
                    },
                    "version": {
                      "type": "string"
                    },
                    "downloadUrl": {
                      "type": "string"
                    },
                    "binaryName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CrackerBinaryListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CrackerBinaryResponse"
                }
              }
            }
          }
        ]
      },
      "CrackerBinaryRelationCrackerBinaryType": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "crackerBinaryType"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "CrackerBinaryRelationCrackerBinaryTypeGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "crackerBinaryType"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "CrackerBinaryRelationTasks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "CrackerBinaryRelationTasksGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "CrackerBinaryTypeCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "CrackerBinaryType"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "typeName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "CrackerBinaryTypePatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "CrackerBinaryType"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "isChunkingAvailable": {
                    "type": "boolean"
                  },
                  "typeName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "CrackerBinaryTypeResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/crackertypes?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/crackertypes?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/crackertypes?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/crackertypes?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/crackertypes?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "CrackerBinaryType"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string"
                    },
                    "isChunkingAvailable": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "crackerVersions": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/crackertypes/relationships/crackerVersions"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/crackertypes/crackerVersions"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "tasks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/crackertypes/relationships/tasks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/crackertypes/tasks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "crackerVersions"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "version": {
                          "type": "string"
                        },
                        "downloadUrl": {
                          "type": "string"
                        },
                        "binaryName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "tasks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CrackerBinaryTypeRelationTasks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "CrackerBinaryTypeRelationTasksGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "CrackerBinaryTypeSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "CrackerBinaryType"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string"
                    },
                    "isChunkingAvailable": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "crackerVersions": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/crackertypes/relationships/crackerVersions"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/crackertypes/crackerVersions"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "tasks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/crackertypes/relationships/tasks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/crackertypes/tasks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "crackerVersions"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "version": {
                          "type": "string"
                        },
                        "downloadUrl": {
                          "type": "string"
                        },
                        "binaryName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "tasks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CrackerBinaryTypePostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "CrackerBinaryType"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "typeName": {
                      "type": "string"
                    },
                    "isChunkingAvailable": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CrackerBinaryTypeListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                }
              }
            }
          }
        ]
      },
      "CrackerBinaryTypeRelationCrackerVersions": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "crackerVersions"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "CrackerBinaryTypeRelationCrackerVersionsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "crackerVersions"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "FileCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "File"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "sourceType": {
                    "type": "string"
                  },
                  "sourceData": {
                    "type": "string"
                  },
                  "filename": {
                    "type": "string"
                  },
                  "isSecret": {
                    "type": "boolean"
                  },
                  "fileType": {
                    "type": "integer"
                  },
                  "accessGroupId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "FilePatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "File"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "accessGroupId": {
                    "type": "integer"
                  },
                  "fileType": {
                    "type": "integer"
                  },
                  "filename": {
                    "type": "string"
                  },
                  "isSecret": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "FileResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/files?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/files?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/files?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/files?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/files?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "File"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "filename": {
                      "type": "string"
                    },
                    "size": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "isSecret": {
                      "type": "boolean"
                    },
                    "fileType": {
                      "type": "integer"
                    },
                    "accessGroupId": {
                      "type": "integer"
                    },
                    "lineCount": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "accessGroup": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/files/relationships/accessGroup"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/files/accessGroup"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "accessGroup"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "groupName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "FileRelationTasks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "FileRelationTasksGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "FileSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "File"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "filename": {
                      "type": "string"
                    },
                    "size": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "isSecret": {
                      "type": "boolean"
                    },
                    "fileType": {
                      "type": "integer"
                    },
                    "accessGroupId": {
                      "type": "integer"
                    },
                    "lineCount": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "accessGroup": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/files/relationships/accessGroup"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/files/accessGroup"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "accessGroup"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "groupName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "FilePostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "File"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "filename": {
                      "type": "string"
                    },
                    "size": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "isSecret": {
                      "type": "boolean"
                    },
                    "fileType": {
                      "type": "integer"
                    },
                    "accessGroupId": {
                      "type": "integer"
                    },
                    "lineCount": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "FileListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            }
          }
        ]
      },
      "FileRelationAccessGroup": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "accessGroup"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "FileRelationAccessGroupGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "accessGroup"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "RightGroupCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "RightGroup"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "RightGroupPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "RightGroup"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "RightGroupResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/globalpermissiongroups?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/globalpermissiongroups?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/globalpermissiongroups?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/globalpermissiongroups?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/globalpermissiongroups?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "RightGroup"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "permissions": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "userMembers": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/globalpermissiongroups/relationships/userMembers"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/globalpermissiongroups/userMembers"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "userMembers"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "passwordHash": {
                          "type": "string"
                        },
                        "passwordSalt": {
                          "type": "string"
                        },
                        "isValid": {
                          "type": "boolean"
                        },
                        "isComputedPassword": {
                          "type": "boolean"
                        },
                        "lastLoginDate": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "registeredSince": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "sessionLifetime": {
                          "type": "integer"
                        },
                        "globalPermissionGroupId": {
                          "type": "integer"
                        },
                        "yubikey": {
                          "type": "string"
                        },
                        "otp1": {
                          "type": "string"
                        },
                        "otp2": {
                          "type": "string"
                        },
                        "otp3": {
                          "type": "string"
                        },
                        "otp4": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "RightGroupRelationAccessGroup": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "accessGroup"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "RightGroupRelationAccessGroupGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "accessGroup"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "RightGroupSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "RightGroup"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "permissions": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "userMembers": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/globalpermissiongroups/relationships/userMembers"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/globalpermissiongroups/userMembers"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "userMembers"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "passwordHash": {
                          "type": "string"
                        },
                        "passwordSalt": {
                          "type": "string"
                        },
                        "isValid": {
                          "type": "boolean"
                        },
                        "isComputedPassword": {
                          "type": "boolean"
                        },
                        "lastLoginDate": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "registeredSince": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "sessionLifetime": {
                          "type": "integer"
                        },
                        "globalPermissionGroupId": {
                          "type": "integer"
                        },
                        "yubikey": {
                          "type": "string"
                        },
                        "otp1": {
                          "type": "string"
                        },
                        "otp2": {
                          "type": "string"
                        },
                        "otp3": {
                          "type": "string"
                        },
                        "otp4": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "RightGroupPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "RightGroup"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "permissions": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RightGroupListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RightGroupResponse"
                }
              }
            }
          }
        ]
      },
      "RightGroupRelationUserMembers": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "userMembers"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "RightGroupRelationUserMembersGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "userMembers"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HashCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Hash"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "hashlistId": {
                    "type": "integer"
                  },
                  "hash": {
                    "type": "string"
                  },
                  "salt": {
                    "type": "string"
                  },
                  "plaintext": {
                    "type": "string"
                  },
                  "timeCracked": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "chunkId": {
                    "type": "integer"
                  },
                  "isCracked": {
                    "type": "boolean"
                  },
                  "crackPos": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "HashPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Hash"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "chunkId": {
                    "type": "integer"
                  },
                  "crackPos": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "hash": {
                    "type": "string"
                  },
                  "hashlistId": {
                    "type": "integer"
                  },
                  "isCracked": {
                    "type": "boolean"
                  },
                  "plaintext": {
                    "type": "string"
                  },
                  "salt": {
                    "type": "string"
                  },
                  "timeCracked": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "HashResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/hashes?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/hashes?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/hashes?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/hashes?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/hashes?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Hash"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "hashlistId": {
                      "type": "integer"
                    },
                    "hash": {
                      "type": "string"
                    },
                    "salt": {
                      "type": "string"
                    },
                    "plaintext": {
                      "type": "string"
                    },
                    "timeCracked": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "chunkId": {
                      "type": "integer"
                    },
                    "isCracked": {
                      "type": "boolean"
                    },
                    "crackPos": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "chunk": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashes/relationships/chunk"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashes/chunk"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashlist": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashes/relationships/hashlist"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashes/hashlist"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "chunk"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "chunkId": {
                          "type": "integer"
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "skip": {
                          "type": "integer"
                        },
                        "length": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "dispatchTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "solveTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "checkpoint": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "progress": {
                          "type": "integer"
                        },
                        "state": {
                          "type": "integer"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "speed": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashlist"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistSeperator": {
                          "type": "string"
                        },
                        "sourceType": {
                          "type": "string"
                        },
                        "sourceData": {
                          "type": "string"
                        },
                        "hashlistId": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "format": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2,
                            3
                          ]
                        },
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "hashCount": {
                          "type": "integer"
                        },
                        "separator": {
                          "type": "string"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "isSecret": {
                          "type": "boolean"
                        },
                        "isHexSalt": {
                          "type": "boolean"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "useBrain": {
                          "type": "boolean"
                        },
                        "brainFeatures": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "HashRelationUserMembers": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "userMembers"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HashRelationUserMembersGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "userMembers"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HashSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Hash"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "hashlistId": {
                      "type": "integer"
                    },
                    "hash": {
                      "type": "string"
                    },
                    "salt": {
                      "type": "string"
                    },
                    "plaintext": {
                      "type": "string"
                    },
                    "timeCracked": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "chunkId": {
                      "type": "integer"
                    },
                    "isCracked": {
                      "type": "boolean"
                    },
                    "crackPos": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "chunk": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashes/relationships/chunk"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashes/chunk"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashlist": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashes/relationships/hashlist"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashes/hashlist"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "chunk"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "chunkId": {
                          "type": "integer"
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "skip": {
                          "type": "integer"
                        },
                        "length": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "dispatchTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "solveTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "checkpoint": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "progress": {
                          "type": "integer"
                        },
                        "state": {
                          "type": "integer"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "speed": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashlist"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistSeperator": {
                          "type": "string"
                        },
                        "sourceType": {
                          "type": "string"
                        },
                        "sourceData": {
                          "type": "string"
                        },
                        "hashlistId": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "format": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2,
                            3
                          ]
                        },
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "hashCount": {
                          "type": "integer"
                        },
                        "separator": {
                          "type": "string"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "isSecret": {
                          "type": "boolean"
                        },
                        "isHexSalt": {
                          "type": "boolean"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "useBrain": {
                          "type": "boolean"
                        },
                        "brainFeatures": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "HashPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Hash"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "hashlistId": {
                      "type": "integer"
                    },
                    "hash": {
                      "type": "string"
                    },
                    "salt": {
                      "type": "string"
                    },
                    "plaintext": {
                      "type": "string"
                    },
                    "timeCracked": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "chunkId": {
                      "type": "integer"
                    },
                    "isCracked": {
                      "type": "boolean"
                    },
                    "crackPos": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "HashListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HashResponse"
                }
              }
            }
          }
        ]
      },
      "HashRelationChunk": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "chunk"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HashRelationChunkGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "chunk"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HashRelationHashlist": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashlist"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HashRelationHashlistGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashlist"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HashlistCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Hashlist"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "hashlistSeperator": {
                    "type": "string"
                  },
                  "sourceType": {
                    "type": "string"
                  },
                  "sourceData": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "format": {
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2,
                      3
                    ]
                  },
                  "hashTypeId": {
                    "type": "integer"
                  },
                  "hashCount": {
                    "type": "integer"
                  },
                  "separator": {
                    "type": "string"
                  },
                  "isSecret": {
                    "type": "boolean"
                  },
                  "isHexSalt": {
                    "type": "boolean"
                  },
                  "isSalted": {
                    "type": "boolean"
                  },
                  "accessGroupId": {
                    "type": "integer"
                  },
                  "notes": {
                    "type": "string"
                  },
                  "useBrain": {
                    "type": "boolean"
                  },
                  "brainFeatures": {
                    "type": "integer"
                  },
                  "isArchived": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "HashlistPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Hashlist"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "accessGroupId": {
                    "type": "integer"
                  },
                  "isArchived": {
                    "type": "boolean"
                  },
                  "isSecret": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "HashlistResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/hashlists?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/hashlists?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/hashlists?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/hashlists?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/hashlists?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Hashlist"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "format": {
                      "type": "integer",
                      "enum": [
                        0,
                        1,
                        2,
                        3
                      ]
                    },
                    "hashTypeId": {
                      "type": "integer"
                    },
                    "hashCount": {
                      "type": "integer"
                    },
                    "separator": {
                      "type": "string"
                    },
                    "cracked": {
                      "type": "integer"
                    },
                    "isSecret": {
                      "type": "boolean"
                    },
                    "isHexSalt": {
                      "type": "boolean"
                    },
                    "isSalted": {
                      "type": "boolean"
                    },
                    "accessGroupId": {
                      "type": "integer"
                    },
                    "notes": {
                      "type": "string"
                    },
                    "useBrain": {
                      "type": "boolean"
                    },
                    "brainFeatures": {
                      "type": "integer"
                    },
                    "isArchived": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "accessGroup": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/relationships/accessGroup"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/accessGroup"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashType": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/relationships/hashType"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/hashType"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashes": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/relationships/hashes"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/hashes"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashlists": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/relationships/hashlists"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/hashlists"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "tasks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/relationships/tasks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/tasks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "accessGroup"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "groupName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashType"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "description": {
                          "type": "string"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "isSlowHash": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashes"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashId": {
                          "type": "integer"
                        },
                        "hashlistId": {
                          "type": "integer"
                        },
                        "hash": {
                          "type": "string"
                        },
                        "salt": {
                          "type": "string"
                        },
                        "plaintext": {
                          "type": "string"
                        },
                        "timeCracked": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "chunkId": {
                          "type": "integer"
                        },
                        "isCracked": {
                          "type": "boolean"
                        },
                        "crackPos": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashlists"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistSeperator": {
                          "type": "string"
                        },
                        "sourceType": {
                          "type": "string"
                        },
                        "sourceData": {
                          "type": "string"
                        },
                        "hashlistId": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "format": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2,
                            3
                          ]
                        },
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "hashCount": {
                          "type": "integer"
                        },
                        "separator": {
                          "type": "string"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "isSecret": {
                          "type": "boolean"
                        },
                        "isHexSalt": {
                          "type": "boolean"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "useBrain": {
                          "type": "boolean"
                        },
                        "brainFeatures": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "tasks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "HashlistRelationHashlist": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashlist"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HashlistRelationHashlistGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashlist"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HashlistSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Hashlist"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "format": {
                      "type": "integer",
                      "enum": [
                        0,
                        1,
                        2,
                        3
                      ]
                    },
                    "hashTypeId": {
                      "type": "integer"
                    },
                    "hashCount": {
                      "type": "integer"
                    },
                    "separator": {
                      "type": "string"
                    },
                    "cracked": {
                      "type": "integer"
                    },
                    "isSecret": {
                      "type": "boolean"
                    },
                    "isHexSalt": {
                      "type": "boolean"
                    },
                    "isSalted": {
                      "type": "boolean"
                    },
                    "accessGroupId": {
                      "type": "integer"
                    },
                    "notes": {
                      "type": "string"
                    },
                    "useBrain": {
                      "type": "boolean"
                    },
                    "brainFeatures": {
                      "type": "integer"
                    },
                    "isArchived": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "accessGroup": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/relationships/accessGroup"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/accessGroup"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashType": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/relationships/hashType"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/hashType"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashes": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/relationships/hashes"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/hashes"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashlists": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/relationships/hashlists"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/hashlists"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "tasks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/relationships/tasks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/hashlists/tasks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "accessGroup"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "groupName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashType"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "description": {
                          "type": "string"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "isSlowHash": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashes"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashId": {
                          "type": "integer"
                        },
                        "hashlistId": {
                          "type": "integer"
                        },
                        "hash": {
                          "type": "string"
                        },
                        "salt": {
                          "type": "string"
                        },
                        "plaintext": {
                          "type": "string"
                        },
                        "timeCracked": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "chunkId": {
                          "type": "integer"
                        },
                        "isCracked": {
                          "type": "boolean"
                        },
                        "crackPos": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashlists"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistSeperator": {
                          "type": "string"
                        },
                        "sourceType": {
                          "type": "string"
                        },
                        "sourceData": {
                          "type": "string"
                        },
                        "hashlistId": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "format": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2,
                            3
                          ]
                        },
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "hashCount": {
                          "type": "integer"
                        },
                        "separator": {
                          "type": "string"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "isSecret": {
                          "type": "boolean"
                        },
                        "isHexSalt": {
                          "type": "boolean"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "useBrain": {
                          "type": "boolean"
                        },
                        "brainFeatures": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "tasks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "HashlistPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Hashlist"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "format": {
                      "type": "integer",
                      "enum": [
                        0,
                        1,
                        2,
                        3
                      ]
                    },
                    "hashTypeId": {
                      "type": "integer"
                    },
                    "hashCount": {
                      "type": "integer"
                    },
                    "separator": {
                      "type": "string"
                    },
                    "cracked": {
                      "type": "integer"
                    },
                    "isSecret": {
                      "type": "boolean"
                    },
                    "isHexSalt": {
                      "type": "boolean"
                    },
                    "isSalted": {
                      "type": "boolean"
                    },
                    "accessGroupId": {
                      "type": "integer"
                    },
                    "notes": {
                      "type": "string"
                    },
                    "useBrain": {
                      "type": "boolean"
                    },
                    "brainFeatures": {
                      "type": "integer"
                    },
                    "isArchived": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "HashlistListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HashlistResponse"
                }
              }
            }
          }
        ]
      },
      "HashlistRelationAccessGroup": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "accessGroup"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HashlistRelationAccessGroupGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "accessGroup"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HashlistRelationHashType": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashType"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HashlistRelationHashTypeGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashType"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HashlistRelationHashes": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "hashes"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HashlistRelationHashesGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "hashes"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HashlistRelationHashlists": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "hashlists"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HashlistRelationHashlistsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "hashlists"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HashlistRelationTasks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HashlistRelationTasksGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HashTypeCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "HashType"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "hashTypeId": {
                    "type": "integer"
                  },
                  "description": {
                    "type": "string"
                  },
                  "isSalted": {
                    "type": "boolean"
                  },
                  "isSlowHash": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "HashTypePatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "HashType"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "isSalted": {
                    "type": "boolean"
                  },
                  "isSlowHash": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "HashTypeResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/hashtypes?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/hashtypes?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/hashtypes?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/hashtypes?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/hashtypes?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "HashType"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "isSalted": {
                      "type": "boolean"
                    },
                    "isSlowHash": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "HashTypeRelationTasks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HashTypeRelationTasksGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HashTypeSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "HashType"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "isSalted": {
                      "type": "boolean"
                    },
                    "isSlowHash": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "HashTypePostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "HashType"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "isSalted": {
                      "type": "boolean"
                    },
                    "isSlowHash": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "HashTypeListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HashTypeResponse"
                }
              }
            }
          }
        ]
      },
      "HealthCheckAgentCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "HealthCheckAgent"
              },
              "attributes": {
                "type": "object",
                "properties": []
              }
            }
          }
        }
      },
      "HealthCheckAgentPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "HealthCheckAgent"
              },
              "attributes": {
                "type": "object",
                "properties": []
              }
            }
          }
        }
      },
      "HealthCheckAgentResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/healthcheckagents?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/healthcheckagents?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/healthcheckagents?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/healthcheckagents?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/healthcheckagents?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "HealthCheckAgent"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "healthCheckId": {
                      "type": "integer"
                    },
                    "agentId": {
                      "type": "integer"
                    },
                    "status": {
                      "type": "integer"
                    },
                    "cracked": {
                      "type": "integer"
                    },
                    "numGpus": {
                      "type": "integer"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "end": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "errors": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "agent": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/healthcheckagents/relationships/agent"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/healthcheckagents/agent"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "healthCheck": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/healthcheckagents/relationships/healthCheck"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/healthcheckagents/healthCheck"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agent"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentId": {
                          "type": "integer"
                        },
                        "agentName": {
                          "type": "string"
                        },
                        "uid": {
                          "type": "string"
                        },
                        "os": {
                          "type": "integer"
                        },
                        "devices": {
                          "type": "string"
                        },
                        "cmdPars": {
                          "type": "string"
                        },
                        "ignoreErrors": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2
                          ]
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isTrusted": {
                          "type": "boolean"
                        },
                        "token": {
                          "type": "string"
                        },
                        "lastAct": {
                          "type": "string"
                        },
                        "lastTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lastIp": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "integer"
                        },
                        "cpuOnly": {
                          "type": "boolean"
                        },
                        "clientSignature": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "healthCheck"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "healthCheckId": {
                          "type": "integer"
                        },
                        "time": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "status": {
                          "type": "integer"
                        },
                        "checkType": {
                          "type": "integer"
                        },
                        "hashtypeId": {
                          "type": "integer"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "expectedCracks": {
                          "type": "integer"
                        },
                        "attackCmd": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "HealthCheckAgentRelationTasks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HealthCheckAgentRelationTasksGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HealthCheckAgentSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "HealthCheckAgent"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "healthCheckId": {
                      "type": "integer"
                    },
                    "agentId": {
                      "type": "integer"
                    },
                    "status": {
                      "type": "integer"
                    },
                    "cracked": {
                      "type": "integer"
                    },
                    "numGpus": {
                      "type": "integer"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "end": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "errors": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "agent": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/healthcheckagents/relationships/agent"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/healthcheckagents/agent"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "healthCheck": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/healthcheckagents/relationships/healthCheck"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/healthcheckagents/healthCheck"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agent"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentId": {
                          "type": "integer"
                        },
                        "agentName": {
                          "type": "string"
                        },
                        "uid": {
                          "type": "string"
                        },
                        "os": {
                          "type": "integer"
                        },
                        "devices": {
                          "type": "string"
                        },
                        "cmdPars": {
                          "type": "string"
                        },
                        "ignoreErrors": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2
                          ]
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isTrusted": {
                          "type": "boolean"
                        },
                        "token": {
                          "type": "string"
                        },
                        "lastAct": {
                          "type": "string"
                        },
                        "lastTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lastIp": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "integer"
                        },
                        "cpuOnly": {
                          "type": "boolean"
                        },
                        "clientSignature": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "healthCheck"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "healthCheckId": {
                          "type": "integer"
                        },
                        "time": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "status": {
                          "type": "integer"
                        },
                        "checkType": {
                          "type": "integer"
                        },
                        "hashtypeId": {
                          "type": "integer"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "expectedCracks": {
                          "type": "integer"
                        },
                        "attackCmd": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "HealthCheckAgentPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "HealthCheckAgent"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "healthCheckId": {
                      "type": "integer"
                    },
                    "agentId": {
                      "type": "integer"
                    },
                    "status": {
                      "type": "integer"
                    },
                    "cracked": {
                      "type": "integer"
                    },
                    "numGpus": {
                      "type": "integer"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "end": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "errors": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "HealthCheckAgentListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HealthCheckAgentResponse"
                }
              }
            }
          }
        ]
      },
      "HealthCheckAgentRelationAgent": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "agent"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HealthCheckAgentRelationAgentGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "agent"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HealthCheckAgentRelationHealthCheck": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "healthCheck"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HealthCheckAgentRelationHealthCheckGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "healthCheck"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HealthCheckCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "HealthCheck"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "checkType": {
                    "type": "integer"
                  },
                  "hashtypeId": {
                    "type": "integer"
                  },
                  "crackerBinaryId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "HealthCheckPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "HealthCheck"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "checkType": {
                    "type": "integer"
                  },
                  "crackerBinaryId": {
                    "type": "integer"
                  },
                  "hashtypeId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "HealthCheckResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/healthchecks?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/healthchecks?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/healthchecks?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/healthchecks?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/healthchecks?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "HealthCheck"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer"
                    },
                    "checkType": {
                      "type": "integer"
                    },
                    "hashtypeId": {
                      "type": "integer"
                    },
                    "crackerBinaryId": {
                      "type": "integer"
                    },
                    "expectedCracks": {
                      "type": "integer"
                    },
                    "attackCmd": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "crackerBinary": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/healthchecks/relationships/crackerBinary"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/healthchecks/crackerBinary"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashType": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/healthchecks/relationships/hashType"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/healthchecks/hashType"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "healthCheckAgents": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/healthchecks/relationships/healthCheckAgents"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/healthchecks/healthCheckAgents"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "crackerBinary"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "version": {
                          "type": "string"
                        },
                        "downloadUrl": {
                          "type": "string"
                        },
                        "binaryName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashType"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "description": {
                          "type": "string"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "isSlowHash": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "healthCheckAgents"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "healthCheckAgentId": {
                          "type": "integer"
                        },
                        "healthCheckId": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "status": {
                          "type": "integer"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "numGpus": {
                          "type": "integer"
                        },
                        "start": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "end": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "errors": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "HealthCheckRelationHealthCheck": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "healthCheck"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HealthCheckRelationHealthCheckGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "healthCheck"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HealthCheckSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "HealthCheck"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer"
                    },
                    "checkType": {
                      "type": "integer"
                    },
                    "hashtypeId": {
                      "type": "integer"
                    },
                    "crackerBinaryId": {
                      "type": "integer"
                    },
                    "expectedCracks": {
                      "type": "integer"
                    },
                    "attackCmd": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "crackerBinary": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/healthchecks/relationships/crackerBinary"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/healthchecks/crackerBinary"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashType": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/healthchecks/relationships/hashType"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/healthchecks/hashType"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "healthCheckAgents": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/healthchecks/relationships/healthCheckAgents"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/healthchecks/healthCheckAgents"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "crackerBinary"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "version": {
                          "type": "string"
                        },
                        "downloadUrl": {
                          "type": "string"
                        },
                        "binaryName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashType"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "description": {
                          "type": "string"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "isSlowHash": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "healthCheckAgents"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "healthCheckAgentId": {
                          "type": "integer"
                        },
                        "healthCheckId": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "status": {
                          "type": "integer"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "numGpus": {
                          "type": "integer"
                        },
                        "start": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "end": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "errors": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "HealthCheckPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "HealthCheck"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "status": {
                      "type": "integer"
                    },
                    "checkType": {
                      "type": "integer"
                    },
                    "hashtypeId": {
                      "type": "integer"
                    },
                    "crackerBinaryId": {
                      "type": "integer"
                    },
                    "expectedCracks": {
                      "type": "integer"
                    },
                    "attackCmd": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "HealthCheckListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        ]
      },
      "HealthCheckRelationCrackerBinary": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "crackerBinary"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HealthCheckRelationCrackerBinaryGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "crackerBinary"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HealthCheckRelationHashType": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashType"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HealthCheckRelationHashTypeGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashType"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "HealthCheckRelationHealthCheckAgents": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "healthCheckAgents"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "HealthCheckRelationHealthCheckAgentsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "healthCheckAgents"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "LogEntryCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "LogEntry"
              },
              "attributes": {
                "type": "object",
                "properties": []
              }
            }
          }
        }
      },
      "LogEntryPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "LogEntry"
              },
              "attributes": {
                "type": "object",
                "properties": []
              }
            }
          }
        }
      },
      "LogEntryResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/logentries?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/logentries?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/logentries?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/logentries?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/logentries?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "LogEntry"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "issuer": {
                      "type": "string"
                    },
                    "issuerId": {
                      "type": "string"
                    },
                    "level": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "LogEntryRelationHealthCheckAgents": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "healthCheckAgents"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "LogEntryRelationHealthCheckAgentsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "healthCheckAgents"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "LogEntrySingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "LogEntry"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "issuer": {
                      "type": "string"
                    },
                    "issuerId": {
                      "type": "string"
                    },
                    "level": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "LogEntryPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "LogEntry"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "issuer": {
                      "type": "string"
                    },
                    "issuerId": {
                      "type": "string"
                    },
                    "level": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "LogEntryListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LogEntryResponse"
                }
              }
            }
          }
        ]
      },
      "NotificationSettingCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "NotificationSetting"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "actionFilter": {
                    "type": "string"
                  },
                  "action": {
                    "type": "string"
                  },
                  "notification": {
                    "type": "string"
                  },
                  "receiver": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "NotificationSettingPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "NotificationSetting"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string"
                  },
                  "isActive": {
                    "type": "boolean"
                  },
                  "notification": {
                    "type": "string"
                  },
                  "receiver": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "NotificationSettingResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/notifications?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/notifications?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/notifications?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/notifications?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/notifications?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "NotificationSetting"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string"
                    },
                    "objectId": {
                      "type": "integer"
                    },
                    "notification": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "integer"
                    },
                    "receiver": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "user": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/notifications/relationships/user"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/notifications/user"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "user"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "passwordHash": {
                          "type": "string"
                        },
                        "passwordSalt": {
                          "type": "string"
                        },
                        "isValid": {
                          "type": "boolean"
                        },
                        "isComputedPassword": {
                          "type": "boolean"
                        },
                        "lastLoginDate": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "registeredSince": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "sessionLifetime": {
                          "type": "integer"
                        },
                        "globalPermissionGroupId": {
                          "type": "integer"
                        },
                        "yubikey": {
                          "type": "string"
                        },
                        "otp1": {
                          "type": "string"
                        },
                        "otp2": {
                          "type": "string"
                        },
                        "otp3": {
                          "type": "string"
                        },
                        "otp4": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "NotificationSettingRelationHealthCheckAgents": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "healthCheckAgents"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "NotificationSettingRelationHealthCheckAgentsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "healthCheckAgents"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "NotificationSettingSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "NotificationSetting"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string"
                    },
                    "objectId": {
                      "type": "integer"
                    },
                    "notification": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "integer"
                    },
                    "receiver": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "user": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/notifications/relationships/user"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/notifications/user"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "user"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "passwordHash": {
                          "type": "string"
                        },
                        "passwordSalt": {
                          "type": "string"
                        },
                        "isValid": {
                          "type": "boolean"
                        },
                        "isComputedPassword": {
                          "type": "boolean"
                        },
                        "lastLoginDate": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "registeredSince": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "sessionLifetime": {
                          "type": "integer"
                        },
                        "globalPermissionGroupId": {
                          "type": "integer"
                        },
                        "yubikey": {
                          "type": "string"
                        },
                        "otp1": {
                          "type": "string"
                        },
                        "otp2": {
                          "type": "string"
                        },
                        "otp3": {
                          "type": "string"
                        },
                        "otp4": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "NotificationSettingPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "NotificationSetting"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string"
                    },
                    "objectId": {
                      "type": "integer"
                    },
                    "notification": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "integer"
                    },
                    "receiver": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "NotificationSettingListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NotificationSettingResponse"
                }
              }
            }
          }
        ]
      },
      "NotificationSettingRelationUser": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "user"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "NotificationSettingRelationUserGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "user"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "PreprocessorCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Preprocessor"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "binaryName": {
                    "type": "string"
                  },
                  "keyspaceCommand": {
                    "type": "string"
                  },
                  "skipCommand": {
                    "type": "string"
                  },
                  "limitCommand": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "PreprocessorPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Preprocessor"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "binaryName": {
                    "type": "string"
                  },
                  "keyspaceCommand": {
                    "type": "string"
                  },
                  "limitCommand": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "skipCommand": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "PreprocessorResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/preprocessors?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/preprocessors?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/preprocessors?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/preprocessors?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/preprocessors?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Preprocessor"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "binaryName": {
                      "type": "string"
                    },
                    "keyspaceCommand": {
                      "type": "string"
                    },
                    "skipCommand": {
                      "type": "string"
                    },
                    "limitCommand": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "PreprocessorRelationUser": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "user"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "PreprocessorRelationUserGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "user"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "PreprocessorSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Preprocessor"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "binaryName": {
                      "type": "string"
                    },
                    "keyspaceCommand": {
                      "type": "string"
                    },
                    "skipCommand": {
                      "type": "string"
                    },
                    "limitCommand": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "PreprocessorPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Preprocessor"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "binaryName": {
                      "type": "string"
                    },
                    "keyspaceCommand": {
                      "type": "string"
                    },
                    "skipCommand": {
                      "type": "string"
                    },
                    "limitCommand": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PreprocessorListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PreprocessorResponse"
                }
              }
            }
          }
        ]
      },
      "PretaskCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Pretask"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "taskName": {
                    "type": "string"
                  },
                  "attackCmd": {
                    "type": "string"
                  },
                  "chunkTime": {
                    "type": "integer"
                  },
                  "statusTimer": {
                    "type": "integer"
                  },
                  "color": {
                    "type": "string"
                  },
                  "isSmall": {
                    "type": "boolean"
                  },
                  "isCpuTask": {
                    "type": "boolean"
                  },
                  "useNewBench": {
                    "type": "boolean"
                  },
                  "priority": {
                    "type": "integer"
                  },
                  "maxAgents": {
                    "type": "integer"
                  },
                  "isMaskImport": {
                    "type": "boolean"
                  },
                  "crackerBinaryTypeId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "PretaskPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Pretask"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "attackCmd": {
                    "type": "string"
                  },
                  "chunkTime": {
                    "type": "integer"
                  },
                  "color": {
                    "type": "string"
                  },
                  "crackerBinaryTypeId": {
                    "type": "integer"
                  },
                  "isCpuTask": {
                    "type": "boolean"
                  },
                  "isMaskImport": {
                    "type": "boolean"
                  },
                  "isSmall": {
                    "type": "boolean"
                  },
                  "maxAgents": {
                    "type": "integer"
                  },
                  "priority": {
                    "type": "integer"
                  },
                  "statusTimer": {
                    "type": "integer"
                  },
                  "taskName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "PretaskResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/pretasks?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/pretasks?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/pretasks?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/pretasks?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/pretasks?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Pretask"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "taskName": {
                      "type": "string"
                    },
                    "attackCmd": {
                      "type": "string"
                    },
                    "chunkTime": {
                      "type": "integer"
                    },
                    "statusTimer": {
                      "type": "integer"
                    },
                    "color": {
                      "type": "string"
                    },
                    "isSmall": {
                      "type": "boolean"
                    },
                    "isCpuTask": {
                      "type": "boolean"
                    },
                    "useNewBench": {
                      "type": "boolean"
                    },
                    "priority": {
                      "type": "integer"
                    },
                    "maxAgents": {
                      "type": "integer"
                    },
                    "isMaskImport": {
                      "type": "boolean"
                    },
                    "crackerBinaryTypeId": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "pretaskFiles": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/pretasks/relationships/pretaskFiles"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/pretasks/pretaskFiles"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "pretaskFiles"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "sourceType": {
                          "type": "string"
                        },
                        "sourceData": {
                          "type": "string"
                        },
                        "fileId": {
                          "type": "integer"
                        },
                        "filename": {
                          "type": "string"
                        },
                        "size": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "isSecret": {
                          "type": "boolean"
                        },
                        "fileType": {
                          "type": "integer"
                        },
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "lineCount": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "PretaskRelationUser": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "user"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "PretaskRelationUserGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "user"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "PretaskSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Pretask"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "taskName": {
                      "type": "string"
                    },
                    "attackCmd": {
                      "type": "string"
                    },
                    "chunkTime": {
                      "type": "integer"
                    },
                    "statusTimer": {
                      "type": "integer"
                    },
                    "color": {
                      "type": "string"
                    },
                    "isSmall": {
                      "type": "boolean"
                    },
                    "isCpuTask": {
                      "type": "boolean"
                    },
                    "useNewBench": {
                      "type": "boolean"
                    },
                    "priority": {
                      "type": "integer"
                    },
                    "maxAgents": {
                      "type": "integer"
                    },
                    "isMaskImport": {
                      "type": "boolean"
                    },
                    "crackerBinaryTypeId": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "pretaskFiles": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/pretasks/relationships/pretaskFiles"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/pretasks/pretaskFiles"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "pretaskFiles"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "sourceType": {
                          "type": "string"
                        },
                        "sourceData": {
                          "type": "string"
                        },
                        "fileId": {
                          "type": "integer"
                        },
                        "filename": {
                          "type": "string"
                        },
                        "size": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "isSecret": {
                          "type": "boolean"
                        },
                        "fileType": {
                          "type": "integer"
                        },
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "lineCount": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "PretaskPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Pretask"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "taskName": {
                      "type": "string"
                    },
                    "attackCmd": {
                      "type": "string"
                    },
                    "chunkTime": {
                      "type": "integer"
                    },
                    "statusTimer": {
                      "type": "integer"
                    },
                    "color": {
                      "type": "string"
                    },
                    "isSmall": {
                      "type": "boolean"
                    },
                    "isCpuTask": {
                      "type": "boolean"
                    },
                    "useNewBench": {
                      "type": "boolean"
                    },
                    "priority": {
                      "type": "integer"
                    },
                    "maxAgents": {
                      "type": "integer"
                    },
                    "isMaskImport": {
                      "type": "boolean"
                    },
                    "crackerBinaryTypeId": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PretaskListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PretaskResponse"
                }
              }
            }
          }
        ]
      },
      "PretaskRelationPretaskFiles": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "pretaskFiles"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "PretaskRelationPretaskFilesGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "pretaskFiles"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "SpeedCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Speed"
              },
              "attributes": {
                "type": "object",
                "properties": []
              }
            }
          }
        }
      },
      "SpeedPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Speed"
              },
              "attributes": {
                "type": "object",
                "properties": []
              }
            }
          }
        }
      },
      "SpeedResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/speeds?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/speeds?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/speeds?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/speeds?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/speeds?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Speed"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "agentId": {
                      "type": "integer"
                    },
                    "taskId": {
                      "type": "integer"
                    },
                    "speed": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "agent": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/speeds/relationships/agent"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/speeds/agent"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "task": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/speeds/relationships/task"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/speeds/task"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agent"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentId": {
                          "type": "integer"
                        },
                        "agentName": {
                          "type": "string"
                        },
                        "uid": {
                          "type": "string"
                        },
                        "os": {
                          "type": "integer"
                        },
                        "devices": {
                          "type": "string"
                        },
                        "cmdPars": {
                          "type": "string"
                        },
                        "ignoreErrors": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2
                          ]
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isTrusted": {
                          "type": "boolean"
                        },
                        "token": {
                          "type": "string"
                        },
                        "lastAct": {
                          "type": "string"
                        },
                        "lastTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lastIp": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "integer"
                        },
                        "cpuOnly": {
                          "type": "boolean"
                        },
                        "clientSignature": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "task"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "SpeedRelationPretaskFiles": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "pretaskFiles"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "SpeedRelationPretaskFilesGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "pretaskFiles"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "SpeedSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Speed"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "agentId": {
                      "type": "integer"
                    },
                    "taskId": {
                      "type": "integer"
                    },
                    "speed": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "agent": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/speeds/relationships/agent"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/speeds/agent"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "task": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/speeds/relationships/task"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/speeds/task"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "agent"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentId": {
                          "type": "integer"
                        },
                        "agentName": {
                          "type": "string"
                        },
                        "uid": {
                          "type": "string"
                        },
                        "os": {
                          "type": "integer"
                        },
                        "devices": {
                          "type": "string"
                        },
                        "cmdPars": {
                          "type": "string"
                        },
                        "ignoreErrors": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2
                          ]
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isTrusted": {
                          "type": "boolean"
                        },
                        "token": {
                          "type": "string"
                        },
                        "lastAct": {
                          "type": "string"
                        },
                        "lastTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lastIp": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "integer"
                        },
                        "cpuOnly": {
                          "type": "boolean"
                        },
                        "clientSignature": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "task"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "SpeedPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Speed"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "agentId": {
                      "type": "integer"
                    },
                    "taskId": {
                      "type": "integer"
                    },
                    "speed": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SpeedListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SpeedResponse"
                }
              }
            }
          }
        ]
      },
      "SpeedRelationAgent": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "agent"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "SpeedRelationAgentGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "agent"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "SpeedRelationTask": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "SpeedRelationTaskGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "SupertaskCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Supertask"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "pretasks": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "supertaskName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "SupertaskPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Supertask"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "supertaskName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "SupertaskResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/supertasks?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/supertasks?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/supertasks?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/supertasks?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/supertasks?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Supertask"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "supertaskName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "pretasks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/supertasks/relationships/pretasks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/supertasks/pretasks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "pretasks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "pretaskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "isMaskImport": {
                          "type": "boolean"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "SupertaskRelationTask": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "SupertaskRelationTaskGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "task"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "SupertaskSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Supertask"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "supertaskName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "pretasks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/supertasks/relationships/pretasks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/supertasks/pretasks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "pretasks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "pretaskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "isMaskImport": {
                          "type": "boolean"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "SupertaskPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Supertask"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "supertaskName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SupertaskListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupertaskResponse"
                }
              }
            }
          }
        ]
      },
      "SupertaskRelationPretasks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "pretasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "SupertaskRelationPretasksGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "pretasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "TaskCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Task"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "hashlistId": {
                    "type": "integer"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "taskName": {
                    "type": "string"
                  },
                  "attackCmd": {
                    "type": "string"
                  },
                  "chunkTime": {
                    "type": "integer"
                  },
                  "statusTimer": {
                    "type": "integer"
                  },
                  "priority": {
                    "type": "integer"
                  },
                  "maxAgents": {
                    "type": "integer"
                  },
                  "color": {
                    "type": "string"
                  },
                  "isSmall": {
                    "type": "boolean"
                  },
                  "isCpuTask": {
                    "type": "boolean"
                  },
                  "useNewBench": {
                    "type": "boolean"
                  },
                  "skipKeyspace": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "crackerBinaryId": {
                    "type": "integer"
                  },
                  "crackerBinaryTypeId": {
                    "type": "integer"
                  },
                  "isArchived": {
                    "type": "boolean"
                  },
                  "notes": {
                    "type": "string"
                  },
                  "staticChunks": {
                    "type": "integer"
                  },
                  "chunkSize": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "forcePipe": {
                    "type": "boolean"
                  },
                  "preprocessorId": {
                    "type": "integer"
                  },
                  "preprocessorCommand": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "TaskPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "Task"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "attackCmd": {
                    "type": "string"
                  },
                  "chunkTime": {
                    "type": "integer"
                  },
                  "color": {
                    "type": "string"
                  },
                  "isArchived": {
                    "type": "boolean"
                  },
                  "isCpuTask": {
                    "type": "boolean"
                  },
                  "isSmall": {
                    "type": "boolean"
                  },
                  "maxAgents": {
                    "type": "integer"
                  },
                  "notes": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "integer"
                  },
                  "statusTimer": {
                    "type": "integer"
                  },
                  "taskName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "TaskResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/tasks?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/tasks?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/tasks?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/tasks?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/tasks?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Task"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "taskName": {
                      "type": "string"
                    },
                    "attackCmd": {
                      "type": "string"
                    },
                    "chunkTime": {
                      "type": "integer"
                    },
                    "statusTimer": {
                      "type": "integer"
                    },
                    "keyspace": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "keyspaceProgress": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "priority": {
                      "type": "integer"
                    },
                    "maxAgents": {
                      "type": "integer"
                    },
                    "color": {
                      "type": "string"
                    },
                    "isSmall": {
                      "type": "boolean"
                    },
                    "isCpuTask": {
                      "type": "boolean"
                    },
                    "useNewBench": {
                      "type": "boolean"
                    },
                    "skipKeyspace": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "crackerBinaryId": {
                      "type": "integer"
                    },
                    "crackerBinaryTypeId": {
                      "type": "integer"
                    },
                    "taskWrapperId": {
                      "type": "integer"
                    },
                    "isArchived": {
                      "type": "boolean"
                    },
                    "notes": {
                      "type": "string"
                    },
                    "staticChunks": {
                      "type": "integer"
                    },
                    "chunkSize": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "forcePipe": {
                      "type": "boolean"
                    },
                    "preprocessorId": {
                      "type": "integer"
                    },
                    "preprocessorCommand": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "assignedAgents": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/relationships/assignedAgents"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/assignedAgents"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "crackerBinary": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/relationships/crackerBinary"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/crackerBinary"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "crackerBinaryType": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/relationships/crackerBinaryType"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/crackerBinaryType"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "files": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/relationships/files"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/files"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashlist": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/relationships/hashlist"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/hashlist"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "speeds": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/relationships/speeds"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/speeds"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "crackerBinary"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "version": {
                          "type": "string"
                        },
                        "downloadUrl": {
                          "type": "string"
                        },
                        "binaryName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "crackerBinaryType"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "typeName": {
                          "type": "string"
                        },
                        "isChunkingAvailable": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashlist"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistSeperator": {
                          "type": "string"
                        },
                        "sourceType": {
                          "type": "string"
                        },
                        "sourceData": {
                          "type": "string"
                        },
                        "hashlistId": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "format": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2,
                            3
                          ]
                        },
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "hashCount": {
                          "type": "integer"
                        },
                        "separator": {
                          "type": "string"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "isSecret": {
                          "type": "boolean"
                        },
                        "isHexSalt": {
                          "type": "boolean"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "useBrain": {
                          "type": "boolean"
                        },
                        "brainFeatures": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "assignedAgents"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentId": {
                          "type": "integer"
                        },
                        "agentName": {
                          "type": "string"
                        },
                        "uid": {
                          "type": "string"
                        },
                        "os": {
                          "type": "integer"
                        },
                        "devices": {
                          "type": "string"
                        },
                        "cmdPars": {
                          "type": "string"
                        },
                        "ignoreErrors": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2
                          ]
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isTrusted": {
                          "type": "boolean"
                        },
                        "token": {
                          "type": "string"
                        },
                        "lastAct": {
                          "type": "string"
                        },
                        "lastTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lastIp": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "integer"
                        },
                        "cpuOnly": {
                          "type": "boolean"
                        },
                        "clientSignature": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "files"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "sourceType": {
                          "type": "string"
                        },
                        "sourceData": {
                          "type": "string"
                        },
                        "fileId": {
                          "type": "integer"
                        },
                        "filename": {
                          "type": "string"
                        },
                        "size": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "isSecret": {
                          "type": "boolean"
                        },
                        "fileType": {
                          "type": "integer"
                        },
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "lineCount": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "speeds"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "speedId": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "speed": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "time": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "TaskRelationPretasks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "pretasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "TaskRelationPretasksGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "pretasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "TaskSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Task"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "taskName": {
                      "type": "string"
                    },
                    "attackCmd": {
                      "type": "string"
                    },
                    "chunkTime": {
                      "type": "integer"
                    },
                    "statusTimer": {
                      "type": "integer"
                    },
                    "keyspace": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "keyspaceProgress": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "priority": {
                      "type": "integer"
                    },
                    "maxAgents": {
                      "type": "integer"
                    },
                    "color": {
                      "type": "string"
                    },
                    "isSmall": {
                      "type": "boolean"
                    },
                    "isCpuTask": {
                      "type": "boolean"
                    },
                    "useNewBench": {
                      "type": "boolean"
                    },
                    "skipKeyspace": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "crackerBinaryId": {
                      "type": "integer"
                    },
                    "crackerBinaryTypeId": {
                      "type": "integer"
                    },
                    "taskWrapperId": {
                      "type": "integer"
                    },
                    "isArchived": {
                      "type": "boolean"
                    },
                    "notes": {
                      "type": "string"
                    },
                    "staticChunks": {
                      "type": "integer"
                    },
                    "chunkSize": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "forcePipe": {
                      "type": "boolean"
                    },
                    "preprocessorId": {
                      "type": "integer"
                    },
                    "preprocessorCommand": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "assignedAgents": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/relationships/assignedAgents"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/assignedAgents"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "crackerBinary": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/relationships/crackerBinary"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/crackerBinary"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "crackerBinaryType": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/relationships/crackerBinaryType"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/crackerBinaryType"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "files": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/relationships/files"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/files"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashlist": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/relationships/hashlist"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/hashlist"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "speeds": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/relationships/speeds"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/tasks/speeds"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "crackerBinary"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "version": {
                          "type": "string"
                        },
                        "downloadUrl": {
                          "type": "string"
                        },
                        "binaryName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "crackerBinaryType"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "typeName": {
                          "type": "string"
                        },
                        "isChunkingAvailable": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashlist"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistSeperator": {
                          "type": "string"
                        },
                        "sourceType": {
                          "type": "string"
                        },
                        "sourceData": {
                          "type": "string"
                        },
                        "hashlistId": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "format": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2,
                            3
                          ]
                        },
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "hashCount": {
                          "type": "integer"
                        },
                        "separator": {
                          "type": "string"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "isSecret": {
                          "type": "boolean"
                        },
                        "isHexSalt": {
                          "type": "boolean"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "useBrain": {
                          "type": "boolean"
                        },
                        "brainFeatures": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "assignedAgents"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "agentId": {
                          "type": "integer"
                        },
                        "agentName": {
                          "type": "string"
                        },
                        "uid": {
                          "type": "string"
                        },
                        "os": {
                          "type": "integer"
                        },
                        "devices": {
                          "type": "string"
                        },
                        "cmdPars": {
                          "type": "string"
                        },
                        "ignoreErrors": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2
                          ]
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isTrusted": {
                          "type": "boolean"
                        },
                        "token": {
                          "type": "string"
                        },
                        "lastAct": {
                          "type": "string"
                        },
                        "lastTime": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "lastIp": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "integer"
                        },
                        "cpuOnly": {
                          "type": "boolean"
                        },
                        "clientSignature": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "files"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "sourceType": {
                          "type": "string"
                        },
                        "sourceData": {
                          "type": "string"
                        },
                        "fileId": {
                          "type": "integer"
                        },
                        "filename": {
                          "type": "string"
                        },
                        "size": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "isSecret": {
                          "type": "boolean"
                        },
                        "fileType": {
                          "type": "integer"
                        },
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "lineCount": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "speeds"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "speedId": {
                          "type": "integer"
                        },
                        "agentId": {
                          "type": "integer"
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "speed": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "time": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "TaskPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "Task"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "taskName": {
                      "type": "string"
                    },
                    "attackCmd": {
                      "type": "string"
                    },
                    "chunkTime": {
                      "type": "integer"
                    },
                    "statusTimer": {
                      "type": "integer"
                    },
                    "keyspace": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "keyspaceProgress": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "priority": {
                      "type": "integer"
                    },
                    "maxAgents": {
                      "type": "integer"
                    },
                    "color": {
                      "type": "string"
                    },
                    "isSmall": {
                      "type": "boolean"
                    },
                    "isCpuTask": {
                      "type": "boolean"
                    },
                    "useNewBench": {
                      "type": "boolean"
                    },
                    "skipKeyspace": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "crackerBinaryId": {
                      "type": "integer"
                    },
                    "crackerBinaryTypeId": {
                      "type": "integer"
                    },
                    "taskWrapperId": {
                      "type": "integer"
                    },
                    "isArchived": {
                      "type": "boolean"
                    },
                    "notes": {
                      "type": "string"
                    },
                    "staticChunks": {
                      "type": "integer"
                    },
                    "chunkSize": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "forcePipe": {
                      "type": "boolean"
                    },
                    "preprocessorId": {
                      "type": "integer"
                    },
                    "preprocessorCommand": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "TaskListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          }
        ]
      },
      "TaskRelationCrackerBinary": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "crackerBinary"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "TaskRelationCrackerBinaryGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "crackerBinary"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "TaskRelationCrackerBinaryType": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "crackerBinaryType"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "TaskRelationCrackerBinaryTypeGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "crackerBinaryType"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "TaskRelationHashlist": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashlist"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "TaskRelationHashlistGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashlist"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "TaskRelationAssignedAgents": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "assignedAgents"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "TaskRelationAssignedAgentsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "assignedAgents"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "TaskRelationFiles": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "files"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "TaskRelationFilesGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "files"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "TaskRelationSpeeds": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "speeds"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "TaskRelationSpeedsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "speeds"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "TaskWrapperCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "TaskWrapper"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "priority": {
                    "type": "integer"
                  },
                  "maxAgents": {
                    "type": "integer"
                  },
                  "accessGroupId": {
                    "type": "integer"
                  },
                  "taskWrapperName": {
                    "type": "string"
                  },
                  "isArchived": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "TaskWrapperPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "TaskWrapper"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "accessGroupId": {
                    "type": "integer"
                  },
                  "isArchived": {
                    "type": "boolean"
                  },
                  "maxAgents": {
                    "type": "integer"
                  },
                  "priority": {
                    "type": "integer"
                  },
                  "taskWrapperName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "TaskWrapperResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/taskwrappers?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/taskwrappers?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/taskwrappers?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/taskwrappers?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/taskwrappers?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "TaskWrapper"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "priority": {
                      "type": "integer"
                    },
                    "maxAgents": {
                      "type": "integer"
                    },
                    "taskType": {
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "hashlistId": {
                      "type": "integer"
                    },
                    "accessGroupId": {
                      "type": "integer"
                    },
                    "taskWrapperName": {
                      "type": "string"
                    },
                    "isArchived": {
                      "type": "boolean"
                    },
                    "cracked": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "accessGroup": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/relationships/accessGroup"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/accessGroup"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashType": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/relationships/hashType"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/hashType"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashlist": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/relationships/hashlist"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/hashlist"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "tasks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/relationships/tasks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/tasks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "accessGroup"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "groupName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashlist"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistSeperator": {
                          "type": "string"
                        },
                        "sourceType": {
                          "type": "string"
                        },
                        "sourceData": {
                          "type": "string"
                        },
                        "hashlistId": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "format": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2,
                            3
                          ]
                        },
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "hashCount": {
                          "type": "integer"
                        },
                        "separator": {
                          "type": "string"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "isSecret": {
                          "type": "boolean"
                        },
                        "isHexSalt": {
                          "type": "boolean"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "useBrain": {
                          "type": "boolean"
                        },
                        "brainFeatures": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashType"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "description": {
                          "type": "string"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "isSlowHash": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "tasks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "TaskWrapperRelationSpeeds": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "speeds"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "TaskWrapperRelationSpeedsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "speeds"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "TaskWrapperSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "TaskWrapper"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "priority": {
                      "type": "integer"
                    },
                    "maxAgents": {
                      "type": "integer"
                    },
                    "taskType": {
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "hashlistId": {
                      "type": "integer"
                    },
                    "accessGroupId": {
                      "type": "integer"
                    },
                    "taskWrapperName": {
                      "type": "string"
                    },
                    "isArchived": {
                      "type": "boolean"
                    },
                    "cracked": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "accessGroup": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/relationships/accessGroup"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/accessGroup"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashType": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/relationships/hashType"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/hashType"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "hashlist": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/relationships/hashlist"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/hashlist"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "tasks": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/relationships/tasks"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/taskwrappers/tasks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "accessGroup"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "groupName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashlist"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistSeperator": {
                          "type": "string"
                        },
                        "sourceType": {
                          "type": "string"
                        },
                        "sourceData": {
                          "type": "string"
                        },
                        "hashlistId": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "format": {
                          "type": "integer",
                          "enum": [
                            0,
                            1,
                            2,
                            3
                          ]
                        },
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "hashCount": {
                          "type": "integer"
                        },
                        "separator": {
                          "type": "string"
                        },
                        "cracked": {
                          "type": "integer"
                        },
                        "isSecret": {
                          "type": "boolean"
                        },
                        "isHexSalt": {
                          "type": "boolean"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "useBrain": {
                          "type": "boolean"
                        },
                        "brainFeatures": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "hashType"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashTypeId": {
                          "type": "integer"
                        },
                        "description": {
                          "type": "string"
                        },
                        "isSalted": {
                          "type": "boolean"
                        },
                        "isSlowHash": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "tasks"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "hashlistId": {
                          "type": "integer"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "taskId": {
                          "type": "integer"
                        },
                        "taskName": {
                          "type": "string"
                        },
                        "attackCmd": {
                          "type": "string"
                        },
                        "chunkTime": {
                          "type": "integer"
                        },
                        "statusTimer": {
                          "type": "integer"
                        },
                        "keyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "keyspaceProgress": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "priority": {
                          "type": "integer"
                        },
                        "maxAgents": {
                          "type": "integer"
                        },
                        "color": {
                          "type": "string"
                        },
                        "isSmall": {
                          "type": "boolean"
                        },
                        "isCpuTask": {
                          "type": "boolean"
                        },
                        "useNewBench": {
                          "type": "boolean"
                        },
                        "skipKeyspace": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "crackerBinaryId": {
                          "type": "integer"
                        },
                        "crackerBinaryTypeId": {
                          "type": "integer"
                        },
                        "taskWrapperId": {
                          "type": "integer"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "staticChunks": {
                          "type": "integer"
                        },
                        "chunkSize": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "forcePipe": {
                          "type": "boolean"
                        },
                        "preprocessorId": {
                          "type": "integer"
                        },
                        "preprocessorCommand": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "TaskWrapperPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "TaskWrapper"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "priority": {
                      "type": "integer"
                    },
                    "maxAgents": {
                      "type": "integer"
                    },
                    "taskType": {
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "hashlistId": {
                      "type": "integer"
                    },
                    "accessGroupId": {
                      "type": "integer"
                    },
                    "taskWrapperName": {
                      "type": "string"
                    },
                    "isArchived": {
                      "type": "boolean"
                    },
                    "cracked": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "TaskWrapperListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskWrapperResponse"
                }
              }
            }
          }
        ]
      },
      "TaskWrapperRelationAccessGroup": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "accessGroup"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "TaskWrapperRelationAccessGroupGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "accessGroup"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "TaskWrapperRelationHashlist": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashlist"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "TaskWrapperRelationHashlistGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashlist"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "TaskWrapperRelationHashType": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashType"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "TaskWrapperRelationHashTypeGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "hashType"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "TaskWrapperRelationTasks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "TaskWrapperRelationTasksGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "User"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "globalPermissionGroupId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "UserPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "User"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "globalPermissionGroupId": {
                    "type": "integer"
                  },
                  "isValid": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/users?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/users?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/users?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/users?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/users?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "User"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "passwordHash": {
                      "type": "string"
                    },
                    "passwordSalt": {
                      "type": "string"
                    },
                    "isValid": {
                      "type": "boolean"
                    },
                    "isComputedPassword": {
                      "type": "boolean"
                    },
                    "lastLoginDate": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "registeredSince": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "sessionLifetime": {
                      "type": "integer"
                    },
                    "globalPermissionGroupId": {
                      "type": "integer"
                    },
                    "yubikey": {
                      "type": "string"
                    },
                    "otp1": {
                      "type": "string"
                    },
                    "otp2": {
                      "type": "string"
                    },
                    "otp3": {
                      "type": "string"
                    },
                    "otp4": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "accessGroups": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/users/relationships/accessGroups"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/users/accessGroups"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "globalPermissionGroup": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/users/relationships/globalPermissionGroup"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/users/globalPermissionGroup"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "globalPermissionGroup"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "permissions": {
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "accessGroups"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "groupName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "UserRelationTasks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "UserRelationTasksGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "tasks"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "UserSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "User"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "passwordHash": {
                      "type": "string"
                    },
                    "passwordSalt": {
                      "type": "string"
                    },
                    "isValid": {
                      "type": "boolean"
                    },
                    "isComputedPassword": {
                      "type": "boolean"
                    },
                    "lastLoginDate": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "registeredSince": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "sessionLifetime": {
                      "type": "integer"
                    },
                    "globalPermissionGroupId": {
                      "type": "integer"
                    },
                    "yubikey": {
                      "type": "string"
                    },
                    "otp1": {
                      "type": "string"
                    },
                    "otp2": {
                      "type": "string"
                    },
                    "otp3": {
                      "type": "string"
                    },
                    "otp4": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": [
              {
                "properties": {
                  "accessGroups": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/users/relationships/accessGroups"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/users/accessGroups"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "properties": {
                  "globalPermissionGroup": {
                    "type": "object",
                    "properties": {
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "default": "/api/v2/ui/users/relationships/globalPermissionGroup"
                          },
                          "related": {
                            "type": "string",
                            "default": "/api/v2/ui/users/globalPermissionGroup"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": [
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "globalPermissionGroup"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "permissions": {
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "default": "accessGroups"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "accessGroupId": {
                          "type": "integer"
                        },
                        "groupName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "UserPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "User"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "passwordHash": {
                      "type": "string"
                    },
                    "passwordSalt": {
                      "type": "string"
                    },
                    "isValid": {
                      "type": "boolean"
                    },
                    "isComputedPassword": {
                      "type": "boolean"
                    },
                    "lastLoginDate": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "registeredSince": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "sessionLifetime": {
                      "type": "integer"
                    },
                    "globalPermissionGroupId": {
                      "type": "integer"
                    },
                    "yubikey": {
                      "type": "string"
                    },
                    "otp1": {
                      "type": "string"
                    },
                    "otp2": {
                      "type": "string"
                    },
                    "otp3": {
                      "type": "string"
                    },
                    "otp4": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UserListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          }
        ]
      },
      "UserRelationGlobalPermissionGroup": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "globalPermissionGroup"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "UserRelationGlobalPermissionGroupGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "globalPermissionGroup"
              },
              "id": {
                "type": "integer",
                "default": 1
              }
            }
          }
        }
      },
      "UserRelationAccessGroups": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "accessGroups"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "UserRelationAccessGroupsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "accessGroups"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "RegVoucherCreate": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "RegVoucher"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "voucher": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "RegVoucherPatch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "RegVoucher"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "voucher": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "RegVoucherResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "default": "/api/v2/ui/vouchers?page[size]=25"
              },
              "first": {
                "type": "string",
                "default": "/api/v2/ui/vouchers?page[size]=25&page[after]=0"
              },
              "last": {
                "type": "string",
                "default": "/api/v2/ui/vouchers?page[size]=25&page[before]=500"
              },
              "next": {
                "type": "string",
                "default": "/api/v2/ui/vouchers?page[size]=25&page[after]=25"
              },
              "previous": {
                "type": "string",
                "default": "/api/v2/ui/vouchers?page[size]=25&page[before]=25"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "RegVoucher"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "voucher": {
                      "type": "string"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "RegVoucherRelationAccessGroups": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "accessGroups"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "RegVoucherRelationAccessGroupsGetResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "accessGroups"
                },
                "id": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          }
        }
      },
      "RegVoucherSingleResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "RegVoucher"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "voucher": {
                      "type": "string"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": []
          },
          "included": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": []
            }
          }
        }
      },
      "RegVoucherPostPatchResponse": {
        "type": "object",
        "properties": {
          "jsonapi": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "default": "1.1"
              },
              "ext": {
                "type": "string",
                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "type": {
                  "type": "string",
                  "default": "RegVoucher"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "voucher": {
                      "type": "string"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RegVoucherListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ListResponse"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RegVoucherResponse"
                }
              }
            }
          }
        ]
      },
      "AbortChunkHelperAPI": {
        "type": "object",
        "properties": {
          "chunkId": {
            "type": "integer"
          }
        }
      },
      "AbortChunkHelperAPIresponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "Abort": {
              "type": "string",
              "default": "Success"
            }
          }
        }
      },
      "AssignAgentHelperAPI": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "integer"
          },
          "taskId": {
            "type": "integer"
          }
        }
      },
      "AssignAgentHelperAPIresponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "Assign": {
              "type": "string",
              "default": "Success"
            }
          }
        }
      },
      "ChangeOwnPasswordHelperAPI": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          },
          "confirmPassword": {
            "type": "string"
          }
        }
      },
      "ChangeOwnPasswordHelperAPIresponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "Change password": {
              "type": "string",
              "default": "Password succesfully updated!"
            }
          }
        }
      },
      "CreateSupertaskHelperAPI": {
        "type": "object",
        "properties": {
          "supertaskTemplateId": {
            "type": "integer"
          },
          "hashlistId": {
            "type": "integer"
          },
          "crackerVersionId": {
            "type": "integer"
          }
        }
      },
      "CreateSuperHashlistHelperAPI": {
        "type": "object",
        "properties": {
          "hashlistIds": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ExportCrackedHashesHelperAPI": {
        "type": "object",
        "properties": {
          "hashlistId": {
            "type": "integer"
          }
        }
      },
      "ExportLeftHashesHelperAPI": {
        "type": "object",
        "properties": {
          "hashlistId": {
            "type": "integer"
          }
        }
      },
      "ExportWordlistHelperAPI": {
        "type": "object",
        "properties": {
          "hashlistId": {
            "type": "integer"
          }
        }
      },
      "GetAccessGroupsHelperAPI": {
        "type": "object",
        "properties": []
      },
      "GetFileHelperAPI": {
        "type": "object",
        "properties": []
      },
      "GetUserPermissionHelperAPI": {
        "type": "object",
        "properties": []
      },
      "ImportCrackedHashesHelperAPI": {
        "type": "object",
        "properties": {
          "hashlistId": {
            "type": "integer"
          },
          "sourceData": {
            "type": "string"
          },
          "separator": {
            "type": "string"
          }
        }
      },
      "ImportCrackedHashesHelperAPIresponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "totalLines": {
              "type": "string",
              "default": 100
            },
            "newCracked": {
              "type": "string",
              "default": 5
            },
            "alreadyCracked": {
              "type": "string",
              "default": 2
            },
            "invalid": {
              "type": "string",
              "default": 1
            },
            "notFound": {
              "type": "string",
              "default": 1
            },
            "processTime": {
              "type": "string",
              "default": 60
            },
            "tooLongPlaintexts": {
              "type": "string",
              "default": 4
            }
          }
        }
      },
      "ImportFileHelperAPI": {
        "type": "object",
        "properties": []
      },
      "PurgeTaskHelperAPI": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer"
          }
        }
      },
      "PurgeTaskHelperAPIresponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "Purge": {
              "type": "string",
              "default": "Success"
            }
          }
        }
      },
      "RecountFileLinesHelperAPI": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "integer"
          }
        }
      },
      "ResetChunkHelperAPI": {
        "type": "object",
        "properties": {
          "chunkId": {
            "type": "integer"
          }
        }
      },
      "ResetChunkHelperAPIresponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "Reset": {
              "type": "string",
              "default": "Success"
            }
          }
        }
      },
      "ResetUserPasswordHelperAPI": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "ResetUserPasswordHelperAPIresponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "Reset": {
              "type": "string",
              "default": "Success"
            }
          }
        }
      },
      "SetUserPasswordHelperAPI": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "SetUserPasswordHelperAPIresponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "Set password": {
              "type": "string",
              "default": "Success"
            }
          }
        }
      },
      "UnassignAgentHelperAPI": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "integer"
          }
        }
      },
      "UnassignAgentHelperAPIresponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "Unassign": {
              "type": "string",
              "default": "Success"
            }
          }
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "expires": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "TokenRequest": {
        "type": "array",
        "items": {
          "type": "string",
          "example": "role.all"
        }
      },
      "ObjectRequest": {
        "type": "object",
        "properties": {
          "expand": {
            "type": "string"
          },
          "expires": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "ObjectListRequest": {
        "type": "object",
        "properties": {
          "expand": {
            "type": "string"
          },
          "filter": {
            "type": "array",
            "items": {
              "type": "string",
              "example": ""
            }
          }
        },
        "additionalProperties": false
      },
      "UnassignAgentHelperAPIResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Agent successfully unassigned"
          }
        }
      },
      "AssignAgentHelperAPIResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "AssignAgentHelperAPIResponse message"
          }
        }
      },
      "ImportCrackedHashesHelperAPIResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "ImportCrackedHashesHelperAPIResponse message"
          }
        }
      },
      "AbortChunkHelperAPIResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "AbortChunkHelperAPIResponse message"
          }
        }
      },
      "ResetUserPasswordHelperAPIResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "ResetUserPasswordHelperAPIResponse message"
          }
        }
      },
      "PurgeTaskHelperAPIResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "PurgeTaskHelperAPIResponse message"
          }
        }
      },
      "ResetChunkHelperAPIResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "ResetChunkHelperAPIResponse message"
          }
        }
      },
      "SetUserPasswordHelperAPIResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "SetUserPasswordHelperAPIResponse message"
          }
        }
      },
      "ChangeOwnPasswordHelperAPIResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "ChangeOwnPasswordHelperAPIResponse message"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme.",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "scopes": [
          "permAccessGroupCreate",
          "permAccessGroupDelete",
          "permAccessGroupRead",
          "permAccessGroupUpdate",
          "permAgentAssignmentCreate",
          "permAgentAssignmentDelete",
          "permAgentAssignmentRead",
          "permAgentAssignmentUpdate",
          "permAgentBinaryCreate",
          "permAgentBinaryDelete",
          "permAgentBinaryRead",
          "permAgentBinaryUpdate",
          "permAgentCreate",
          "permAgentDelete",
          "permAgentErrorDelete",
          "permAgentErrorRead",
          "permAgentErrorUpdate",
          "permAgentRead",
          "permAgentStatDelete",
          "permAgentStatRead",
          "permAgentUpdate",
          "permChunkRead",
          "permChunkUpdate",
          "permConfigRead",
          "permConfigSectionRead",
          "permConfigUpdate",
          "permCrackerBinaryCreate",
          "permCrackerBinaryDelete",
          "permCrackerBinaryRead",
          "permCrackerBinaryTypeCreate",
          "permCrackerBinaryTypeDelete",
          "permCrackerBinaryTypeRead",
          "permCrackerBinaryTypeUpdate",
          "permCrackerBinaryUpdate",
          "permFileCreate",
          "permFileDelete",
          "permFileRead",
          "permFileUpdate",
          "permHashRead",
          "permHashTypeCreate",
          "permHashTypeDelete",
          "permHashTypeRead",
          "permHashTypeUpdate",
          "permHashUpdate",
          "permHashlistCreate",
          "permHashlistDelete",
          "permHashlistRead",
          "permHashlistUpdate",
          "permHealthCheckAgentRead",
          "permHealthCheckAgentUpdate",
          "permHealthCheckCreate",
          "permHealthCheckDelete",
          "permHealthCheckRead",
          "permHealthCheckUpdate",
          "permLogEntryCreate",
          "permLogEntryDelete",
          "permLogEntryRead",
          "permLogEntryUpdate",
          "permNotificationSettingCreate",
          "permNotificationSettingDelete",
          "permNotificationSettingRead",
          "permNotificationSettingUpdate",
          "permPreprocessorCreate",
          "permPreprocessorDelete",
          "permPreprocessorRead",
          "permPreprocessorUpdate",
          "permPretaskCreate",
          "permPretaskDelete",
          "permPretaskRead",
          "permPretaskUpdate",
          "permRegVoucherCreate",
          "permRegVoucherDelete",
          "permRegVoucherRead",
          "permRegVoucherUpdate",
          "permRightGroupCreate",
          "permRightGroupDelete",
          "permRightGroupRead",
          "permRightGroupUpdate",
          "permSpeedRead",
          "permSpeedUpdate",
          "permSupertaskCreate",
          "permSupertaskDelete",
          "permSupertaskRead",
          "permSupertaskUpdate",
          "permTaskCreate",
          "permTaskDelete",
          "permTaskRead",
          "permTaskUpdate",
          "permTaskWrapperCreate",
          "permTaskWrapperDelete",
          "permTaskWrapperRead",
          "permTaskWrapperUpdate",
          "permUserCreate",
          "permUserDelete",
          "permUserRead",
          "permUserUpdate"
        ]
      },
      "basicAuth": {
        "type": "http",
        "description": "Basic Authorization header.",
        "scheme": "basic"
      }
    }
  }
}