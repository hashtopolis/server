{
    "openapi": "3.0.1",
    "info": {
        "title": "Hashtopolis API",
        "version": "v2"
    },
    "servers": [
        {
            "url": "/"
        }
    ],
    "paths": {
        "/api/v2/ui/accessgroups": {
            "get": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AccessGroupResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: userMembers,agentMembers"
                    }
                ]
            },
            "post": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessGroupPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccessGroupCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/accessgroups/count": {
            "get": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AccessGroupResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: userMembers,agentMembers"
                    }
                ]
            }
        },
        "/api/v2/ui/accessgroups/{id:[0-9]+}/{relation:userMembers}": {
            "get": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessGroupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/accessgroups/{id:[0-9]+}/relationships/{relation:userMembers}": {
            "get": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessGroupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessGroupPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccessGroupPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/accessgroups/{id:[0-9]+}/{relation:agentMembers}": {
            "get": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessGroupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/accessgroups/{id:[0-9]+}/relationships/{relation:agentMembers}": {
            "get": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessGroupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessGroupPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccessGroupPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/accessgroups/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessGroupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessGroupPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccessGroupPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "AccessGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAccessGroupDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/agentassignments": {
            "get": {
                "tags": [
                    "Assignments"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AssignmentResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentAssignmentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: agent,task"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Assignments"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentAssignmentCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/agentassignments/count": {
            "get": {
                "tags": [
                    "Assignments"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AssignmentResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentAssignmentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: agent,task"
                    }
                ]
            }
        },
        "/api/v2/ui/agentassignments/{id:[0-9]+}/{relation:agent}": {
            "get": {
                "tags": [
                    "Assignments"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentAssignmentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/agentassignments/{id:[0-9]+}/relationships/{relation:agent}": {
            "get": {
                "tags": [
                    "Assignments"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentAssignmentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Assignments"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentAssignmentUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/agentassignments/{id:[0-9]+}/{relation:task}": {
            "get": {
                "tags": [
                    "Assignments"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentAssignmentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/agentassignments/{id:[0-9]+}/relationships/{relation:task}": {
            "get": {
                "tags": [
                    "Assignments"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentAssignmentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Assignments"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentAssignmentUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/agentassignments/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "Assignments"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentAssignmentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Assignments"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentAssignmentDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/agentbinaries": {
            "get": {
                "tags": [
                    "AgentBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AgentBinaryResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentBinaryRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            },
            "post": {
                "tags": [
                    "AgentBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentBinaryPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentBinaryCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentBinaryCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/agentbinaries/count": {
            "get": {
                "tags": [
                    "AgentBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AgentBinaryResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentBinaryRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            }
        },
        "/api/v2/ui/agentbinaries/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "AgentBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentBinaryResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentBinaryRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "AgentBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentBinaryPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentBinaryUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentBinaryPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "AgentBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentBinaryDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/agents": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AgentResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: accessGroups,agentStats"
                    }
                ]
            }
        },
        "/api/v2/ui/agents/count": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AgentResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: accessGroups,agentStats"
                    }
                ]
            }
        },
        "/api/v2/ui/agents/{id:[0-9]+}/{relation:accessGroups}": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/agents/{id:[0-9]+}/relationships/{relation:accessGroups}": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/agents/{id:[0-9]+}/{relation:agentStats}": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/agents/{id:[0-9]+}/relationships/{relation:agentStats}": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/agents/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Agents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/agentstats": {
            "get": {
                "tags": [
                    "AgentStats"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AgentStatResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentStatRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            }
        },
        "/api/v2/ui/agentstats/count": {
            "get": {
                "tags": [
                    "AgentStats"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AgentStatResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentStatRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            }
        },
        "/api/v2/ui/agentstats/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "AgentStats"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentStatResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentStatRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "AgentStats"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permAgentStatDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/chunks": {
            "get": {
                "tags": [
                    "Chunks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ChunkResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permChunkRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: agent,task"
                    }
                ]
            }
        },
        "/api/v2/ui/chunks/count": {
            "get": {
                "tags": [
                    "Chunks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ChunkResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permChunkRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: agent,task"
                    }
                ]
            }
        },
        "/api/v2/ui/chunks/{id:[0-9]+}/{relation:agent}": {
            "get": {
                "tags": [
                    "Chunks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChunkResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permChunkRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/chunks/{id:[0-9]+}/relationships/{relation:agent}": {
            "get": {
                "tags": [
                    "Chunks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChunkResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permChunkRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Chunks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChunkPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permChunkUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChunkPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/chunks/{id:[0-9]+}/{relation:task}": {
            "get": {
                "tags": [
                    "Chunks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChunkResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permChunkRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/chunks/{id:[0-9]+}/relationships/{relation:task}": {
            "get": {
                "tags": [
                    "Chunks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChunkResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permChunkRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Chunks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChunkPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permChunkUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChunkPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/chunks/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "Chunks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChunkResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permChunkRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/configs": {
            "get": {
                "tags": [
                    "Configs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ConfigResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permConfigRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: configSection"
                    }
                ]
            }
        },
        "/api/v2/ui/configs/count": {
            "get": {
                "tags": [
                    "Configs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ConfigResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permConfigRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: configSection"
                    }
                ]
            }
        },
        "/api/v2/ui/configs/{id:[0-9]+}/{relation:configSection}": {
            "get": {
                "tags": [
                    "Configs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permConfigRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/configs/{id:[0-9]+}/relationships/{relation:configSection}": {
            "get": {
                "tags": [
                    "Configs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permConfigRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Configs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permConfigUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/configs/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "Configs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permConfigRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Configs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permConfigUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/configsections": {
            "get": {
                "tags": [
                    "ConfigSections"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ConfigSectionResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permConfigSectionRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            }
        },
        "/api/v2/ui/configsections/count": {
            "get": {
                "tags": [
                    "ConfigSections"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ConfigSectionResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permConfigSectionRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            }
        },
        "/api/v2/ui/configsections/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "ConfigSections"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigSectionResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permConfigSectionRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/crackers": {
            "get": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CrackerBinaryResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: crackerBinaryType,tasks"
                    }
                ]
            },
            "post": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CrackerBinaryCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/crackers/count": {
            "get": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CrackerBinaryResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: crackerBinaryType,tasks"
                    }
                ]
            }
        },
        "/api/v2/ui/crackers/{id:[0-9]+}/{relation:crackerBinaryType}": {
            "get": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/crackers/{id:[0-9]+}/relationships/{relation:crackerBinaryType}": {
            "get": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CrackerBinaryPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/crackers/{id:[0-9]+}/{relation:tasks}": {
            "get": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/crackers/{id:[0-9]+}/relationships/{relation:tasks}": {
            "get": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CrackerBinaryPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/crackers/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CrackerBinaryPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "CrackerBinarys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/crackertypes": {
            "get": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: crackerVersions,tasks"
                    }
                ]
            },
            "post": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryTypePostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CrackerBinaryTypeCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/crackertypes/count": {
            "get": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: crackerVersions,tasks"
                    }
                ]
            }
        },
        "/api/v2/ui/crackertypes/{id:[0-9]+}/{relation:crackerVersions}": {
            "get": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/crackertypes/{id:[0-9]+}/relationships/{relation:crackerVersions}": {
            "get": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryTypePostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CrackerBinaryTypePatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/crackertypes/{id:[0-9]+}/{relation:tasks}": {
            "get": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/crackertypes/{id:[0-9]+}/relationships/{relation:tasks}": {
            "get": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryTypePostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CrackerBinaryTypePatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/crackertypes/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CrackerBinaryTypePostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CrackerBinaryTypePatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "CrackerBinaryTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permCrackerBinaryTypeDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/files": {
            "get": {
                "tags": [
                    "Files"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FileResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permFileRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: accessGroup"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Files"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilePostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permFileCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/files/count": {
            "get": {
                "tags": [
                    "Files"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FileResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permFileRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: accessGroup"
                    }
                ]
            }
        },
        "/api/v2/ui/files/{id:[0-9]+}/{relation:accessGroup}": {
            "get": {
                "tags": [
                    "Files"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permFileRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/files/{id:[0-9]+}/relationships/{relation:accessGroup}": {
            "get": {
                "tags": [
                    "Files"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permFileRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Files"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilePostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permFileUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FilePatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/files/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "Files"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permFileRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Files"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilePostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permFileUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FilePatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Files"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permFileDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/globalpermissiongroups": {
            "get": {
                "tags": [
                    "RightGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RightGroupResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRightGroupRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: userMembers"
                    }
                ]
            },
            "post": {
                "tags": [
                    "RightGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RightGroupPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRightGroupCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RightGroupCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/globalpermissiongroups/count": {
            "get": {
                "tags": [
                    "RightGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RightGroupResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRightGroupRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: userMembers"
                    }
                ]
            }
        },
        "/api/v2/ui/globalpermissiongroups/{id:[0-9]+}/{relation:userMembers}": {
            "get": {
                "tags": [
                    "RightGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RightGroupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRightGroupRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/globalpermissiongroups/{id:[0-9]+}/relationships/{relation:userMembers}": {
            "get": {
                "tags": [
                    "RightGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RightGroupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRightGroupRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "RightGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RightGroupPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRightGroupUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RightGroupPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "RightGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRightGroupCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "RightGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRightGroupDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/globalpermissiongroups/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "RightGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RightGroupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRightGroupRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "RightGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RightGroupPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRightGroupUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RightGroupPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "RightGroups"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRightGroupDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/hashes": {
            "get": {
                "tags": [
                    "Hashs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HashResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: chunk,hashlist"
                    }
                ]
            }
        },
        "/api/v2/ui/hashes/count": {
            "get": {
                "tags": [
                    "Hashs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HashResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: chunk,hashlist"
                    }
                ]
            }
        },
        "/api/v2/ui/hashes/{id:[0-9]+}/{relation:chunk}": {
            "get": {
                "tags": [
                    "Hashs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/hashes/{id:[0-9]+}/relationships/{relation:chunk}": {
            "get": {
                "tags": [
                    "Hashs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Hashs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HashPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/hashes/{id:[0-9]+}/{relation:hashlist}": {
            "get": {
                "tags": [
                    "Hashs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/hashes/{id:[0-9]+}/relationships/{relation:hashlist}": {
            "get": {
                "tags": [
                    "Hashs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Hashs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HashPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/hashes/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "Hashs"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/hashlists": {
            "get": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HashlistResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: accessGroup,hashType,hashes,hashlists,tasks"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HashlistCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/hashlists/count": {
            "get": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HashlistResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: accessGroup,hashType,hashes,hashlists,tasks"
                    }
                ]
            }
        },
        "/api/v2/ui/hashlists/{id:[0-9]+}/{relation:accessGroup}": {
            "get": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/hashlists/{id:[0-9]+}/relationships/{relation:accessGroup}": {
            "get": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HashlistPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/hashlists/{id:[0-9]+}/{relation:hashType}": {
            "get": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/hashlists/{id:[0-9]+}/relationships/{relation:hashType}": {
            "get": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HashlistPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/hashlists/{id:[0-9]+}/{relation:hashes}": {
            "get": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/hashlists/{id:[0-9]+}/relationships/{relation:hashes}": {
            "get": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HashlistPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/hashlists/{id:[0-9]+}/{relation:hashlists}": {
            "get": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/hashlists/{id:[0-9]+}/relationships/{relation:hashlists}": {
            "get": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HashlistPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/hashlists/{id:[0-9]+}/{relation:tasks}": {
            "get": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/hashlists/{id:[0-9]+}/relationships/{relation:tasks}": {
            "get": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HashlistPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/hashlists/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashlistPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HashlistPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Hashlists"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashlistDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/hashtypes": {
            "get": {
                "tags": [
                    "HashTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HashTypeResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashTypeRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            },
            "post": {
                "tags": [
                    "HashTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashTypePostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashTypeCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HashTypeCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/hashtypes/count": {
            "get": {
                "tags": [
                    "HashTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HashTypeResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashTypeRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            }
        },
        "/api/v2/ui/hashtypes/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "HashTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashTypeResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashTypeRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "HashTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashTypePostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashTypeUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HashTypePatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "HashTypes"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHashTypeDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/healthcheckagents": {
            "get": {
                "tags": [
                    "HealthCheckAgents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HealthCheckAgentResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: agent,healthCheck"
                    }
                ]
            }
        },
        "/api/v2/ui/healthcheckagents/count": {
            "get": {
                "tags": [
                    "HealthCheckAgents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HealthCheckAgentResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: agent,healthCheck"
                    }
                ]
            }
        },
        "/api/v2/ui/healthcheckagents/{id:[0-9]+}/{relation:agent}": {
            "get": {
                "tags": [
                    "HealthCheckAgents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckAgentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/healthcheckagents/{id:[0-9]+}/relationships/{relation:agent}": {
            "get": {
                "tags": [
                    "HealthCheckAgents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckAgentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "HealthCheckAgents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckAgentPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckAgentUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HealthCheckAgentPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/healthcheckagents/{id:[0-9]+}/{relation:healthCheck}": {
            "get": {
                "tags": [
                    "HealthCheckAgents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckAgentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/healthcheckagents/{id:[0-9]+}/relationships/{relation:healthCheck}": {
            "get": {
                "tags": [
                    "HealthCheckAgents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckAgentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "HealthCheckAgents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckAgentPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckAgentUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HealthCheckAgentPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/healthcheckagents/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "HealthCheckAgents"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckAgentResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckAgentRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/healthchecks": {
            "get": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HealthCheckResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: crackerBinary,healthCheckAgents"
                    }
                ]
            },
            "post": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HealthCheckCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/healthchecks/count": {
            "get": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HealthCheckResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: crackerBinary,healthCheckAgents"
                    }
                ]
            }
        },
        "/api/v2/ui/healthchecks/{id:[0-9]+}/{relation:crackerBinary}": {
            "get": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/healthchecks/{id:[0-9]+}/relationships/{relation:crackerBinary}": {
            "get": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HealthCheckPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/healthchecks/{id:[0-9]+}/{relation:healthCheckAgents}": {
            "get": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/healthchecks/{id:[0-9]+}/relationships/{relation:healthCheckAgents}": {
            "get": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HealthCheckPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/healthchecks/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HealthCheckPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "HealthChecks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permHealthCheckDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/logentries": {
            "get": {
                "tags": [
                    "LogEntrys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LogEntryResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permLogEntryRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            },
            "post": {
                "tags": [
                    "LogEntrys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LogEntryPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permLogEntryCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LogEntryCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/logentries/count": {
            "get": {
                "tags": [
                    "LogEntrys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LogEntryResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permLogEntryRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            }
        },
        "/api/v2/ui/logentries/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "LogEntrys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LogEntryResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permLogEntryRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "LogEntrys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LogEntryPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permLogEntryUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LogEntryPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "LogEntrys"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permLogEntryDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/notifications": {
            "get": {
                "tags": [
                    "NotificationSettings"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/NotificationSettingResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permNotificationSettingRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: user"
                    }
                ]
            },
            "post": {
                "tags": [
                    "NotificationSettings"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationSettingPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permNotificationSettingCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationSettingCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/notifications/count": {
            "get": {
                "tags": [
                    "NotificationSettings"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/NotificationSettingResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permNotificationSettingRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: user"
                    }
                ]
            }
        },
        "/api/v2/ui/notifications/{id:[0-9]+}/{relation:user}": {
            "get": {
                "tags": [
                    "NotificationSettings"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationSettingResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permNotificationSettingRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/notifications/{id:[0-9]+}/relationships/{relation:user}": {
            "get": {
                "tags": [
                    "NotificationSettings"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationSettingResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permNotificationSettingRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "NotificationSettings"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationSettingPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permNotificationSettingUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationSettingPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/notifications/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "NotificationSettings"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationSettingResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permNotificationSettingRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "NotificationSettings"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationSettingPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permNotificationSettingUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationSettingPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "NotificationSettings"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permNotificationSettingDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/preprocessors": {
            "get": {
                "tags": [
                    "Preprocessors"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PreprocessorResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPreprocessorRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            },
            "post": {
                "tags": [
                    "Preprocessors"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreprocessorPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPreprocessorCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PreprocessorCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/preprocessors/count": {
            "get": {
                "tags": [
                    "Preprocessors"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PreprocessorResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPreprocessorRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            }
        },
        "/api/v2/ui/preprocessors/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "Preprocessors"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreprocessorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPreprocessorRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Preprocessors"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreprocessorPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPreprocessorUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PreprocessorPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Preprocessors"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPreprocessorDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/pretasks": {
            "get": {
                "tags": [
                    "Pretasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PretaskResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPretaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: pretaskFiles"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Pretasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PretaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPretaskCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PretaskCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/pretasks/count": {
            "get": {
                "tags": [
                    "Pretasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PretaskResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPretaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: pretaskFiles"
                    }
                ]
            }
        },
        "/api/v2/ui/pretasks/{id:[0-9]+}/{relation:pretaskFiles}": {
            "get": {
                "tags": [
                    "Pretasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PretaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPretaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/pretasks/{id:[0-9]+}/relationships/{relation:pretaskFiles}": {
            "get": {
                "tags": [
                    "Pretasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PretaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPretaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Pretasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PretaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPretaskUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PretaskPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "Pretasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPretaskCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Pretasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPretaskDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/pretasks/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "Pretasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PretaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPretaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Pretasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PretaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPretaskUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PretaskPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Pretasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permPretaskDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/speeds": {
            "get": {
                "tags": [
                    "Speeds"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SpeedResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSpeedRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: agent,task"
                    }
                ]
            }
        },
        "/api/v2/ui/speeds/count": {
            "get": {
                "tags": [
                    "Speeds"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SpeedResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSpeedRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: agent,task"
                    }
                ]
            }
        },
        "/api/v2/ui/speeds/{id:[0-9]+}/{relation:agent}": {
            "get": {
                "tags": [
                    "Speeds"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpeedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSpeedRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/speeds/{id:[0-9]+}/relationships/{relation:agent}": {
            "get": {
                "tags": [
                    "Speeds"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpeedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSpeedRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Speeds"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpeedPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSpeedUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SpeedPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/speeds/{id:[0-9]+}/{relation:task}": {
            "get": {
                "tags": [
                    "Speeds"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpeedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSpeedRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/speeds/{id:[0-9]+}/relationships/{relation:task}": {
            "get": {
                "tags": [
                    "Speeds"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpeedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSpeedRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Speeds"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpeedPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSpeedUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SpeedPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/speeds/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "Speeds"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpeedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSpeedRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/supertasks": {
            "get": {
                "tags": [
                    "Supertasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SupertaskResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSupertaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: pretasks"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Supertasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupertaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSupertaskCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SupertaskCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/supertasks/count": {
            "get": {
                "tags": [
                    "Supertasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SupertaskResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSupertaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: pretasks"
                    }
                ]
            }
        },
        "/api/v2/ui/supertasks/{id:[0-9]+}/{relation:pretasks}": {
            "get": {
                "tags": [
                    "Supertasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupertaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSupertaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/supertasks/{id:[0-9]+}/relationships/{relation:pretasks}": {
            "get": {
                "tags": [
                    "Supertasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupertaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSupertaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Supertasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupertaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSupertaskUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SupertaskPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "Supertasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSupertaskCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Supertasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSupertaskDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/supertasks/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "Supertasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupertaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSupertaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Supertasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupertaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSupertaskUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SupertaskPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Supertasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permSupertaskDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaskResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: crackerBinary,crackerBinaryType,hashlist,assignedAgents,files,speeds"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/tasks/count": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaskResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: crackerBinary,crackerBinaryType,hashlist,assignedAgents,files,speeds"
                    }
                ]
            }
        },
        "/api/v2/ui/tasks/{id:[0-9]+}/{relation:crackerBinary}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/tasks/{id:[0-9]+}/relationships/{relation:crackerBinary}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/tasks/{id:[0-9]+}/{relation:crackerBinaryType}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/tasks/{id:[0-9]+}/relationships/{relation:crackerBinaryType}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/tasks/{id:[0-9]+}/{relation:hashlist}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/tasks/{id:[0-9]+}/relationships/{relation:hashlist}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/tasks/{id:[0-9]+}/{relation:assignedAgents}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/tasks/{id:[0-9]+}/relationships/{relation:assignedAgents}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/tasks/{id:[0-9]+}/{relation:files}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/tasks/{id:[0-9]+}/relationships/{relation:files}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/tasks/{id:[0-9]+}/{relation:speeds}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/tasks/{id:[0-9]+}/relationships/{relation:speeds}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/tasks/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/taskwrappers": {
            "get": {
                "tags": [
                    "TaskWrappers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaskWrapperResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskWrapperRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: accessGroup,tasks"
                    }
                ]
            }
        },
        "/api/v2/ui/taskwrappers/count": {
            "get": {
                "tags": [
                    "TaskWrappers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaskWrapperResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskWrapperRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: accessGroup,tasks"
                    }
                ]
            }
        },
        "/api/v2/ui/taskwrappers/{id:[0-9]+}/{relation:accessGroup}": {
            "get": {
                "tags": [
                    "TaskWrappers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskWrapperResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskWrapperRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/taskwrappers/{id:[0-9]+}/relationships/{relation:accessGroup}": {
            "get": {
                "tags": [
                    "TaskWrappers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskWrapperResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskWrapperRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "TaskWrappers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskWrapperPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskWrapperUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskWrapperPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/taskwrappers/{id:[0-9]+}/{relation:tasks}": {
            "get": {
                "tags": [
                    "TaskWrappers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskWrapperResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskWrapperRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/taskwrappers/{id:[0-9]+}/relationships/{relation:tasks}": {
            "get": {
                "tags": [
                    "TaskWrappers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskWrapperResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskWrapperRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "TaskWrappers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskWrapperPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskWrapperUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskWrapperPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "TaskWrappers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskWrapperCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "TaskWrappers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskWrapperDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/taskwrappers/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "TaskWrappers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskWrapperResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskWrapperRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "TaskWrappers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskWrapperPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskWrapperUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskWrapperPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "TaskWrappers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permTaskWrapperDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: globalPermissionGroup,accessGroups"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/users/count": {
            "get": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: globalPermissionGroup,accessGroups"
                    }
                ]
            }
        },
        "/api/v2/ui/users/{id:[0-9]+}/{relation:globalPermissionGroup}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/users/{id:[0-9]+}/relationships/{relation:globalPermissionGroup}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPatch"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/users/{id:[0-9]+}/{relation:accessGroups}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            }
        },
        "/api/v2/ui/users/{id:[0-9]+}/relationships/{relation:accessGroups}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request for  for a to-one relationship link. Returns the resource record of the object that is part of the specified relation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserUpdate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully created"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserCreate"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/users/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permUserDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/vouchers": {
            "get": {
                "tags": [
                    "RegVouchers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RegVoucherResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRegVoucherRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            },
            "post": {
                "tags": [
                    "RegVouchers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegVoucherPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRegVoucherCreate"
                            ]
                        ]
                    }
                ],
                "description": "POST request to create a new object. The request must contain the resource record as data with the attributes of the new object.To add relationships, a relationships object can be added with the resource records of the relations that are part of this object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegVoucherCreate"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/ui/vouchers/count": {
            "get": {
                "tags": [
                    "RegVouchers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RegVoucherResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRegVoucherRead"
                            ]
                        ]
                    }
                ],
                "description": "GET many request to retrieve multiple objects.",
                "parameters": [
                    {
                        "name": "page[after]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data after the value provided"
                    },
                    {
                        "name": "page[before]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 0,
                        "description": "Pointer to paginate to retrieve the data before the value provided"
                    },
                    {
                        "name": "page[size]",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "example": 100,
                        "description": "Amout of data to retrieve inside a single page"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "style": "deepobject",
                        "explode": true,
                        "schema": {
                            "type": "object"
                        },
                        "description": "Filters results using a query",
                        "example": "\"filter[hashlistId__gt]\": 200"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include, comma seperated. Possible options: "
                    }
                ]
            }
        },
        "/api/v2/ui/vouchers/{id:[0-9]+}": {
            "get": {
                "tags": [
                    "RegVouchers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegVoucherResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRegVoucherRead"
                            ]
                        ]
                    }
                ],
                "description": "GET request to retrieve a single object.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Items to include. Comma seperated"
                    }
                ]
            },
            "patch": {
                "tags": [
                    "RegVouchers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegVoucherPostPatchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRegVoucherUpdate"
                            ]
                        ]
                    }
                ],
                "description": "PATCH request to update attributes of a single object.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegVoucherPatch"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "delete": {
                "tags": [
                    "RegVouchers"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "successfully deleted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": [
                            [
                                "permRegVoucherDelete"
                            ]
                        ]
                    }
                ],
                "description": "",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": []
                    }
                },
                "parameters": []
            }
        },
        "/api/v2/auth/token": {
            "post": {
                "tags": [
                    "Login"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ListResponse": {
                "type": "object",
                "properties": {
                    "expand": {
                        "type": "string",
                        "example": "hashlist"
                    },
                    "page[after]": {
                        "type": "integer",
                        "example": 0
                    },
                    "page[before]": {
                        "type": "integer",
                        "example": 0
                    },
                    "page[size]": {
                        "type": "integer",
                        "example": 100
                    }
                }
            },
            "ErrorResponse": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "about=>blank"
                    },
                    "type": {
                        "type": "string",
                        "example": "Error details here"
                    },
                    "status": {
                        "type": "integer",
                        "example": 400
                    }
                }
            },
            "NotFoundResponse": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "404 Not Found"
                    },
                    "exception": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "example": "Slim\\Exception\\HttpNotFoundException"
                            },
                            "code": {
                                "type": "integer",
                                "example": 404
                            },
                            "message": {
                                "type": "string",
                                "example": "Not Found"
                            },
                            "file": {
                                "type": "string",
                                "example": "../hashtopolis/server/vendor/slim/slim/Slim/Middleware/RoutingMiddleware.php"
                            },
                            "line": {
                                "type": "integer",
                                "example": 91
                            }
                        }
                    }
                }
            },
            "AccessGroupCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "groupName": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AccessGroupPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "groupName": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AccessGroupResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/accessgroups?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/accessgroups?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/accessgroups?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/accessgroups?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/accessgroups?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "AccessGroup"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "groupName": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "agentMembers": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/accessgroups/relationships/agentMembers"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/accessgroups/agentMembers"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "userMembers": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/accessgroups/relationships/userMembers"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/accessgroups/userMembers"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "userMembers"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "email": {
                                                    "type": "string"
                                                },
                                                "passwordHash": {
                                                    "type": "string"
                                                },
                                                "passwordSalt": {
                                                    "type": "string"
                                                },
                                                "isValid": {
                                                    "type": "boolean"
                                                },
                                                "isComputedPassword": {
                                                    "type": "boolean"
                                                },
                                                "lastLoginDate": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "registeredSince": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "sessionLifetime": {
                                                    "type": "integer"
                                                },
                                                "globalPermissionGroupId": {
                                                    "type": "integer"
                                                },
                                                "yubikey": {
                                                    "type": "string"
                                                },
                                                "otp1": {
                                                    "type": "string"
                                                },
                                                "otp2": {
                                                    "type": "string"
                                                },
                                                "otp3": {
                                                    "type": "string"
                                                },
                                                "otp4": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "agentMembers"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "agentName": {
                                                    "type": "string"
                                                },
                                                "uid": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "type": "integer"
                                                },
                                                "devices": {
                                                    "type": "string"
                                                },
                                                "cmdPars": {
                                                    "type": "string"
                                                },
                                                "ignoreErrors": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2
                                                    ]
                                                },
                                                "isActive": {
                                                    "type": "boolean"
                                                },
                                                "isTrusted": {
                                                    "type": "boolean"
                                                },
                                                "token": {
                                                    "type": "string"
                                                },
                                                "lastAct": {
                                                    "type": "string"
                                                },
                                                "lastTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "lastIp": {
                                                    "type": "string"
                                                },
                                                "userId": {
                                                    "type": "integer"
                                                },
                                                "cpuOnly": {
                                                    "type": "boolean"
                                                },
                                                "clientSignature": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "AccessGroupSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "AccessGroup"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "groupName": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "agentMembers": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/accessgroups/relationships/agentMembers"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/accessgroups/agentMembers"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "userMembers": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/accessgroups/relationships/userMembers"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/accessgroups/userMembers"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "userMembers"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "email": {
                                                    "type": "string"
                                                },
                                                "passwordHash": {
                                                    "type": "string"
                                                },
                                                "passwordSalt": {
                                                    "type": "string"
                                                },
                                                "isValid": {
                                                    "type": "boolean"
                                                },
                                                "isComputedPassword": {
                                                    "type": "boolean"
                                                },
                                                "lastLoginDate": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "registeredSince": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "sessionLifetime": {
                                                    "type": "integer"
                                                },
                                                "globalPermissionGroupId": {
                                                    "type": "integer"
                                                },
                                                "yubikey": {
                                                    "type": "string"
                                                },
                                                "otp1": {
                                                    "type": "string"
                                                },
                                                "otp2": {
                                                    "type": "string"
                                                },
                                                "otp3": {
                                                    "type": "string"
                                                },
                                                "otp4": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "agentMembers"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "agentName": {
                                                    "type": "string"
                                                },
                                                "uid": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "type": "integer"
                                                },
                                                "devices": {
                                                    "type": "string"
                                                },
                                                "cmdPars": {
                                                    "type": "string"
                                                },
                                                "ignoreErrors": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2
                                                    ]
                                                },
                                                "isActive": {
                                                    "type": "boolean"
                                                },
                                                "isTrusted": {
                                                    "type": "boolean"
                                                },
                                                "token": {
                                                    "type": "string"
                                                },
                                                "lastAct": {
                                                    "type": "string"
                                                },
                                                "lastTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "lastIp": {
                                                    "type": "string"
                                                },
                                                "userId": {
                                                    "type": "integer"
                                                },
                                                "cpuOnly": {
                                                    "type": "boolean"
                                                },
                                                "clientSignature": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "AccessGroupPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "AccessGroup"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "groupName": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "AccessGroupListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AccessGroupResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "AssignmentCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "taskId": {
                                        "type": "integer"
                                    },
                                    "agentId": {
                                        "type": "integer"
                                    },
                                    "benchmark": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AssignmentPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "agentId": {
                                        "type": "integer"
                                    },
                                    "taskId": {
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AssignmentResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/agentassignments?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/agentassignments?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/agentassignments?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/agentassignments?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/agentassignments?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Assignment"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "taskId": {
                                "type": "integer"
                            },
                            "agentId": {
                                "type": "integer"
                            },
                            "benchmark": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "agent": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agentassignments/relationships/agent"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agentassignments/agent"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "task": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agentassignments/relationships/task"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agentassignments/task"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "agent"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "agentName": {
                                                    "type": "string"
                                                },
                                                "uid": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "type": "integer"
                                                },
                                                "devices": {
                                                    "type": "string"
                                                },
                                                "cmdPars": {
                                                    "type": "string"
                                                },
                                                "ignoreErrors": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2
                                                    ]
                                                },
                                                "isActive": {
                                                    "type": "boolean"
                                                },
                                                "isTrusted": {
                                                    "type": "boolean"
                                                },
                                                "token": {
                                                    "type": "string"
                                                },
                                                "lastAct": {
                                                    "type": "string"
                                                },
                                                "lastTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "lastIp": {
                                                    "type": "string"
                                                },
                                                "userId": {
                                                    "type": "integer"
                                                },
                                                "cpuOnly": {
                                                    "type": "boolean"
                                                },
                                                "clientSignature": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "task"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "AssignmentSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Assignment"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "taskId": {
                                "type": "integer"
                            },
                            "agentId": {
                                "type": "integer"
                            },
                            "benchmark": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "agent": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agentassignments/relationships/agent"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agentassignments/agent"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "task": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agentassignments/relationships/task"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agentassignments/task"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "agent"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "agentName": {
                                                    "type": "string"
                                                },
                                                "uid": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "type": "integer"
                                                },
                                                "devices": {
                                                    "type": "string"
                                                },
                                                "cmdPars": {
                                                    "type": "string"
                                                },
                                                "ignoreErrors": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2
                                                    ]
                                                },
                                                "isActive": {
                                                    "type": "boolean"
                                                },
                                                "isTrusted": {
                                                    "type": "boolean"
                                                },
                                                "token": {
                                                    "type": "string"
                                                },
                                                "lastAct": {
                                                    "type": "string"
                                                },
                                                "lastTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "lastIp": {
                                                    "type": "string"
                                                },
                                                "userId": {
                                                    "type": "integer"
                                                },
                                                "cpuOnly": {
                                                    "type": "boolean"
                                                },
                                                "clientSignature": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "task"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "AssignmentPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Assignment"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "taskId": {
                                "type": "integer"
                            },
                            "agentId": {
                                "type": "integer"
                            },
                            "benchmark": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "AssignmentListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AssignmentResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "AgentBinaryCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string"
                                    },
                                    "version": {
                                        "type": "string"
                                    },
                                    "operatingSystems": {
                                        "type": "string"
                                    },
                                    "filename": {
                                        "type": "string"
                                    },
                                    "updateTrack": {
                                        "type": "string"
                                    },
                                    "updateAvailable": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AgentBinaryPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "filename": {
                                        "type": "string"
                                    },
                                    "operatingSystems": {
                                        "type": "string"
                                    },
                                    "type": {
                                        "type": "string"
                                    },
                                    "updateTrack": {
                                        "type": "string"
                                    },
                                    "version": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AgentBinaryResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/agentbinaries?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/agentbinaries?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/agentbinaries?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/agentbinaries?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/agentbinaries?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "AgentBinary"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "version": {
                                "type": "string"
                            },
                            "operatingSystems": {
                                "type": "string"
                            },
                            "filename": {
                                "type": "string"
                            },
                            "updateTrack": {
                                "type": "string"
                            },
                            "updateAvailable": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "AgentBinarySingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "AgentBinary"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "version": {
                                "type": "string"
                            },
                            "operatingSystems": {
                                "type": "string"
                            },
                            "filename": {
                                "type": "string"
                            },
                            "updateTrack": {
                                "type": "string"
                            },
                            "updateAvailable": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "AgentBinaryPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "AgentBinary"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "version": {
                                "type": "string"
                            },
                            "operatingSystems": {
                                "type": "string"
                            },
                            "filename": {
                                "type": "string"
                            },
                            "updateTrack": {
                                "type": "string"
                            },
                            "updateAvailable": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "AgentBinaryListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AgentBinaryResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "AgentCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "agentName": {
                                        "type": "string"
                                    },
                                    "uid": {
                                        "type": "string"
                                    },
                                    "os": {
                                        "type": "integer"
                                    },
                                    "devices": {
                                        "type": "string"
                                    },
                                    "cmdPars": {
                                        "type": "string"
                                    },
                                    "ignoreErrors": {
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ]
                                    },
                                    "isActive": {
                                        "type": "boolean"
                                    },
                                    "isTrusted": {
                                        "type": "boolean"
                                    },
                                    "token": {
                                        "type": "string"
                                    },
                                    "lastAct": {
                                        "type": "string"
                                    },
                                    "lastTime": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "lastIp": {
                                        "type": "string"
                                    },
                                    "userId": {
                                        "type": "integer"
                                    },
                                    "cpuOnly": {
                                        "type": "boolean"
                                    },
                                    "clientSignature": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AgentPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "agentName": {
                                        "type": "string"
                                    },
                                    "clientSignature": {
                                        "type": "string"
                                    },
                                    "cmdPars": {
                                        "type": "string"
                                    },
                                    "cpuOnly": {
                                        "type": "boolean"
                                    },
                                    "devices": {
                                        "type": "string"
                                    },
                                    "ignoreErrors": {
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2
                                        ]
                                    },
                                    "isActive": {
                                        "type": "boolean"
                                    },
                                    "isTrusted": {
                                        "type": "boolean"
                                    },
                                    "os": {
                                        "type": "integer"
                                    },
                                    "token": {
                                        "type": "string"
                                    },
                                    "uid": {
                                        "type": "string"
                                    },
                                    "userId": {
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AgentResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/agents?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/agents?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/agents?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/agents?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/agents?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Agent"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "agentName": {
                                "type": "string"
                            },
                            "uid": {
                                "type": "string"
                            },
                            "os": {
                                "type": "integer"
                            },
                            "devices": {
                                "type": "string"
                            },
                            "cmdPars": {
                                "type": "string"
                            },
                            "ignoreErrors": {
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            },
                            "isActive": {
                                "type": "boolean"
                            },
                            "isTrusted": {
                                "type": "boolean"
                            },
                            "token": {
                                "type": "string"
                            },
                            "lastAct": {
                                "type": "string"
                            },
                            "lastTime": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "lastIp": {
                                "type": "string"
                            },
                            "userId": {
                                "type": "integer"
                            },
                            "cpuOnly": {
                                "type": "boolean"
                            },
                            "clientSignature": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "accessGroups": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agents/relationships/accessGroups"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agents/accessGroups"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "agentStats": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agents/relationships/agentStats"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agents/agentStats"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "accessGroups"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "groupName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "agentStats"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentStatId": {
                                                    "type": "integer"
                                                },
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "statType": {
                                                    "type": "integer"
                                                },
                                                "time": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "value": {
                                                    "type": "array"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "AgentSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Agent"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "agentName": {
                                "type": "string"
                            },
                            "uid": {
                                "type": "string"
                            },
                            "os": {
                                "type": "integer"
                            },
                            "devices": {
                                "type": "string"
                            },
                            "cmdPars": {
                                "type": "string"
                            },
                            "ignoreErrors": {
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            },
                            "isActive": {
                                "type": "boolean"
                            },
                            "isTrusted": {
                                "type": "boolean"
                            },
                            "token": {
                                "type": "string"
                            },
                            "lastAct": {
                                "type": "string"
                            },
                            "lastTime": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "lastIp": {
                                "type": "string"
                            },
                            "userId": {
                                "type": "integer"
                            },
                            "cpuOnly": {
                                "type": "boolean"
                            },
                            "clientSignature": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "accessGroups": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agents/relationships/accessGroups"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agents/accessGroups"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "agentStats": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agents/relationships/agentStats"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/agents/agentStats"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "accessGroups"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "groupName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "agentStats"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentStatId": {
                                                    "type": "integer"
                                                },
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "statType": {
                                                    "type": "integer"
                                                },
                                                "time": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "value": {
                                                    "type": "array"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "AgentPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Agent"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "agentName": {
                                "type": "string"
                            },
                            "uid": {
                                "type": "string"
                            },
                            "os": {
                                "type": "integer"
                            },
                            "devices": {
                                "type": "string"
                            },
                            "cmdPars": {
                                "type": "string"
                            },
                            "ignoreErrors": {
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2
                                ]
                            },
                            "isActive": {
                                "type": "boolean"
                            },
                            "isTrusted": {
                                "type": "boolean"
                            },
                            "token": {
                                "type": "string"
                            },
                            "lastAct": {
                                "type": "string"
                            },
                            "lastTime": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "lastIp": {
                                "type": "string"
                            },
                            "userId": {
                                "type": "integer"
                            },
                            "cpuOnly": {
                                "type": "boolean"
                            },
                            "clientSignature": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "AgentListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AgentResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "AgentStatCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "agentId": {
                                        "type": "integer"
                                    },
                                    "statType": {
                                        "type": "integer"
                                    },
                                    "time": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "value": {
                                        "type": "array"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AgentStatPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": []
                            }
                        }
                    }
                }
            },
            "AgentStatResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/agentstats?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/agentstats?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/agentstats?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/agentstats?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/agentstats?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "AgentStat"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "agentId": {
                                "type": "integer"
                            },
                            "statType": {
                                "type": "integer"
                            },
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "value": {
                                "type": "array"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "AgentStatSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "AgentStat"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "agentId": {
                                "type": "integer"
                            },
                            "statType": {
                                "type": "integer"
                            },
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "value": {
                                "type": "array"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "AgentStatPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "AgentStat"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "agentId": {
                                "type": "integer"
                            },
                            "statType": {
                                "type": "integer"
                            },
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "value": {
                                "type": "array"
                            }
                        }
                    }
                }
            },
            "AgentStatListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AgentStatResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "ChunkCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "taskId": {
                                        "type": "integer"
                                    },
                                    "skip": {
                                        "type": "integer"
                                    },
                                    "length": {
                                        "type": "integer"
                                    },
                                    "agentId": {
                                        "type": "integer"
                                    },
                                    "dispatchTime": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "solveTime": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "checkpoint": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "progress": {
                                        "type": "integer"
                                    },
                                    "state": {
                                        "type": "integer"
                                    },
                                    "cracked": {
                                        "type": "integer"
                                    },
                                    "speed": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ChunkPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": []
                            }
                        }
                    }
                }
            },
            "ChunkResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/chunks?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/chunks?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/chunks?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/chunks?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/chunks?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Chunk"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "taskId": {
                                "type": "integer"
                            },
                            "skip": {
                                "type": "integer"
                            },
                            "length": {
                                "type": "integer"
                            },
                            "agentId": {
                                "type": "integer"
                            },
                            "dispatchTime": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "solveTime": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "checkpoint": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "progress": {
                                "type": "integer"
                            },
                            "state": {
                                "type": "integer"
                            },
                            "cracked": {
                                "type": "integer"
                            },
                            "speed": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "agent": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/chunks/relationships/agent"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/chunks/agent"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "task": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/chunks/relationships/task"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/chunks/task"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "agent"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "agentName": {
                                                    "type": "string"
                                                },
                                                "uid": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "type": "integer"
                                                },
                                                "devices": {
                                                    "type": "string"
                                                },
                                                "cmdPars": {
                                                    "type": "string"
                                                },
                                                "ignoreErrors": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2
                                                    ]
                                                },
                                                "isActive": {
                                                    "type": "boolean"
                                                },
                                                "isTrusted": {
                                                    "type": "boolean"
                                                },
                                                "token": {
                                                    "type": "string"
                                                },
                                                "lastAct": {
                                                    "type": "string"
                                                },
                                                "lastTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "lastIp": {
                                                    "type": "string"
                                                },
                                                "userId": {
                                                    "type": "integer"
                                                },
                                                "cpuOnly": {
                                                    "type": "boolean"
                                                },
                                                "clientSignature": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "task"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "ChunkSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Chunk"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "taskId": {
                                "type": "integer"
                            },
                            "skip": {
                                "type": "integer"
                            },
                            "length": {
                                "type": "integer"
                            },
                            "agentId": {
                                "type": "integer"
                            },
                            "dispatchTime": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "solveTime": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "checkpoint": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "progress": {
                                "type": "integer"
                            },
                            "state": {
                                "type": "integer"
                            },
                            "cracked": {
                                "type": "integer"
                            },
                            "speed": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "agent": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/chunks/relationships/agent"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/chunks/agent"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "task": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/chunks/relationships/task"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/chunks/task"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "agent"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "agentName": {
                                                    "type": "string"
                                                },
                                                "uid": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "type": "integer"
                                                },
                                                "devices": {
                                                    "type": "string"
                                                },
                                                "cmdPars": {
                                                    "type": "string"
                                                },
                                                "ignoreErrors": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2
                                                    ]
                                                },
                                                "isActive": {
                                                    "type": "boolean"
                                                },
                                                "isTrusted": {
                                                    "type": "boolean"
                                                },
                                                "token": {
                                                    "type": "string"
                                                },
                                                "lastAct": {
                                                    "type": "string"
                                                },
                                                "lastTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "lastIp": {
                                                    "type": "string"
                                                },
                                                "userId": {
                                                    "type": "integer"
                                                },
                                                "cpuOnly": {
                                                    "type": "boolean"
                                                },
                                                "clientSignature": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "task"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "ChunkPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Chunk"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "taskId": {
                                "type": "integer"
                            },
                            "skip": {
                                "type": "integer"
                            },
                            "length": {
                                "type": "integer"
                            },
                            "agentId": {
                                "type": "integer"
                            },
                            "dispatchTime": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "solveTime": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "checkpoint": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "progress": {
                                "type": "integer"
                            },
                            "state": {
                                "type": "integer"
                            },
                            "cracked": {
                                "type": "integer"
                            },
                            "speed": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                }
            },
            "ChunkListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ChunkResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "ConfigCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "configSectionId": {
                                        "type": "integer"
                                    },
                                    "item": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ConfigPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "configSectionId": {
                                        "type": "integer"
                                    },
                                    "item": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ConfigResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/configs?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/configs?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/configs?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/configs?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/configs?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Config"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "configSectionId": {
                                "type": "integer"
                            },
                            "item": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "configSection": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/configs/relationships/configSection"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/configs/configSection"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "configSection"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "configSectionId": {
                                                    "type": "integer"
                                                },
                                                "sectionName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "ConfigSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Config"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "configSectionId": {
                                "type": "integer"
                            },
                            "item": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "configSection": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/configs/relationships/configSection"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/configs/configSection"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "configSection"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "configSectionId": {
                                                    "type": "integer"
                                                },
                                                "sectionName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "ConfigPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Config"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "configSectionId": {
                                "type": "integer"
                            },
                            "item": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "ConfigListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ConfigResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "ConfigSectionCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "sectionName": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ConfigSectionPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "sectionName": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ConfigSectionResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/configsections?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/configsections?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/configsections?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/configsections?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/configsections?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "ConfigSection"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "sectionName": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "ConfigSectionSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "ConfigSection"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "sectionName": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "ConfigSectionPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "ConfigSection"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "sectionName": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "ConfigSectionListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ConfigSectionResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "CrackerBinaryCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "crackerBinaryTypeId": {
                                        "type": "integer"
                                    },
                                    "version": {
                                        "type": "string"
                                    },
                                    "downloadUrl": {
                                        "type": "string"
                                    },
                                    "binaryName": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CrackerBinaryPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "binaryName": {
                                        "type": "string"
                                    },
                                    "crackerBinaryTypeId": {
                                        "type": "integer"
                                    },
                                    "downloadUrl": {
                                        "type": "string"
                                    },
                                    "version": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CrackerBinaryResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/crackers?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/crackers?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/crackers?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/crackers?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/crackers?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "CrackerBinary"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "crackerBinaryTypeId": {
                                "type": "integer"
                            },
                            "version": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "binaryName": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "crackerBinaryType": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackers/relationships/crackerBinaryType"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackers/crackerBinaryType"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "tasks": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackers/relationships/tasks"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackers/tasks"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "crackerBinaryType"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "typeName": {
                                                    "type": "string"
                                                },
                                                "isChunkingAvailable": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "tasks"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "CrackerBinarySingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "CrackerBinary"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "crackerBinaryTypeId": {
                                "type": "integer"
                            },
                            "version": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "binaryName": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "crackerBinaryType": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackers/relationships/crackerBinaryType"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackers/crackerBinaryType"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "tasks": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackers/relationships/tasks"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackers/tasks"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "crackerBinaryType"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "typeName": {
                                                    "type": "string"
                                                },
                                                "isChunkingAvailable": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "tasks"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "CrackerBinaryPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "CrackerBinary"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "crackerBinaryTypeId": {
                                "type": "integer"
                            },
                            "version": {
                                "type": "string"
                            },
                            "downloadUrl": {
                                "type": "string"
                            },
                            "binaryName": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "CrackerBinaryListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CrackerBinaryResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "CrackerBinaryTypeCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "typeName": {
                                        "type": "string"
                                    },
                                    "isChunkingAvailable": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CrackerBinaryTypePatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "isChunkingAvailable": {
                                        "type": "boolean"
                                    },
                                    "typeName": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CrackerBinaryTypeResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/crackertypes?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/crackertypes?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/crackertypes?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/crackertypes?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/crackertypes?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "CrackerBinaryType"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "typeName": {
                                "type": "string"
                            },
                            "isChunkingAvailable": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "crackerVersions": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackertypes/relationships/crackerVersions"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackertypes/crackerVersions"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "tasks": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackertypes/relationships/tasks"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackertypes/tasks"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "crackerVersions"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "version": {
                                                    "type": "string"
                                                },
                                                "downloadUrl": {
                                                    "type": "string"
                                                },
                                                "binaryName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "tasks"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "CrackerBinaryTypeSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "CrackerBinaryType"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "typeName": {
                                "type": "string"
                            },
                            "isChunkingAvailable": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "crackerVersions": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackertypes/relationships/crackerVersions"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackertypes/crackerVersions"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "tasks": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackertypes/relationships/tasks"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/crackertypes/tasks"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "crackerVersions"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "version": {
                                                    "type": "string"
                                                },
                                                "downloadUrl": {
                                                    "type": "string"
                                                },
                                                "binaryName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "tasks"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "CrackerBinaryTypePostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "CrackerBinaryType"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "typeName": {
                                "type": "string"
                            },
                            "isChunkingAvailable": {
                                "type": "boolean"
                            }
                        }
                    }
                }
            },
            "CrackerBinaryTypeListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CrackerBinaryTypeResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "FileCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "sourceType": {
                                        "type": "string"
                                    },
                                    "sourceData": {
                                        "type": "string"
                                    },
                                    "filename": {
                                        "type": "string"
                                    },
                                    "size": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "isSecret": {
                                        "type": "boolean"
                                    },
                                    "fileType": {
                                        "type": "integer"
                                    },
                                    "accessGroupId": {
                                        "type": "integer"
                                    },
                                    "lineCount": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "FilePatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "accessGroupId": {
                                        "type": "integer"
                                    },
                                    "fileType": {
                                        "type": "integer"
                                    },
                                    "filename": {
                                        "type": "string"
                                    },
                                    "isSecret": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "FileResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/files?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/files?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/files?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/files?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/files?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "File"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "filename": {
                                "type": "string"
                            },
                            "size": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "isSecret": {
                                "type": "boolean"
                            },
                            "fileType": {
                                "type": "integer"
                            },
                            "accessGroupId": {
                                "type": "integer"
                            },
                            "lineCount": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "accessGroup": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/files/relationships/accessGroup"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/files/accessGroup"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "accessGroup"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "groupName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "FileSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "File"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "filename": {
                                "type": "string"
                            },
                            "size": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "isSecret": {
                                "type": "boolean"
                            },
                            "fileType": {
                                "type": "integer"
                            },
                            "accessGroupId": {
                                "type": "integer"
                            },
                            "lineCount": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "accessGroup": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/files/relationships/accessGroup"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/files/accessGroup"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "accessGroup"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "groupName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "FilePostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "File"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "filename": {
                                "type": "string"
                            },
                            "size": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "isSecret": {
                                "type": "boolean"
                            },
                            "fileType": {
                                "type": "integer"
                            },
                            "accessGroupId": {
                                "type": "integer"
                            },
                            "lineCount": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                }
            },
            "FileListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FileResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "RightGroupCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "permissions": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "RightGroupPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "permissions": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "RightGroupResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/globalpermissiongroups?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/globalpermissiongroups?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/globalpermissiongroups?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/globalpermissiongroups?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/globalpermissiongroups?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "RightGroup"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "permissions": {
                                "type": "object"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "userMembers": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/globalpermissiongroups/relationships/userMembers"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/globalpermissiongroups/userMembers"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "userMembers"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "email": {
                                                    "type": "string"
                                                },
                                                "passwordHash": {
                                                    "type": "string"
                                                },
                                                "passwordSalt": {
                                                    "type": "string"
                                                },
                                                "isValid": {
                                                    "type": "boolean"
                                                },
                                                "isComputedPassword": {
                                                    "type": "boolean"
                                                },
                                                "lastLoginDate": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "registeredSince": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "sessionLifetime": {
                                                    "type": "integer"
                                                },
                                                "globalPermissionGroupId": {
                                                    "type": "integer"
                                                },
                                                "yubikey": {
                                                    "type": "string"
                                                },
                                                "otp1": {
                                                    "type": "string"
                                                },
                                                "otp2": {
                                                    "type": "string"
                                                },
                                                "otp3": {
                                                    "type": "string"
                                                },
                                                "otp4": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "RightGroupSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "RightGroup"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "permissions": {
                                "type": "object"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "userMembers": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/globalpermissiongroups/relationships/userMembers"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/globalpermissiongroups/userMembers"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "userMembers"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "email": {
                                                    "type": "string"
                                                },
                                                "passwordHash": {
                                                    "type": "string"
                                                },
                                                "passwordSalt": {
                                                    "type": "string"
                                                },
                                                "isValid": {
                                                    "type": "boolean"
                                                },
                                                "isComputedPassword": {
                                                    "type": "boolean"
                                                },
                                                "lastLoginDate": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "registeredSince": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "sessionLifetime": {
                                                    "type": "integer"
                                                },
                                                "globalPermissionGroupId": {
                                                    "type": "integer"
                                                },
                                                "yubikey": {
                                                    "type": "string"
                                                },
                                                "otp1": {
                                                    "type": "string"
                                                },
                                                "otp2": {
                                                    "type": "string"
                                                },
                                                "otp3": {
                                                    "type": "string"
                                                },
                                                "otp4": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "RightGroupPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "RightGroup"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "permissions": {
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "RightGroupListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RightGroupResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "HashCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "hashlistId": {
                                        "type": "integer"
                                    },
                                    "hash": {
                                        "type": "string"
                                    },
                                    "salt": {
                                        "type": "string"
                                    },
                                    "plaintext": {
                                        "type": "string"
                                    },
                                    "timeCracked": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "chunkId": {
                                        "type": "integer"
                                    },
                                    "isCracked": {
                                        "type": "boolean"
                                    },
                                    "crackPos": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "HashPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "chunkId": {
                                        "type": "integer"
                                    },
                                    "crackPos": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "hash": {
                                        "type": "string"
                                    },
                                    "hashlistId": {
                                        "type": "integer"
                                    },
                                    "isCracked": {
                                        "type": "boolean"
                                    },
                                    "plaintext": {
                                        "type": "string"
                                    },
                                    "salt": {
                                        "type": "string"
                                    },
                                    "timeCracked": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "HashResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/hashes?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/hashes?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/hashes?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/hashes?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/hashes?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Hash"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "hashlistId": {
                                "type": "integer"
                            },
                            "hash": {
                                "type": "string"
                            },
                            "salt": {
                                "type": "string"
                            },
                            "plaintext": {
                                "type": "string"
                            },
                            "timeCracked": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "chunkId": {
                                "type": "integer"
                            },
                            "isCracked": {
                                "type": "boolean"
                            },
                            "crackPos": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "chunk": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashes/relationships/chunk"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashes/chunk"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "hashlist": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashes/relationships/hashlist"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashes/hashlist"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "chunk"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "chunkId": {
                                                    "type": "integer"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "skip": {
                                                    "type": "integer"
                                                },
                                                "length": {
                                                    "type": "integer"
                                                },
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "dispatchTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "solveTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "checkpoint": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "progress": {
                                                    "type": "integer"
                                                },
                                                "state": {
                                                    "type": "integer"
                                                },
                                                "cracked": {
                                                    "type": "integer"
                                                },
                                                "speed": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "hashlist"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistSeperator": {
                                                    "type": "string"
                                                },
                                                "sourceType": {
                                                    "type": "string"
                                                },
                                                "sourceData": {
                                                    "type": "string"
                                                },
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "format": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2,
                                                        3
                                                    ]
                                                },
                                                "hashTypeId": {
                                                    "type": "integer"
                                                },
                                                "hashCount": {
                                                    "type": "integer"
                                                },
                                                "separator": {
                                                    "type": "string"
                                                },
                                                "cracked": {
                                                    "type": "integer"
                                                },
                                                "isSecret": {
                                                    "type": "boolean"
                                                },
                                                "isHexSalt": {
                                                    "type": "boolean"
                                                },
                                                "isSalted": {
                                                    "type": "boolean"
                                                },
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "useBrain": {
                                                    "type": "boolean"
                                                },
                                                "brainFeatures": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "HashSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Hash"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "hashlistId": {
                                "type": "integer"
                            },
                            "hash": {
                                "type": "string"
                            },
                            "salt": {
                                "type": "string"
                            },
                            "plaintext": {
                                "type": "string"
                            },
                            "timeCracked": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "chunkId": {
                                "type": "integer"
                            },
                            "isCracked": {
                                "type": "boolean"
                            },
                            "crackPos": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "chunk": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashes/relationships/chunk"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashes/chunk"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "hashlist": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashes/relationships/hashlist"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashes/hashlist"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "chunk"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "chunkId": {
                                                    "type": "integer"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "skip": {
                                                    "type": "integer"
                                                },
                                                "length": {
                                                    "type": "integer"
                                                },
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "dispatchTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "solveTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "checkpoint": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "progress": {
                                                    "type": "integer"
                                                },
                                                "state": {
                                                    "type": "integer"
                                                },
                                                "cracked": {
                                                    "type": "integer"
                                                },
                                                "speed": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "hashlist"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistSeperator": {
                                                    "type": "string"
                                                },
                                                "sourceType": {
                                                    "type": "string"
                                                },
                                                "sourceData": {
                                                    "type": "string"
                                                },
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "format": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2,
                                                        3
                                                    ]
                                                },
                                                "hashTypeId": {
                                                    "type": "integer"
                                                },
                                                "hashCount": {
                                                    "type": "integer"
                                                },
                                                "separator": {
                                                    "type": "string"
                                                },
                                                "cracked": {
                                                    "type": "integer"
                                                },
                                                "isSecret": {
                                                    "type": "boolean"
                                                },
                                                "isHexSalt": {
                                                    "type": "boolean"
                                                },
                                                "isSalted": {
                                                    "type": "boolean"
                                                },
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "useBrain": {
                                                    "type": "boolean"
                                                },
                                                "brainFeatures": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "HashPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Hash"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "hashlistId": {
                                "type": "integer"
                            },
                            "hash": {
                                "type": "string"
                            },
                            "salt": {
                                "type": "string"
                            },
                            "plaintext": {
                                "type": "string"
                            },
                            "timeCracked": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "chunkId": {
                                "type": "integer"
                            },
                            "isCracked": {
                                "type": "boolean"
                            },
                            "crackPos": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                }
            },
            "HashListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/HashResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "HashlistCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "hashlistSeperator": {
                                        "type": "string"
                                    },
                                    "sourceType": {
                                        "type": "string"
                                    },
                                    "sourceData": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "format": {
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1,
                                            2,
                                            3
                                        ]
                                    },
                                    "hashTypeId": {
                                        "type": "integer"
                                    },
                                    "hashCount": {
                                        "type": "integer"
                                    },
                                    "separator": {
                                        "type": "string"
                                    },
                                    "cracked": {
                                        "type": "integer"
                                    },
                                    "isSecret": {
                                        "type": "boolean"
                                    },
                                    "isHexSalt": {
                                        "type": "boolean"
                                    },
                                    "isSalted": {
                                        "type": "boolean"
                                    },
                                    "accessGroupId": {
                                        "type": "integer"
                                    },
                                    "notes": {
                                        "type": "string"
                                    },
                                    "useBrain": {
                                        "type": "boolean"
                                    },
                                    "brainFeatures": {
                                        "type": "integer"
                                    },
                                    "isArchived": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "HashlistPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "accessGroupId": {
                                        "type": "integer"
                                    },
                                    "isArchived": {
                                        "type": "boolean"
                                    },
                                    "isSecret": {
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "notes": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "HashlistResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/hashlists?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/hashlists?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/hashlists?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/hashlists?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/hashlists?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Hashlist"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "format": {
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2,
                                    3
                                ]
                            },
                            "hashTypeId": {
                                "type": "integer"
                            },
                            "hashCount": {
                                "type": "integer"
                            },
                            "separator": {
                                "type": "string"
                            },
                            "cracked": {
                                "type": "integer"
                            },
                            "isSecret": {
                                "type": "boolean"
                            },
                            "isHexSalt": {
                                "type": "boolean"
                            },
                            "isSalted": {
                                "type": "boolean"
                            },
                            "accessGroupId": {
                                "type": "integer"
                            },
                            "notes": {
                                "type": "string"
                            },
                            "useBrain": {
                                "type": "boolean"
                            },
                            "brainFeatures": {
                                "type": "integer"
                            },
                            "isArchived": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "accessGroup": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/relationships/accessGroup"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/accessGroup"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "hashType": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/relationships/hashType"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/hashType"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "hashes": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/relationships/hashes"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/hashes"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "hashlists": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/relationships/hashlists"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/hashlists"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "tasks": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/relationships/tasks"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/tasks"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "accessGroup"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "groupName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "hashType"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashTypeId": {
                                                    "type": "integer"
                                                },
                                                "description": {
                                                    "type": "string"
                                                },
                                                "isSalted": {
                                                    "type": "boolean"
                                                },
                                                "isSlowHash": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "hashes"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashId": {
                                                    "type": "integer"
                                                },
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "hash": {
                                                    "type": "string"
                                                },
                                                "salt": {
                                                    "type": "string"
                                                },
                                                "plaintext": {
                                                    "type": "string"
                                                },
                                                "timeCracked": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "chunkId": {
                                                    "type": "integer"
                                                },
                                                "isCracked": {
                                                    "type": "boolean"
                                                },
                                                "crackPos": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "hashlists"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistSeperator": {
                                                    "type": "string"
                                                },
                                                "sourceType": {
                                                    "type": "string"
                                                },
                                                "sourceData": {
                                                    "type": "string"
                                                },
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "format": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2,
                                                        3
                                                    ]
                                                },
                                                "hashTypeId": {
                                                    "type": "integer"
                                                },
                                                "hashCount": {
                                                    "type": "integer"
                                                },
                                                "separator": {
                                                    "type": "string"
                                                },
                                                "cracked": {
                                                    "type": "integer"
                                                },
                                                "isSecret": {
                                                    "type": "boolean"
                                                },
                                                "isHexSalt": {
                                                    "type": "boolean"
                                                },
                                                "isSalted": {
                                                    "type": "boolean"
                                                },
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "useBrain": {
                                                    "type": "boolean"
                                                },
                                                "brainFeatures": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "tasks"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "HashlistSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Hashlist"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "format": {
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2,
                                    3
                                ]
                            },
                            "hashTypeId": {
                                "type": "integer"
                            },
                            "hashCount": {
                                "type": "integer"
                            },
                            "separator": {
                                "type": "string"
                            },
                            "cracked": {
                                "type": "integer"
                            },
                            "isSecret": {
                                "type": "boolean"
                            },
                            "isHexSalt": {
                                "type": "boolean"
                            },
                            "isSalted": {
                                "type": "boolean"
                            },
                            "accessGroupId": {
                                "type": "integer"
                            },
                            "notes": {
                                "type": "string"
                            },
                            "useBrain": {
                                "type": "boolean"
                            },
                            "brainFeatures": {
                                "type": "integer"
                            },
                            "isArchived": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "accessGroup": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/relationships/accessGroup"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/accessGroup"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "hashType": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/relationships/hashType"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/hashType"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "hashes": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/relationships/hashes"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/hashes"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "hashlists": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/relationships/hashlists"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/hashlists"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "tasks": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/relationships/tasks"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/hashlists/tasks"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "accessGroup"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "groupName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "hashType"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashTypeId": {
                                                    "type": "integer"
                                                },
                                                "description": {
                                                    "type": "string"
                                                },
                                                "isSalted": {
                                                    "type": "boolean"
                                                },
                                                "isSlowHash": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "hashes"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashId": {
                                                    "type": "integer"
                                                },
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "hash": {
                                                    "type": "string"
                                                },
                                                "salt": {
                                                    "type": "string"
                                                },
                                                "plaintext": {
                                                    "type": "string"
                                                },
                                                "timeCracked": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "chunkId": {
                                                    "type": "integer"
                                                },
                                                "isCracked": {
                                                    "type": "boolean"
                                                },
                                                "crackPos": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "hashlists"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistSeperator": {
                                                    "type": "string"
                                                },
                                                "sourceType": {
                                                    "type": "string"
                                                },
                                                "sourceData": {
                                                    "type": "string"
                                                },
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "format": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2,
                                                        3
                                                    ]
                                                },
                                                "hashTypeId": {
                                                    "type": "integer"
                                                },
                                                "hashCount": {
                                                    "type": "integer"
                                                },
                                                "separator": {
                                                    "type": "string"
                                                },
                                                "cracked": {
                                                    "type": "integer"
                                                },
                                                "isSecret": {
                                                    "type": "boolean"
                                                },
                                                "isHexSalt": {
                                                    "type": "boolean"
                                                },
                                                "isSalted": {
                                                    "type": "boolean"
                                                },
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "useBrain": {
                                                    "type": "boolean"
                                                },
                                                "brainFeatures": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "tasks"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "HashlistPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Hashlist"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "format": {
                                "type": "integer",
                                "enum": [
                                    0,
                                    1,
                                    2,
                                    3
                                ]
                            },
                            "hashTypeId": {
                                "type": "integer"
                            },
                            "hashCount": {
                                "type": "integer"
                            },
                            "separator": {
                                "type": "string"
                            },
                            "cracked": {
                                "type": "integer"
                            },
                            "isSecret": {
                                "type": "boolean"
                            },
                            "isHexSalt": {
                                "type": "boolean"
                            },
                            "isSalted": {
                                "type": "boolean"
                            },
                            "accessGroupId": {
                                "type": "integer"
                            },
                            "notes": {
                                "type": "string"
                            },
                            "useBrain": {
                                "type": "boolean"
                            },
                            "brainFeatures": {
                                "type": "integer"
                            },
                            "isArchived": {
                                "type": "boolean"
                            }
                        }
                    }
                }
            },
            "HashlistListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/HashlistResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "HashTypeCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "description": {
                                        "type": "string"
                                    },
                                    "isSalted": {
                                        "type": "boolean"
                                    },
                                    "isSlowHash": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "HashTypePatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "description": {
                                        "type": "string"
                                    },
                                    "isSalted": {
                                        "type": "boolean"
                                    },
                                    "isSlowHash": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "HashTypeResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/hashtypes?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/hashtypes?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/hashtypes?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/hashtypes?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/hashtypes?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "HashType"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "isSalted": {
                                "type": "boolean"
                            },
                            "isSlowHash": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "HashTypeSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "HashType"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "isSalted": {
                                "type": "boolean"
                            },
                            "isSlowHash": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "HashTypePostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "HashType"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string"
                            },
                            "isSalted": {
                                "type": "boolean"
                            },
                            "isSlowHash": {
                                "type": "boolean"
                            }
                        }
                    }
                }
            },
            "HashTypeListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/HashTypeResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "HealthCheckAgentCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "healthCheckId": {
                                        "type": "integer"
                                    },
                                    "agentId": {
                                        "type": "integer"
                                    },
                                    "status": {
                                        "type": "integer"
                                    },
                                    "cracked": {
                                        "type": "integer"
                                    },
                                    "numGpus": {
                                        "type": "integer"
                                    },
                                    "start": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "end": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "errors": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "HealthCheckAgentPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": []
                            }
                        }
                    }
                }
            },
            "HealthCheckAgentResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/healthcheckagents?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/healthcheckagents?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/healthcheckagents?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/healthcheckagents?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/healthcheckagents?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "HealthCheckAgent"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "healthCheckId": {
                                "type": "integer"
                            },
                            "agentId": {
                                "type": "integer"
                            },
                            "status": {
                                "type": "integer"
                            },
                            "cracked": {
                                "type": "integer"
                            },
                            "numGpus": {
                                "type": "integer"
                            },
                            "start": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "end": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "errors": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "agent": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthcheckagents/relationships/agent"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthcheckagents/agent"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "healthCheck": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthcheckagents/relationships/healthCheck"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthcheckagents/healthCheck"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "agent"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "agentName": {
                                                    "type": "string"
                                                },
                                                "uid": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "type": "integer"
                                                },
                                                "devices": {
                                                    "type": "string"
                                                },
                                                "cmdPars": {
                                                    "type": "string"
                                                },
                                                "ignoreErrors": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2
                                                    ]
                                                },
                                                "isActive": {
                                                    "type": "boolean"
                                                },
                                                "isTrusted": {
                                                    "type": "boolean"
                                                },
                                                "token": {
                                                    "type": "string"
                                                },
                                                "lastAct": {
                                                    "type": "string"
                                                },
                                                "lastTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "lastIp": {
                                                    "type": "string"
                                                },
                                                "userId": {
                                                    "type": "integer"
                                                },
                                                "cpuOnly": {
                                                    "type": "boolean"
                                                },
                                                "clientSignature": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "healthCheck"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "healthCheckId": {
                                                    "type": "integer"
                                                },
                                                "time": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "status": {
                                                    "type": "integer"
                                                },
                                                "checkType": {
                                                    "type": "integer"
                                                },
                                                "hashtypeId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "expectedCracks": {
                                                    "type": "integer"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "HealthCheckAgentSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "HealthCheckAgent"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "healthCheckId": {
                                "type": "integer"
                            },
                            "agentId": {
                                "type": "integer"
                            },
                            "status": {
                                "type": "integer"
                            },
                            "cracked": {
                                "type": "integer"
                            },
                            "numGpus": {
                                "type": "integer"
                            },
                            "start": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "end": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "errors": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "agent": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthcheckagents/relationships/agent"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthcheckagents/agent"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "healthCheck": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthcheckagents/relationships/healthCheck"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthcheckagents/healthCheck"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "agent"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "agentName": {
                                                    "type": "string"
                                                },
                                                "uid": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "type": "integer"
                                                },
                                                "devices": {
                                                    "type": "string"
                                                },
                                                "cmdPars": {
                                                    "type": "string"
                                                },
                                                "ignoreErrors": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2
                                                    ]
                                                },
                                                "isActive": {
                                                    "type": "boolean"
                                                },
                                                "isTrusted": {
                                                    "type": "boolean"
                                                },
                                                "token": {
                                                    "type": "string"
                                                },
                                                "lastAct": {
                                                    "type": "string"
                                                },
                                                "lastTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "lastIp": {
                                                    "type": "string"
                                                },
                                                "userId": {
                                                    "type": "integer"
                                                },
                                                "cpuOnly": {
                                                    "type": "boolean"
                                                },
                                                "clientSignature": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "healthCheck"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "healthCheckId": {
                                                    "type": "integer"
                                                },
                                                "time": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "status": {
                                                    "type": "integer"
                                                },
                                                "checkType": {
                                                    "type": "integer"
                                                },
                                                "hashtypeId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "expectedCracks": {
                                                    "type": "integer"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "HealthCheckAgentPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "HealthCheckAgent"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "healthCheckId": {
                                "type": "integer"
                            },
                            "agentId": {
                                "type": "integer"
                            },
                            "status": {
                                "type": "integer"
                            },
                            "cracked": {
                                "type": "integer"
                            },
                            "numGpus": {
                                "type": "integer"
                            },
                            "start": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "end": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "errors": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "HealthCheckAgentListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/HealthCheckAgentResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "HealthCheckCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "time": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "status": {
                                        "type": "integer"
                                    },
                                    "checkType": {
                                        "type": "integer"
                                    },
                                    "hashtypeId": {
                                        "type": "integer"
                                    },
                                    "crackerBinaryId": {
                                        "type": "integer"
                                    },
                                    "expectedCracks": {
                                        "type": "integer"
                                    },
                                    "attackCmd": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "HealthCheckPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "checkType": {
                                        "type": "integer"
                                    },
                                    "crackerBinaryId": {
                                        "type": "integer"
                                    },
                                    "hashtypeId": {
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "HealthCheckResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/healthchecks?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/healthchecks?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/healthchecks?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/healthchecks?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/healthchecks?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "HealthCheck"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "status": {
                                "type": "integer"
                            },
                            "checkType": {
                                "type": "integer"
                            },
                            "hashtypeId": {
                                "type": "integer"
                            },
                            "crackerBinaryId": {
                                "type": "integer"
                            },
                            "expectedCracks": {
                                "type": "integer"
                            },
                            "attackCmd": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "crackerBinary": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthchecks/relationships/crackerBinary"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthchecks/crackerBinary"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "healthCheckAgents": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthchecks/relationships/healthCheckAgents"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthchecks/healthCheckAgents"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "crackerBinary"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "version": {
                                                    "type": "string"
                                                },
                                                "downloadUrl": {
                                                    "type": "string"
                                                },
                                                "binaryName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "healthCheckAgents"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "healthCheckAgentId": {
                                                    "type": "integer"
                                                },
                                                "healthCheckId": {
                                                    "type": "integer"
                                                },
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "status": {
                                                    "type": "integer"
                                                },
                                                "cracked": {
                                                    "type": "integer"
                                                },
                                                "numGpus": {
                                                    "type": "integer"
                                                },
                                                "start": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "end": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "errors": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "HealthCheckSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "HealthCheck"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "status": {
                                "type": "integer"
                            },
                            "checkType": {
                                "type": "integer"
                            },
                            "hashtypeId": {
                                "type": "integer"
                            },
                            "crackerBinaryId": {
                                "type": "integer"
                            },
                            "expectedCracks": {
                                "type": "integer"
                            },
                            "attackCmd": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "crackerBinary": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthchecks/relationships/crackerBinary"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthchecks/crackerBinary"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "healthCheckAgents": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthchecks/relationships/healthCheckAgents"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/healthchecks/healthCheckAgents"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "crackerBinary"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "version": {
                                                    "type": "string"
                                                },
                                                "downloadUrl": {
                                                    "type": "string"
                                                },
                                                "binaryName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "healthCheckAgents"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "healthCheckAgentId": {
                                                    "type": "integer"
                                                },
                                                "healthCheckId": {
                                                    "type": "integer"
                                                },
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "status": {
                                                    "type": "integer"
                                                },
                                                "cracked": {
                                                    "type": "integer"
                                                },
                                                "numGpus": {
                                                    "type": "integer"
                                                },
                                                "start": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "end": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "errors": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "HealthCheckPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "HealthCheck"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "status": {
                                "type": "integer"
                            },
                            "checkType": {
                                "type": "integer"
                            },
                            "hashtypeId": {
                                "type": "integer"
                            },
                            "crackerBinaryId": {
                                "type": "integer"
                            },
                            "expectedCracks": {
                                "type": "integer"
                            },
                            "attackCmd": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "HealthCheckListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/HealthCheckResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "LogEntryCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "issuer": {
                                        "type": "string"
                                    },
                                    "issuerId": {
                                        "type": "string"
                                    },
                                    "level": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "time": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "LogEntryPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": []
                            }
                        }
                    }
                }
            },
            "LogEntryResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/logentries?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/logentries?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/logentries?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/logentries?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/logentries?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "LogEntry"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "issuer": {
                                "type": "string"
                            },
                            "issuerId": {
                                "type": "string"
                            },
                            "level": {
                                "type": "string"
                            },
                            "message": {
                                "type": "string"
                            },
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "LogEntrySingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "LogEntry"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "issuer": {
                                "type": "string"
                            },
                            "issuerId": {
                                "type": "string"
                            },
                            "level": {
                                "type": "string"
                            },
                            "message": {
                                "type": "string"
                            },
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "LogEntryPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "LogEntry"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "issuer": {
                                "type": "string"
                            },
                            "issuerId": {
                                "type": "string"
                            },
                            "level": {
                                "type": "string"
                            },
                            "message": {
                                "type": "string"
                            },
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                }
            },
            "LogEntryListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LogEntryResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "NotificationSettingCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "actionFilter": {
                                        "type": "string"
                                    },
                                    "action": {
                                        "type": "string"
                                    },
                                    "objectId": {
                                        "type": "integer"
                                    },
                                    "notification": {
                                        "type": "string"
                                    },
                                    "userId": {
                                        "type": "integer"
                                    },
                                    "receiver": {
                                        "type": "string"
                                    },
                                    "isActive": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "NotificationSettingPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "action": {
                                        "type": "string"
                                    },
                                    "isActive": {
                                        "type": "boolean"
                                    },
                                    "notification": {
                                        "type": "string"
                                    },
                                    "receiver": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "NotificationSettingResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/notifications?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/notifications?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/notifications?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/notifications?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/notifications?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "NotificationSetting"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "action": {
                                "type": "string"
                            },
                            "objectId": {
                                "type": "integer"
                            },
                            "notification": {
                                "type": "string"
                            },
                            "userId": {
                                "type": "integer"
                            },
                            "receiver": {
                                "type": "string"
                            },
                            "isActive": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "user": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/notifications/relationships/user"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/notifications/user"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "user"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "email": {
                                                    "type": "string"
                                                },
                                                "passwordHash": {
                                                    "type": "string"
                                                },
                                                "passwordSalt": {
                                                    "type": "string"
                                                },
                                                "isValid": {
                                                    "type": "boolean"
                                                },
                                                "isComputedPassword": {
                                                    "type": "boolean"
                                                },
                                                "lastLoginDate": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "registeredSince": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "sessionLifetime": {
                                                    "type": "integer"
                                                },
                                                "globalPermissionGroupId": {
                                                    "type": "integer"
                                                },
                                                "yubikey": {
                                                    "type": "string"
                                                },
                                                "otp1": {
                                                    "type": "string"
                                                },
                                                "otp2": {
                                                    "type": "string"
                                                },
                                                "otp3": {
                                                    "type": "string"
                                                },
                                                "otp4": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "NotificationSettingSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "NotificationSetting"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "action": {
                                "type": "string"
                            },
                            "objectId": {
                                "type": "integer"
                            },
                            "notification": {
                                "type": "string"
                            },
                            "userId": {
                                "type": "integer"
                            },
                            "receiver": {
                                "type": "string"
                            },
                            "isActive": {
                                "type": "boolean"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "user": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/notifications/relationships/user"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/notifications/user"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "user"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "email": {
                                                    "type": "string"
                                                },
                                                "passwordHash": {
                                                    "type": "string"
                                                },
                                                "passwordSalt": {
                                                    "type": "string"
                                                },
                                                "isValid": {
                                                    "type": "boolean"
                                                },
                                                "isComputedPassword": {
                                                    "type": "boolean"
                                                },
                                                "lastLoginDate": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "registeredSince": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "sessionLifetime": {
                                                    "type": "integer"
                                                },
                                                "globalPermissionGroupId": {
                                                    "type": "integer"
                                                },
                                                "yubikey": {
                                                    "type": "string"
                                                },
                                                "otp1": {
                                                    "type": "string"
                                                },
                                                "otp2": {
                                                    "type": "string"
                                                },
                                                "otp3": {
                                                    "type": "string"
                                                },
                                                "otp4": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "NotificationSettingPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "NotificationSetting"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "action": {
                                "type": "string"
                            },
                            "objectId": {
                                "type": "integer"
                            },
                            "notification": {
                                "type": "string"
                            },
                            "userId": {
                                "type": "integer"
                            },
                            "receiver": {
                                "type": "string"
                            },
                            "isActive": {
                                "type": "boolean"
                            }
                        }
                    }
                }
            },
            "NotificationSettingListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/NotificationSettingResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "PreprocessorCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "url": {
                                        "type": "string"
                                    },
                                    "binaryName": {
                                        "type": "string"
                                    },
                                    "keyspaceCommand": {
                                        "type": "string"
                                    },
                                    "skipCommand": {
                                        "type": "string"
                                    },
                                    "limitCommand": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PreprocessorPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "binaryName": {
                                        "type": "string"
                                    },
                                    "keyspaceCommand": {
                                        "type": "string"
                                    },
                                    "limitCommand": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "skipCommand": {
                                        "type": "string"
                                    },
                                    "url": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PreprocessorResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/preprocessors?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/preprocessors?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/preprocessors?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/preprocessors?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/preprocessors?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Preprocessor"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "url": {
                                "type": "string"
                            },
                            "binaryName": {
                                "type": "string"
                            },
                            "keyspaceCommand": {
                                "type": "string"
                            },
                            "skipCommand": {
                                "type": "string"
                            },
                            "limitCommand": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "PreprocessorSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Preprocessor"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "url": {
                                "type": "string"
                            },
                            "binaryName": {
                                "type": "string"
                            },
                            "keyspaceCommand": {
                                "type": "string"
                            },
                            "skipCommand": {
                                "type": "string"
                            },
                            "limitCommand": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "PreprocessorPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Preprocessor"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "url": {
                                "type": "string"
                            },
                            "binaryName": {
                                "type": "string"
                            },
                            "keyspaceCommand": {
                                "type": "string"
                            },
                            "skipCommand": {
                                "type": "string"
                            },
                            "limitCommand": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "PreprocessorListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PreprocessorResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "PretaskCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "files": {
                                        "type": "array"
                                    },
                                    "taskName": {
                                        "type": "string"
                                    },
                                    "attackCmd": {
                                        "type": "string"
                                    },
                                    "chunkTime": {
                                        "type": "integer"
                                    },
                                    "statusTimer": {
                                        "type": "integer"
                                    },
                                    "color": {
                                        "type": "string"
                                    },
                                    "isSmall": {
                                        "type": "boolean"
                                    },
                                    "isCpuTask": {
                                        "type": "boolean"
                                    },
                                    "useNewBench": {
                                        "type": "boolean"
                                    },
                                    "priority": {
                                        "type": "integer"
                                    },
                                    "maxAgents": {
                                        "type": "integer"
                                    },
                                    "isMaskImport": {
                                        "type": "boolean"
                                    },
                                    "crackerBinaryTypeId": {
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PretaskPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "attackCmd": {
                                        "type": "string"
                                    },
                                    "chunkTime": {
                                        "type": "integer"
                                    },
                                    "color": {
                                        "type": "string"
                                    },
                                    "crackerBinaryTypeId": {
                                        "type": "integer"
                                    },
                                    "isCpuTask": {
                                        "type": "boolean"
                                    },
                                    "isMaskImport": {
                                        "type": "boolean"
                                    },
                                    "isSmall": {
                                        "type": "boolean"
                                    },
                                    "maxAgents": {
                                        "type": "integer"
                                    },
                                    "priority": {
                                        "type": "integer"
                                    },
                                    "statusTimer": {
                                        "type": "integer"
                                    },
                                    "taskName": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PretaskResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/pretasks?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/pretasks?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/pretasks?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/pretasks?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/pretasks?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Pretask"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "taskName": {
                                "type": "string"
                            },
                            "attackCmd": {
                                "type": "string"
                            },
                            "chunkTime": {
                                "type": "integer"
                            },
                            "statusTimer": {
                                "type": "integer"
                            },
                            "color": {
                                "type": "string"
                            },
                            "isSmall": {
                                "type": "boolean"
                            },
                            "isCpuTask": {
                                "type": "boolean"
                            },
                            "useNewBench": {
                                "type": "boolean"
                            },
                            "priority": {
                                "type": "integer"
                            },
                            "maxAgents": {
                                "type": "integer"
                            },
                            "isMaskImport": {
                                "type": "boolean"
                            },
                            "crackerBinaryTypeId": {
                                "type": "integer"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "pretaskFiles": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/pretasks/relationships/pretaskFiles"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/pretasks/pretaskFiles"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "pretaskFiles"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "sourceType": {
                                                    "type": "string"
                                                },
                                                "sourceData": {
                                                    "type": "string"
                                                },
                                                "fileId": {
                                                    "type": "integer"
                                                },
                                                "filename": {
                                                    "type": "string"
                                                },
                                                "size": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "isSecret": {
                                                    "type": "boolean"
                                                },
                                                "fileType": {
                                                    "type": "integer"
                                                },
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "lineCount": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "PretaskSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Pretask"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "taskName": {
                                "type": "string"
                            },
                            "attackCmd": {
                                "type": "string"
                            },
                            "chunkTime": {
                                "type": "integer"
                            },
                            "statusTimer": {
                                "type": "integer"
                            },
                            "color": {
                                "type": "string"
                            },
                            "isSmall": {
                                "type": "boolean"
                            },
                            "isCpuTask": {
                                "type": "boolean"
                            },
                            "useNewBench": {
                                "type": "boolean"
                            },
                            "priority": {
                                "type": "integer"
                            },
                            "maxAgents": {
                                "type": "integer"
                            },
                            "isMaskImport": {
                                "type": "boolean"
                            },
                            "crackerBinaryTypeId": {
                                "type": "integer"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "pretaskFiles": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/pretasks/relationships/pretaskFiles"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/pretasks/pretaskFiles"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "pretaskFiles"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "sourceType": {
                                                    "type": "string"
                                                },
                                                "sourceData": {
                                                    "type": "string"
                                                },
                                                "fileId": {
                                                    "type": "integer"
                                                },
                                                "filename": {
                                                    "type": "string"
                                                },
                                                "size": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "isSecret": {
                                                    "type": "boolean"
                                                },
                                                "fileType": {
                                                    "type": "integer"
                                                },
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "lineCount": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "PretaskPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Pretask"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "taskName": {
                                "type": "string"
                            },
                            "attackCmd": {
                                "type": "string"
                            },
                            "chunkTime": {
                                "type": "integer"
                            },
                            "statusTimer": {
                                "type": "integer"
                            },
                            "color": {
                                "type": "string"
                            },
                            "isSmall": {
                                "type": "boolean"
                            },
                            "isCpuTask": {
                                "type": "boolean"
                            },
                            "useNewBench": {
                                "type": "boolean"
                            },
                            "priority": {
                                "type": "integer"
                            },
                            "maxAgents": {
                                "type": "integer"
                            },
                            "isMaskImport": {
                                "type": "boolean"
                            },
                            "crackerBinaryTypeId": {
                                "type": "integer"
                            }
                        }
                    }
                }
            },
            "PretaskListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PretaskResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "SpeedCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "agentId": {
                                        "type": "integer"
                                    },
                                    "taskId": {
                                        "type": "integer"
                                    },
                                    "speed": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "time": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SpeedPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": []
                            }
                        }
                    }
                }
            },
            "SpeedResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/speeds?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/speeds?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/speeds?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/speeds?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/speeds?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Speed"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "agentId": {
                                "type": "integer"
                            },
                            "taskId": {
                                "type": "integer"
                            },
                            "speed": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "agent": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/speeds/relationships/agent"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/speeds/agent"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "task": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/speeds/relationships/task"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/speeds/task"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "agent"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "agentName": {
                                                    "type": "string"
                                                },
                                                "uid": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "type": "integer"
                                                },
                                                "devices": {
                                                    "type": "string"
                                                },
                                                "cmdPars": {
                                                    "type": "string"
                                                },
                                                "ignoreErrors": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2
                                                    ]
                                                },
                                                "isActive": {
                                                    "type": "boolean"
                                                },
                                                "isTrusted": {
                                                    "type": "boolean"
                                                },
                                                "token": {
                                                    "type": "string"
                                                },
                                                "lastAct": {
                                                    "type": "string"
                                                },
                                                "lastTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "lastIp": {
                                                    "type": "string"
                                                },
                                                "userId": {
                                                    "type": "integer"
                                                },
                                                "cpuOnly": {
                                                    "type": "boolean"
                                                },
                                                "clientSignature": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "task"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "SpeedSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Speed"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "agentId": {
                                "type": "integer"
                            },
                            "taskId": {
                                "type": "integer"
                            },
                            "speed": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "agent": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/speeds/relationships/agent"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/speeds/agent"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "task": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/speeds/relationships/task"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/speeds/task"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "agent"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "agentName": {
                                                    "type": "string"
                                                },
                                                "uid": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "type": "integer"
                                                },
                                                "devices": {
                                                    "type": "string"
                                                },
                                                "cmdPars": {
                                                    "type": "string"
                                                },
                                                "ignoreErrors": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2
                                                    ]
                                                },
                                                "isActive": {
                                                    "type": "boolean"
                                                },
                                                "isTrusted": {
                                                    "type": "boolean"
                                                },
                                                "token": {
                                                    "type": "string"
                                                },
                                                "lastAct": {
                                                    "type": "string"
                                                },
                                                "lastTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "lastIp": {
                                                    "type": "string"
                                                },
                                                "userId": {
                                                    "type": "integer"
                                                },
                                                "cpuOnly": {
                                                    "type": "boolean"
                                                },
                                                "clientSignature": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "task"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "SpeedPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Speed"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "agentId": {
                                "type": "integer"
                            },
                            "taskId": {
                                "type": "integer"
                            },
                            "speed": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                }
            },
            "SpeedListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SpeedResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "SupertaskCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "pretasks": {
                                        "type": "array"
                                    },
                                    "supertaskName": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SupertaskPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "supertaskName": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SupertaskResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/supertasks?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/supertasks?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/supertasks?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/supertasks?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/supertasks?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Supertask"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "supertaskName": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "pretasks": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/supertasks/relationships/pretasks"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/supertasks/pretasks"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "pretasks"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "files": {
                                                    "type": "array"
                                                },
                                                "pretaskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "isMaskImport": {
                                                    "type": "boolean"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "SupertaskSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Supertask"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "supertaskName": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "pretasks": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/supertasks/relationships/pretasks"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/supertasks/pretasks"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "pretasks"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "files": {
                                                    "type": "array"
                                                },
                                                "pretaskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "isMaskImport": {
                                                    "type": "boolean"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "SupertaskPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Supertask"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "supertaskName": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "SupertaskListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SupertaskResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "TaskCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "hashlistId": {
                                        "type": "integer"
                                    },
                                    "files": {
                                        "type": "array"
                                    },
                                    "taskName": {
                                        "type": "string"
                                    },
                                    "attackCmd": {
                                        "type": "string"
                                    },
                                    "chunkTime": {
                                        "type": "integer"
                                    },
                                    "statusTimer": {
                                        "type": "integer"
                                    },
                                    "keyspace": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "keyspaceProgress": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "priority": {
                                        "type": "integer"
                                    },
                                    "maxAgents": {
                                        "type": "integer"
                                    },
                                    "color": {
                                        "type": "string"
                                    },
                                    "isSmall": {
                                        "type": "boolean"
                                    },
                                    "isCpuTask": {
                                        "type": "boolean"
                                    },
                                    "useNewBench": {
                                        "type": "boolean"
                                    },
                                    "skipKeyspace": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "crackerBinaryId": {
                                        "type": "integer"
                                    },
                                    "crackerBinaryTypeId": {
                                        "type": "integer"
                                    },
                                    "taskWrapperId": {
                                        "type": "integer"
                                    },
                                    "isArchived": {
                                        "type": "boolean"
                                    },
                                    "notes": {
                                        "type": "string"
                                    },
                                    "staticChunks": {
                                        "type": "integer"
                                    },
                                    "chunkSize": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "forcePipe": {
                                        "type": "boolean"
                                    },
                                    "preprocessorId": {
                                        "type": "integer"
                                    },
                                    "preprocessorCommand": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TaskPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "attackCmd": {
                                        "type": "string"
                                    },
                                    "chunkTime": {
                                        "type": "integer"
                                    },
                                    "color": {
                                        "type": "string"
                                    },
                                    "isArchived": {
                                        "type": "boolean"
                                    },
                                    "isCpuTask": {
                                        "type": "boolean"
                                    },
                                    "isSmall": {
                                        "type": "boolean"
                                    },
                                    "maxAgents": {
                                        "type": "integer"
                                    },
                                    "notes": {
                                        "type": "string"
                                    },
                                    "priority": {
                                        "type": "integer"
                                    },
                                    "statusTimer": {
                                        "type": "integer"
                                    },
                                    "taskName": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TaskResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/tasks?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/tasks?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/tasks?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/tasks?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/tasks?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Task"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "taskName": {
                                "type": "string"
                            },
                            "attackCmd": {
                                "type": "string"
                            },
                            "chunkTime": {
                                "type": "integer"
                            },
                            "statusTimer": {
                                "type": "integer"
                            },
                            "keyspace": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "keyspaceProgress": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "priority": {
                                "type": "integer"
                            },
                            "maxAgents": {
                                "type": "integer"
                            },
                            "color": {
                                "type": "string"
                            },
                            "isSmall": {
                                "type": "boolean"
                            },
                            "isCpuTask": {
                                "type": "boolean"
                            },
                            "useNewBench": {
                                "type": "boolean"
                            },
                            "skipKeyspace": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "crackerBinaryId": {
                                "type": "integer"
                            },
                            "crackerBinaryTypeId": {
                                "type": "integer"
                            },
                            "taskWrapperId": {
                                "type": "integer"
                            },
                            "isArchived": {
                                "type": "boolean"
                            },
                            "notes": {
                                "type": "string"
                            },
                            "staticChunks": {
                                "type": "integer"
                            },
                            "chunkSize": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "forcePipe": {
                                "type": "boolean"
                            },
                            "preprocessorId": {
                                "type": "integer"
                            },
                            "preprocessorCommand": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "assignedAgents": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/relationships/assignedAgents"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/assignedAgents"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "crackerBinary": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/relationships/crackerBinary"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/crackerBinary"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "crackerBinaryType": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/relationships/crackerBinaryType"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/crackerBinaryType"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "files": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/relationships/files"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/files"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "hashlist": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/relationships/hashlist"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/hashlist"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "speeds": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/relationships/speeds"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/speeds"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "crackerBinary"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "version": {
                                                    "type": "string"
                                                },
                                                "downloadUrl": {
                                                    "type": "string"
                                                },
                                                "binaryName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "crackerBinaryType"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "typeName": {
                                                    "type": "string"
                                                },
                                                "isChunkingAvailable": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "hashlist"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistSeperator": {
                                                    "type": "string"
                                                },
                                                "sourceType": {
                                                    "type": "string"
                                                },
                                                "sourceData": {
                                                    "type": "string"
                                                },
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "format": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2,
                                                        3
                                                    ]
                                                },
                                                "hashTypeId": {
                                                    "type": "integer"
                                                },
                                                "hashCount": {
                                                    "type": "integer"
                                                },
                                                "separator": {
                                                    "type": "string"
                                                },
                                                "cracked": {
                                                    "type": "integer"
                                                },
                                                "isSecret": {
                                                    "type": "boolean"
                                                },
                                                "isHexSalt": {
                                                    "type": "boolean"
                                                },
                                                "isSalted": {
                                                    "type": "boolean"
                                                },
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "useBrain": {
                                                    "type": "boolean"
                                                },
                                                "brainFeatures": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "assignedAgents"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "agentName": {
                                                    "type": "string"
                                                },
                                                "uid": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "type": "integer"
                                                },
                                                "devices": {
                                                    "type": "string"
                                                },
                                                "cmdPars": {
                                                    "type": "string"
                                                },
                                                "ignoreErrors": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2
                                                    ]
                                                },
                                                "isActive": {
                                                    "type": "boolean"
                                                },
                                                "isTrusted": {
                                                    "type": "boolean"
                                                },
                                                "token": {
                                                    "type": "string"
                                                },
                                                "lastAct": {
                                                    "type": "string"
                                                },
                                                "lastTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "lastIp": {
                                                    "type": "string"
                                                },
                                                "userId": {
                                                    "type": "integer"
                                                },
                                                "cpuOnly": {
                                                    "type": "boolean"
                                                },
                                                "clientSignature": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "files"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "sourceType": {
                                                    "type": "string"
                                                },
                                                "sourceData": {
                                                    "type": "string"
                                                },
                                                "fileId": {
                                                    "type": "integer"
                                                },
                                                "filename": {
                                                    "type": "string"
                                                },
                                                "size": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "isSecret": {
                                                    "type": "boolean"
                                                },
                                                "fileType": {
                                                    "type": "integer"
                                                },
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "lineCount": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "speeds"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "speedId": {
                                                    "type": "integer"
                                                },
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "speed": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "time": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "TaskSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Task"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "taskName": {
                                "type": "string"
                            },
                            "attackCmd": {
                                "type": "string"
                            },
                            "chunkTime": {
                                "type": "integer"
                            },
                            "statusTimer": {
                                "type": "integer"
                            },
                            "keyspace": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "keyspaceProgress": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "priority": {
                                "type": "integer"
                            },
                            "maxAgents": {
                                "type": "integer"
                            },
                            "color": {
                                "type": "string"
                            },
                            "isSmall": {
                                "type": "boolean"
                            },
                            "isCpuTask": {
                                "type": "boolean"
                            },
                            "useNewBench": {
                                "type": "boolean"
                            },
                            "skipKeyspace": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "crackerBinaryId": {
                                "type": "integer"
                            },
                            "crackerBinaryTypeId": {
                                "type": "integer"
                            },
                            "taskWrapperId": {
                                "type": "integer"
                            },
                            "isArchived": {
                                "type": "boolean"
                            },
                            "notes": {
                                "type": "string"
                            },
                            "staticChunks": {
                                "type": "integer"
                            },
                            "chunkSize": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "forcePipe": {
                                "type": "boolean"
                            },
                            "preprocessorId": {
                                "type": "integer"
                            },
                            "preprocessorCommand": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "assignedAgents": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/relationships/assignedAgents"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/assignedAgents"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "crackerBinary": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/relationships/crackerBinary"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/crackerBinary"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "crackerBinaryType": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/relationships/crackerBinaryType"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/crackerBinaryType"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "files": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/relationships/files"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/files"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "hashlist": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/relationships/hashlist"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/hashlist"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "speeds": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/relationships/speeds"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/tasks/speeds"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "crackerBinary"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "version": {
                                                    "type": "string"
                                                },
                                                "downloadUrl": {
                                                    "type": "string"
                                                },
                                                "binaryName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "crackerBinaryType"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "typeName": {
                                                    "type": "string"
                                                },
                                                "isChunkingAvailable": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "hashlist"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistSeperator": {
                                                    "type": "string"
                                                },
                                                "sourceType": {
                                                    "type": "string"
                                                },
                                                "sourceData": {
                                                    "type": "string"
                                                },
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "format": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2,
                                                        3
                                                    ]
                                                },
                                                "hashTypeId": {
                                                    "type": "integer"
                                                },
                                                "hashCount": {
                                                    "type": "integer"
                                                },
                                                "separator": {
                                                    "type": "string"
                                                },
                                                "cracked": {
                                                    "type": "integer"
                                                },
                                                "isSecret": {
                                                    "type": "boolean"
                                                },
                                                "isHexSalt": {
                                                    "type": "boolean"
                                                },
                                                "isSalted": {
                                                    "type": "boolean"
                                                },
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "useBrain": {
                                                    "type": "boolean"
                                                },
                                                "brainFeatures": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "assignedAgents"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "agentName": {
                                                    "type": "string"
                                                },
                                                "uid": {
                                                    "type": "string"
                                                },
                                                "os": {
                                                    "type": "integer"
                                                },
                                                "devices": {
                                                    "type": "string"
                                                },
                                                "cmdPars": {
                                                    "type": "string"
                                                },
                                                "ignoreErrors": {
                                                    "type": "integer",
                                                    "enum": [
                                                        0,
                                                        1,
                                                        2
                                                    ]
                                                },
                                                "isActive": {
                                                    "type": "boolean"
                                                },
                                                "isTrusted": {
                                                    "type": "boolean"
                                                },
                                                "token": {
                                                    "type": "string"
                                                },
                                                "lastAct": {
                                                    "type": "string"
                                                },
                                                "lastTime": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "lastIp": {
                                                    "type": "string"
                                                },
                                                "userId": {
                                                    "type": "integer"
                                                },
                                                "cpuOnly": {
                                                    "type": "boolean"
                                                },
                                                "clientSignature": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "files"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "sourceType": {
                                                    "type": "string"
                                                },
                                                "sourceData": {
                                                    "type": "string"
                                                },
                                                "fileId": {
                                                    "type": "integer"
                                                },
                                                "filename": {
                                                    "type": "string"
                                                },
                                                "size": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "isSecret": {
                                                    "type": "boolean"
                                                },
                                                "fileType": {
                                                    "type": "integer"
                                                },
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "lineCount": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "speeds"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "speedId": {
                                                    "type": "integer"
                                                },
                                                "agentId": {
                                                    "type": "integer"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "speed": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "time": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "TaskPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "Task"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "taskName": {
                                "type": "string"
                            },
                            "attackCmd": {
                                "type": "string"
                            },
                            "chunkTime": {
                                "type": "integer"
                            },
                            "statusTimer": {
                                "type": "integer"
                            },
                            "keyspace": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "keyspaceProgress": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "priority": {
                                "type": "integer"
                            },
                            "maxAgents": {
                                "type": "integer"
                            },
                            "color": {
                                "type": "string"
                            },
                            "isSmall": {
                                "type": "boolean"
                            },
                            "isCpuTask": {
                                "type": "boolean"
                            },
                            "useNewBench": {
                                "type": "boolean"
                            },
                            "skipKeyspace": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "crackerBinaryId": {
                                "type": "integer"
                            },
                            "crackerBinaryTypeId": {
                                "type": "integer"
                            },
                            "taskWrapperId": {
                                "type": "integer"
                            },
                            "isArchived": {
                                "type": "boolean"
                            },
                            "notes": {
                                "type": "string"
                            },
                            "staticChunks": {
                                "type": "integer"
                            },
                            "chunkSize": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "forcePipe": {
                                "type": "boolean"
                            },
                            "preprocessorId": {
                                "type": "integer"
                            },
                            "preprocessorCommand": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "TaskListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "TaskWrapperCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "priority": {
                                        "type": "integer"
                                    },
                                    "maxAgents": {
                                        "type": "integer"
                                    },
                                    "taskType": {
                                        "type": "integer",
                                        "enum": [
                                            0,
                                            1
                                        ]
                                    },
                                    "hashlistId": {
                                        "type": "integer"
                                    },
                                    "accessGroupId": {
                                        "type": "integer"
                                    },
                                    "taskWrapperName": {
                                        "type": "string"
                                    },
                                    "isArchived": {
                                        "type": "boolean"
                                    },
                                    "cracked": {
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TaskWrapperPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "accessGroupId": {
                                        "type": "integer"
                                    },
                                    "isArchived": {
                                        "type": "boolean"
                                    },
                                    "maxAgents": {
                                        "type": "integer"
                                    },
                                    "priority": {
                                        "type": "integer"
                                    },
                                    "taskWrapperName": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TaskWrapperResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/taskwrappers?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/taskwrappers?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/taskwrappers?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/taskwrappers?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/taskwrappers?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "TaskWrapper"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "priority": {
                                "type": "integer"
                            },
                            "maxAgents": {
                                "type": "integer"
                            },
                            "taskType": {
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "hashlistId": {
                                "type": "integer"
                            },
                            "accessGroupId": {
                                "type": "integer"
                            },
                            "taskWrapperName": {
                                "type": "string"
                            },
                            "isArchived": {
                                "type": "boolean"
                            },
                            "cracked": {
                                "type": "integer"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "accessGroup": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/taskwrappers/relationships/accessGroup"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/taskwrappers/accessGroup"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "tasks": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/taskwrappers/relationships/tasks"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/taskwrappers/tasks"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "accessGroup"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "groupName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "tasks"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "TaskWrapperSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "TaskWrapper"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "priority": {
                                "type": "integer"
                            },
                            "maxAgents": {
                                "type": "integer"
                            },
                            "taskType": {
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "hashlistId": {
                                "type": "integer"
                            },
                            "accessGroupId": {
                                "type": "integer"
                            },
                            "taskWrapperName": {
                                "type": "string"
                            },
                            "isArchived": {
                                "type": "boolean"
                            },
                            "cracked": {
                                "type": "integer"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "accessGroup": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/taskwrappers/relationships/accessGroup"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/taskwrappers/accessGroup"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "tasks": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/taskwrappers/relationships/tasks"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/taskwrappers/tasks"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "accessGroup"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "groupName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "tasks"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "hashlistId": {
                                                    "type": "integer"
                                                },
                                                "files": {
                                                    "type": "array"
                                                },
                                                "taskId": {
                                                    "type": "integer"
                                                },
                                                "taskName": {
                                                    "type": "string"
                                                },
                                                "attackCmd": {
                                                    "type": "string"
                                                },
                                                "chunkTime": {
                                                    "type": "integer"
                                                },
                                                "statusTimer": {
                                                    "type": "integer"
                                                },
                                                "keyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "keyspaceProgress": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "priority": {
                                                    "type": "integer"
                                                },
                                                "maxAgents": {
                                                    "type": "integer"
                                                },
                                                "color": {
                                                    "type": "string"
                                                },
                                                "isSmall": {
                                                    "type": "boolean"
                                                },
                                                "isCpuTask": {
                                                    "type": "boolean"
                                                },
                                                "useNewBench": {
                                                    "type": "boolean"
                                                },
                                                "skipKeyspace": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "crackerBinaryId": {
                                                    "type": "integer"
                                                },
                                                "crackerBinaryTypeId": {
                                                    "type": "integer"
                                                },
                                                "taskWrapperId": {
                                                    "type": "integer"
                                                },
                                                "isArchived": {
                                                    "type": "boolean"
                                                },
                                                "notes": {
                                                    "type": "string"
                                                },
                                                "staticChunks": {
                                                    "type": "integer"
                                                },
                                                "chunkSize": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "forcePipe": {
                                                    "type": "boolean"
                                                },
                                                "preprocessorId": {
                                                    "type": "integer"
                                                },
                                                "preprocessorCommand": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "TaskWrapperPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "TaskWrapper"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "priority": {
                                "type": "integer"
                            },
                            "maxAgents": {
                                "type": "integer"
                            },
                            "taskType": {
                                "type": "integer",
                                "enum": [
                                    0,
                                    1
                                ]
                            },
                            "hashlistId": {
                                "type": "integer"
                            },
                            "accessGroupId": {
                                "type": "integer"
                            },
                            "taskWrapperName": {
                                "type": "string"
                            },
                            "isArchived": {
                                "type": "boolean"
                            },
                            "cracked": {
                                "type": "integer"
                            }
                        }
                    }
                }
            },
            "TaskWrapperListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TaskWrapperResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "UserCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "email": {
                                        "type": "string"
                                    },
                                    "passwordHash": {
                                        "type": "string"
                                    },
                                    "passwordSalt": {
                                        "type": "string"
                                    },
                                    "isValid": {
                                        "type": "boolean"
                                    },
                                    "isComputedPassword": {
                                        "type": "boolean"
                                    },
                                    "lastLoginDate": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "registeredSince": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "sessionLifetime": {
                                        "type": "integer"
                                    },
                                    "globalPermissionGroupId": {
                                        "type": "integer"
                                    },
                                    "yubikey": {
                                        "type": "string"
                                    },
                                    "otp1": {
                                        "type": "string"
                                    },
                                    "otp2": {
                                        "type": "string"
                                    },
                                    "otp3": {
                                        "type": "string"
                                    },
                                    "otp4": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "UserPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string"
                                    },
                                    "globalPermissionGroupId": {
                                        "type": "integer"
                                    },
                                    "isValid": {
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "UserResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/users?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/users?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/users?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/users?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/users?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "User"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string"
                            },
                            "passwordHash": {
                                "type": "string"
                            },
                            "passwordSalt": {
                                "type": "string"
                            },
                            "isValid": {
                                "type": "boolean"
                            },
                            "isComputedPassword": {
                                "type": "boolean"
                            },
                            "lastLoginDate": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "registeredSince": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "sessionLifetime": {
                                "type": "integer"
                            },
                            "globalPermissionGroupId": {
                                "type": "integer"
                            },
                            "yubikey": {
                                "type": "string"
                            },
                            "otp1": {
                                "type": "string"
                            },
                            "otp2": {
                                "type": "string"
                            },
                            "otp3": {
                                "type": "string"
                            },
                            "otp4": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "accessGroups": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/users/relationships/accessGroups"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/users/accessGroups"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "globalPermissionGroup": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/users/relationships/globalPermissionGroup"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/users/globalPermissionGroup"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "globalPermissionGroup"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "permissions": {
                                                    "type": "object"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "accessGroups"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "groupName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "UserSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "User"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string"
                            },
                            "passwordHash": {
                                "type": "string"
                            },
                            "passwordSalt": {
                                "type": "string"
                            },
                            "isValid": {
                                "type": "boolean"
                            },
                            "isComputedPassword": {
                                "type": "boolean"
                            },
                            "lastLoginDate": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "registeredSince": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "sessionLifetime": {
                                "type": "integer"
                            },
                            "globalPermissionGroupId": {
                                "type": "integer"
                            },
                            "yubikey": {
                                "type": "string"
                            },
                            "otp1": {
                                "type": "string"
                            },
                            "otp2": {
                                "type": "string"
                            },
                            "otp3": {
                                "type": "string"
                            },
                            "otp4": {
                                "type": "string"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": [
                            {
                                "properties": {
                                    "accessGroups": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/users/relationships/accessGroups"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/users/accessGroups"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "globalPermissionGroup": {
                                        "type": "object",
                                        "properties": {
                                            "links": {
                                                "type": "object",
                                                "properties": {
                                                    "self": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/users/relationships/globalPermissionGroup"
                                                    },
                                                    "related": {
                                                        "type": "string",
                                                        "default": "/api/v2/ui/users/globalPermissionGroup"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": [
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "globalPermissionGroup"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "permissions": {
                                                    "type": "object"
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "type": {
                                            "type": "string",
                                            "default": "accessGroups"
                                        },
                                        "attributes": {
                                            "type": "object",
                                            "properties": {
                                                "accessGroupId": {
                                                    "type": "integer"
                                                },
                                                "groupName": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "UserPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "User"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string"
                            },
                            "passwordHash": {
                                "type": "string"
                            },
                            "passwordSalt": {
                                "type": "string"
                            },
                            "isValid": {
                                "type": "boolean"
                            },
                            "isComputedPassword": {
                                "type": "boolean"
                            },
                            "lastLoginDate": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "registeredSince": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "sessionLifetime": {
                                "type": "integer"
                            },
                            "globalPermissionGroupId": {
                                "type": "integer"
                            },
                            "yubikey": {
                                "type": "string"
                            },
                            "otp1": {
                                "type": "string"
                            },
                            "otp2": {
                                "type": "string"
                            },
                            "otp3": {
                                "type": "string"
                            },
                            "otp4": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "UserListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "RegVoucherCreate": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "voucher": {
                                        "type": "string"
                                    },
                                    "time": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "RegVoucherPatch": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "object",
                                "properties": {
                                    "voucher": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "RegVoucherResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "links": {
                        "type": "object",
                        "properties": {
                            "self": {
                                "type": "string",
                                "default": "/api/v2/ui/vouchers?page[size]=25"
                            },
                            "first": {
                                "type": "string",
                                "default": "/api/v2/ui/vouchers?page[size]=25&page[after]=0"
                            },
                            "last": {
                                "type": "string",
                                "default": "/api/v2/ui/vouchers?page[size]=25&page[before]=500"
                            },
                            "next": {
                                "type": "string",
                                "default": "/api/v2/ui/vouchers?page[size]=25&page[after]=25"
                            },
                            "previous": {
                                "type": "string",
                                "default": "/api/v2/ui/vouchers?page[size]=25&page[before]=25"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "RegVoucher"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "voucher": {
                                "type": "string"
                            },
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "RegVoucherSingleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "RegVoucher"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "voucher": {
                                "type": "string"
                            },
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    },
                    "relationships": {
                        "type": "object",
                        "properties": []
                    },
                    "included": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": []
                        }
                    }
                }
            },
            "RegVoucherPostPatchResponse": {
                "type": "object",
                "properties": {
                    "jsonapi": {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string",
                                "default": "1.1"
                            },
                            "ext": {
                                "type": "string",
                                "default": "https://jsonapi.org/profiles/ethanresnick/cursor-pagination"
                            }
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "default": "RegVoucher"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "voucher": {
                                "type": "string"
                            },
                            "time": {
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                }
            },
            "RegVoucherListResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "values": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RegVoucherResponse"
                                }
                            }
                        }
                    }
                ]
            },
            "Token": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string"
                    },
                    "expires": {
                        "type": "integer"
                    }
                },
                "additionalProperties": false
            },
            "TokenRequest": {
                "type": "array",
                "items": {
                    "type": "string",
                    "example": "role.all"
                }
            },
            "ObjectRequest": {
                "type": "object",
                "properties": {
                    "expand": {
                        "type": "string"
                    },
                    "expires": {
                        "type": "integer"
                    }
                },
                "additionalProperties": false
            },
            "ObjectListRequest": {
                "type": "object",
                "properties": {
                    "expand": {
                        "type": "string"
                    },
                    "filter": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": ""
                        }
                    }
                },
                "additionalProperties": false
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "JWT Authorization header using the Bearer scheme.",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "scopes": [
                    "permAccessGroupCreate",
                    "permAccessGroupDelete",
                    "permAccessGroupRead",
                    "permAccessGroupUpdate",
                    "permAgentAssignmentCreate",
                    "permAgentAssignmentDelete",
                    "permAgentAssignmentRead",
                    "permAgentAssignmentUpdate",
                    "permAgentBinaryCreate",
                    "permAgentBinaryDelete",
                    "permAgentBinaryRead",
                    "permAgentBinaryUpdate",
                    "permAgentCreate",
                    "permAgentDelete",
                    "permAgentRead",
                    "permAgentStatDelete",
                    "permAgentStatRead",
                    "permAgentUpdate",
                    "permChunkRead",
                    "permChunkUpdate",
                    "permConfigRead",
                    "permConfigSectionRead",
                    "permConfigUpdate",
                    "permCrackerBinaryCreate",
                    "permCrackerBinaryDelete",
                    "permCrackerBinaryRead",
                    "permCrackerBinaryTypeCreate",
                    "permCrackerBinaryTypeDelete",
                    "permCrackerBinaryTypeRead",
                    "permCrackerBinaryTypeUpdate",
                    "permCrackerBinaryUpdate",
                    "permFileCreate",
                    "permFileDelete",
                    "permFileRead",
                    "permFileUpdate",
                    "permHashRead",
                    "permHashTypeCreate",
                    "permHashTypeDelete",
                    "permHashTypeRead",
                    "permHashTypeUpdate",
                    "permHashUpdate",
                    "permHashlistCreate",
                    "permHashlistDelete",
                    "permHashlistRead",
                    "permHashlistUpdate",
                    "permHealthCheckAgentRead",
                    "permHealthCheckAgentUpdate",
                    "permHealthCheckCreate",
                    "permHealthCheckDelete",
                    "permHealthCheckRead",
                    "permHealthCheckUpdate",
                    "permLogEntryCreate",
                    "permLogEntryDelete",
                    "permLogEntryRead",
                    "permLogEntryUpdate",
                    "permNotificationSettingCreate",
                    "permNotificationSettingDelete",
                    "permNotificationSettingRead",
                    "permNotificationSettingUpdate",
                    "permPreprocessorCreate",
                    "permPreprocessorDelete",
                    "permPreprocessorRead",
                    "permPreprocessorUpdate",
                    "permPretaskCreate",
                    "permPretaskDelete",
                    "permPretaskRead",
                    "permPretaskUpdate",
                    "permRegVoucherCreate",
                    "permRegVoucherDelete",
                    "permRegVoucherRead",
                    "permRegVoucherUpdate",
                    "permRightGroupCreate",
                    "permRightGroupDelete",
                    "permRightGroupRead",
                    "permRightGroupUpdate",
                    "permSpeedRead",
                    "permSpeedUpdate",
                    "permSupertaskCreate",
                    "permSupertaskDelete",
                    "permSupertaskRead",
                    "permSupertaskUpdate",
                    "permTaskCreate",
                    "permTaskDelete",
                    "permTaskRead",
                    "permTaskUpdate",
                    "permTaskWrapperCreate",
                    "permTaskWrapperDelete",
                    "permTaskWrapperRead",
                    "permTaskWrapperUpdate",
                    "permUserCreate",
                    "permUserDelete",
                    "permUserRead",
                    "permUserUpdate"
                ]
            },
            "basicAuth": {
                "type": "http",
                "description": "Basic Authorization header.",
                "scheme": "basic"
            }
        }
    }
}